{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectWithoutProperties\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar client_subclient_1 = __importDefault(require(\"../client.subclient\"));\n\nvar globals_1 = require(\"../globals\");\n\nvar paginators_1 = require(\"../paginators\");\n\nvar client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\n\nvar user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\n\nvar helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\n\n\nvar TwitterApiv2ReadOnly = /*#__PURE__*/function (_client_subclient_1$d) {\n  _inherits(TwitterApiv2ReadOnly, _client_subclient_1$d);\n\n  function TwitterApiv2ReadOnly() {\n    var _this;\n\n    _classCallCheck(this, TwitterApiv2ReadOnly);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterApiv2ReadOnly).apply(this, arguments));\n    _this._prefix = globals_1.API_V2_PREFIX;\n    return _this;\n  }\n  /* Sub-clients */\n\n  /**\n   * Get a client for v2 labs endpoints.\n   */\n\n\n  _createClass(TwitterApiv2ReadOnly, [{\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryOrOptions) {\n        var options,\n            query,\n            realOptions,\n            queryParams,\n            initialRq,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                query = typeof queryOrOptions === 'string' ? queryOrOptions : undefined;\n                realOptions = typeof queryOrOptions === 'object' && queryOrOptions !== null ? queryOrOptions : options;\n                queryParams = _objectSpread({}, realOptions, {\n                  query: query\n                });\n                _context.next = 6;\n                return this.get('tweets/search/recent', queryParams, {\n                  fullResponse: true\n                });\n\n              case 6:\n                initialRq = _context.sent;\n                return _context.abrupt(\"return\", new paginators_1.TweetSearchRecentV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function search(_x) {\n        return _search.apply(this, arguments);\n      }\n\n      return search;\n    }()\n    /**\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     *\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n     */\n\n  }, {\n    key: \"searchAll\",\n    value: function () {\n      var _searchAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(query) {\n        var options,\n            queryParams,\n            initialRq,\n            _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                queryParams = _objectSpread({}, options, {\n                  query: query\n                });\n                _context2.next = 4;\n                return this.get('tweets/search/all', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context2.sent;\n                return _context2.abrupt(\"return\", new paginators_1.TweetSearchAllV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function searchAll(_x2) {\n        return _searchAll.apply(this, arguments);\n      }\n\n      return searchAll;\n    }()\n    /**\n     * Returns a variety of information about a single Tweet specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n\n  }, {\n    key: \"singleTweet\",\n    value: function singleTweet(tweetId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('tweets/:id', options, {\n        params: {\n          id: tweetId\n        }\n      });\n    }\n    /**\n     * Returns a variety of information about tweets specified by list of IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n\n  }, {\n    key: \"tweets\",\n    value: function tweets(tweetIds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('tweets', _objectSpread({\n        ids: tweetIds\n      }, options));\n    }\n    /**\n     * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n     * OAuth2 Bearer auth only.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n     */\n\n  }, {\n    key: \"tweetCountRecent\",\n    value: function tweetCountRecent(query) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('tweets/counts/recent', _objectSpread({\n        query: query\n      }, options));\n    }\n    /**\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     * OAuth2 Bearer auth only.\n     * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n     */\n\n  }, {\n    key: \"tweetCountAll\",\n    value: function tweetCountAll(query) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('tweets/counts/all', _objectSpread({\n        query: query\n      }, options));\n    }\n  }, {\n    key: \"tweetRetweetedBy\",\n    value: function () {\n      var _tweetRetweetedBy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tweetId) {\n        var options,\n            asPaginator,\n            parameters,\n            initialRq,\n            _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                asPaginator = options.asPaginator, parameters = _objectWithoutProperties(options, [\"asPaginator\"]);\n                _context3.next = 4;\n                return this.get('tweets/:id/retweeted_by', parameters, {\n                  fullResponse: true,\n                  params: {\n                    id: tweetId\n                  }\n                });\n\n              case 4:\n                initialRq = _context3.sent;\n\n                if (asPaginator) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", initialRq.data);\n\n              case 7:\n                return _context3.abrupt(\"return\", new user_paginator_v2_1.TweetRetweetersUsersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: parameters,\n                  sharedParams: {\n                    id: tweetId\n                  }\n                }));\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function tweetRetweetedBy(_x3) {\n        return _tweetRetweetedBy.apply(this, arguments);\n      }\n\n      return tweetRetweetedBy;\n    }()\n  }, {\n    key: \"tweetLikedBy\",\n    value: function () {\n      var _tweetLikedBy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tweetId) {\n        var options,\n            asPaginator,\n            parameters,\n            initialRq,\n            _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                asPaginator = options.asPaginator, parameters = _objectWithoutProperties(options, [\"asPaginator\"]);\n                _context4.next = 4;\n                return this.get('tweets/:id/liking_users', parameters, {\n                  fullResponse: true,\n                  params: {\n                    id: tweetId\n                  }\n                });\n\n              case 4:\n                initialRq = _context4.sent;\n\n                if (asPaginator) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", initialRq.data);\n\n              case 7:\n                return _context4.abrupt(\"return\", new user_paginator_v2_1.TweetLikingUsersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: parameters,\n                  sharedParams: {\n                    id: tweetId\n                  }\n                }));\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function tweetLikedBy(_x4) {\n        return _tweetLikedBy.apply(this, arguments);\n      }\n\n      return tweetLikedBy;\n    }()\n    /**\n     * Allows you to retrieve a collection of the most recent Tweets and Retweets posted by you and users you follow, also known as home timeline.\n     * This endpoint returns up to the last 3200 Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-reverse-chronological\n     *\n     * OAuth 2 scopes: `tweet.read` `users.read`\n     */\n\n  }, {\n    key: \"homeTimeline\",\n    value: function () {\n      var _homeTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var options,\n            meUser,\n            initialRq,\n            _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};\n                _context5.next = 3;\n                return this.getCurrentUserV2Object();\n\n              case 3:\n                meUser = _context5.sent;\n                _context5.next = 6;\n                return this.get('users/:id/timelines/reverse_chronological', options, {\n                  fullResponse: true,\n                  params: {\n                    id: meUser.data.id\n                  }\n                });\n\n              case 6:\n                initialRq = _context5.sent;\n                return _context5.abrupt(\"return\", new paginators_1.TweetHomeTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: meUser.data.id\n                  }\n                }));\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function homeTimeline() {\n        return _homeTimeline.apply(this, arguments);\n      }\n\n      return homeTimeline;\n    }()\n    /**\n     * Returns Tweets composed by a single user, specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, the most recent 3,200 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n     */\n\n  }, {\n    key: \"userTimeline\",\n    value: function () {\n      var _userTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(userId) {\n        var options,\n            initialRq,\n            _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n                _context6.next = 3;\n                return this.get('users/:id/tweets', options, {\n                  fullResponse: true,\n                  params: {\n                    id: userId\n                  }\n                });\n\n              case 3:\n                initialRq = _context6.sent;\n                return _context6.abrupt(\"return\", new paginators_1.TweetUserTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: userId\n                  }\n                }));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function userTimeline(_x5) {\n        return _userTimeline.apply(this, arguments);\n      }\n\n      return userTimeline;\n    }()\n    /**\n     * Returns Tweets mentioning a single user specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, up to the most recent 800 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n     */\n\n  }, {\n    key: \"userMentionTimeline\",\n    value: function () {\n      var _userMentionTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(userId) {\n        var options,\n            initialRq,\n            _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n                _context7.next = 3;\n                return this.get('users/:id/mentions', options, {\n                  fullResponse: true,\n                  params: {\n                    id: userId\n                  }\n                });\n\n              case 3:\n                initialRq = _context7.sent;\n                return _context7.abrupt(\"return\", new paginators_1.TweetUserMentionTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: userId\n                  }\n                }));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function userMentionTimeline(_x6) {\n        return _userMentionTimeline.apply(this, arguments);\n      }\n\n      return userMentionTimeline;\n    }()\n    /**\n     * Returns Quote Tweets for a Tweet specified by the requested Tweet ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/quote-tweets/api-reference/get-tweets-id-quote_tweets\n     *\n     * OAuth2 scopes: `users.read` `tweet.read`\n     */\n\n  }, {\n    key: \"quotes\",\n    value: function () {\n      var _quotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(tweetId) {\n        var options,\n            initialRq,\n            _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n                _context8.next = 3;\n                return this.get('tweets/:id/quote_tweets', options, {\n                  fullResponse: true,\n                  params: {\n                    id: tweetId\n                  }\n                });\n\n              case 3:\n                initialRq = _context8.sent;\n                return _context8.abrupt(\"return\", new paginators_1.QuotedTweetsTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: tweetId\n                  }\n                }));\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function quotes(_x7) {\n        return _quotes.apply(this, arguments);\n      }\n\n      return quotes;\n    }()\n    /* Bookmarks */\n\n    /**\n     * Allows you to get information about a authenticated user’s 800 most recent bookmarked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/get-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.read`\n     */\n\n  }, {\n    key: \"bookmarks\",\n    value: function () {\n      var _bookmarks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var options,\n            user,\n            initialRq,\n            _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n                _context9.next = 3;\n                return this.getCurrentUserV2Object();\n\n              case 3:\n                user = _context9.sent;\n                _context9.next = 6;\n                return this.get('users/:id/bookmarks', options, {\n                  fullResponse: true,\n                  params: {\n                    id: user.data.id\n                  }\n                });\n\n              case 6:\n                initialRq = _context9.sent;\n                return _context9.abrupt(\"return\", new paginators_1.TweetBookmarksTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: user.data.id\n                  }\n                }));\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function bookmarks() {\n        return _bookmarks.apply(this, arguments);\n      }\n\n      return bookmarks;\n    }()\n    /* Users */\n\n    /**\n     * Returns information about an authorized user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n\n  }, {\n    key: \"me\",\n    value: function me() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.get('users/me', options);\n    }\n    /**\n     * Returns a variety of information about a single user specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n     */\n\n  }, {\n    key: \"user\",\n    value: function user(userId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('users/:id', options, {\n        params: {\n          id: userId\n        }\n      });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by the requested IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n     */\n\n  }, {\n    key: \"users\",\n    value: function users(userIds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n      return this.get('users', _objectSpread({}, options, {\n        ids: ids\n      }));\n    }\n    /**\n     * Returns a variety of information about a single user specified by their username.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n     */\n\n  }, {\n    key: \"userByUsername\",\n    value: function userByUsername(username) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('users/by/username/:username', options, {\n        params: {\n          username: username\n        }\n      });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by their usernames.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n\n  }, {\n    key: \"usersByUsernames\",\n    value: function usersByUsernames(usernames) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n      return this.get('users/by', _objectSpread({}, options, {\n        usernames: usernames\n      }));\n    }\n  }, {\n    key: \"followers\",\n    value: function () {\n      var _followers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(userId) {\n        var options,\n            asPaginator,\n            parameters,\n            params,\n            initialRq,\n            _args10 = arguments;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                options = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};\n                asPaginator = options.asPaginator, parameters = _objectWithoutProperties(options, [\"asPaginator\"]);\n                params = {\n                  id: userId\n                };\n\n                if (asPaginator) {\n                  _context10.next = 5;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", this.get('users/:id/followers', parameters, {\n                  params: params\n                }));\n\n              case 5:\n                _context10.next = 7;\n                return this.get('users/:id/followers', parameters, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 7:\n                initialRq = _context10.sent;\n                return _context10.abrupt(\"return\", new user_paginator_v2_1.UserFollowersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: parameters,\n                  sharedParams: params\n                }));\n\n              case 9:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function followers(_x8) {\n        return _followers.apply(this, arguments);\n      }\n\n      return followers;\n    }()\n  }, {\n    key: \"following\",\n    value: function () {\n      var _following = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(userId) {\n        var options,\n            asPaginator,\n            parameters,\n            params,\n            initialRq,\n            _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                options = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};\n                asPaginator = options.asPaginator, parameters = _objectWithoutProperties(options, [\"asPaginator\"]);\n                params = {\n                  id: userId\n                };\n\n                if (asPaginator) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", this.get('users/:id/following', parameters, {\n                  params: params\n                }));\n\n              case 5:\n                _context11.next = 7;\n                return this.get('users/:id/following', parameters, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 7:\n                initialRq = _context11.sent;\n                return _context11.abrupt(\"return\", new user_paginator_v2_1.UserFollowingV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: parameters,\n                  sharedParams: params\n                }));\n\n              case 9:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function following(_x9) {\n        return _following.apply(this, arguments);\n      }\n\n      return following;\n    }()\n    /**\n     * Allows you to get information about a user’s liked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n     */\n\n  }, {\n    key: \"userLikedTweets\",\n    value: function () {\n      var _userLikedTweets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(userId) {\n        var options,\n            params,\n            initialRq,\n            _args12 = arguments;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                options = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};\n                params = {\n                  id: userId\n                };\n                _context12.next = 4;\n                return this.get('users/:id/liked_tweets', options, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 4:\n                initialRq = _context12.sent;\n                return _context12.abrupt(\"return\", new paginators_1.TweetV2UserLikedTweetsPaginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function userLikedTweets(_x10) {\n        return _userLikedTweets.apply(this, arguments);\n      }\n\n      return userLikedTweets;\n    }()\n    /**\n     * Returns a list of users who are blocked by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n     */\n\n  }, {\n    key: \"userBlockingUsers\",\n    value: function () {\n      var _userBlockingUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(userId) {\n        var options,\n            params,\n            initialRq,\n            _args13 = arguments;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                options = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};\n                params = {\n                  id: userId\n                };\n                _context13.next = 4;\n                return this.get('users/:id/blocking', options, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 4:\n                initialRq = _context13.sent;\n                return _context13.abrupt(\"return\", new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function userBlockingUsers(_x11) {\n        return _userBlockingUsers.apply(this, arguments);\n      }\n\n      return userBlockingUsers;\n    }()\n    /**\n     * Returns a list of users who are muted by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n     */\n\n  }, {\n    key: \"userMutingUsers\",\n    value: function () {\n      var _userMutingUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(userId) {\n        var options,\n            params,\n            initialRq,\n            _args14 = arguments;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                options = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};\n                params = {\n                  id: userId\n                };\n                _context14.next = 4;\n                return this.get('users/:id/muting', options, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 4:\n                initialRq = _context14.sent;\n                return _context14.abrupt(\"return\", new user_paginator_v2_1.UserMutingUsersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function userMutingUsers(_x12) {\n        return _userMutingUsers.apply(this, arguments);\n      }\n\n      return userMutingUsers;\n    }()\n    /* Lists */\n\n    /**\n     * Returns the details of a specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-lists-id\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(id) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('lists/:id', options, {\n        params: {\n          id: id\n        }\n      });\n    }\n    /**\n     * Returns all Lists owned by the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-users-id-owned_lists\n     */\n\n  }, {\n    key: \"listsOwned\",\n    value: function () {\n      var _listsOwned = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(userId) {\n        var options,\n            params,\n            initialRq,\n            _args15 = arguments;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};\n                params = {\n                  id: userId\n                };\n                _context15.next = 4;\n                return this.get('users/:id/owned_lists', options, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 4:\n                initialRq = _context15.sent;\n                return _context15.abrupt(\"return\", new paginators_1.UserOwnedListsV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function listsOwned(_x13) {\n        return _listsOwned.apply(this, arguments);\n      }\n\n      return listsOwned;\n    }()\n    /**\n     * Returns all Lists a specified user is a member of.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships\n     */\n\n  }, {\n    key: \"listMemberships\",\n    value: function () {\n      var _listMemberships = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(userId) {\n        var options,\n            params,\n            initialRq,\n            _args16 = arguments;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                options = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {};\n                params = {\n                  id: userId\n                };\n                _context16.next = 4;\n                return this.get('users/:id/list_memberships', options, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 4:\n                initialRq = _context16.sent;\n                return _context16.abrupt(\"return\", new paginators_1.UserListMembershipsV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function listMemberships(_x14) {\n        return _listMemberships.apply(this, arguments);\n      }\n\n      return listMemberships;\n    }()\n    /**\n     * Returns all Lists a specified user follows.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-users-id-followed_lists\n     */\n\n  }, {\n    key: \"listFollowed\",\n    value: function () {\n      var _listFollowed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(userId) {\n        var options,\n            params,\n            initialRq,\n            _args17 = arguments;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                options = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};\n                params = {\n                  id: userId\n                };\n                _context17.next = 4;\n                return this.get('users/:id/followed_lists', options, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 4:\n                initialRq = _context17.sent;\n                return _context17.abrupt(\"return\", new paginators_1.UserListFollowedV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function listFollowed(_x15) {\n        return _listFollowed.apply(this, arguments);\n      }\n\n      return listFollowed;\n    }()\n    /**\n     * Returns a list of Tweets from the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-tweets/api-reference/get-lists-id-tweets\n     */\n\n  }, {\n    key: \"listTweets\",\n    value: function () {\n      var _listTweets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(listId) {\n        var options,\n            params,\n            initialRq,\n            _args18 = arguments;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                options = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {};\n                params = {\n                  id: listId\n                };\n                _context18.next = 4;\n                return this.get('lists/:id/tweets', options, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 4:\n                initialRq = _context18.sent;\n                return _context18.abrupt(\"return\", new paginators_1.TweetV2ListTweetsPaginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function listTweets(_x16) {\n        return _listTweets.apply(this, arguments);\n      }\n\n      return listTweets;\n    }()\n    /**\n     * Returns a list of users who are members of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-lists-id-members\n     */\n\n  }, {\n    key: \"listMembers\",\n    value: function () {\n      var _listMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(listId) {\n        var options,\n            params,\n            initialRq,\n            _args19 = arguments;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n                params = {\n                  id: listId\n                };\n                _context19.next = 4;\n                return this.get('lists/:id/members', options, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 4:\n                initialRq = _context19.sent;\n                return _context19.abrupt(\"return\", new user_paginator_v2_1.UserListMembersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function listMembers(_x17) {\n        return _listMembers.apply(this, arguments);\n      }\n\n      return listMembers;\n    }()\n    /**\n     * Returns a list of users who are followers of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-lists-id-followers\n     */\n\n  }, {\n    key: \"listFollowers\",\n    value: function () {\n      var _listFollowers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(listId) {\n        var options,\n            params,\n            initialRq,\n            _args20 = arguments;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                options = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : {};\n                params = {\n                  id: listId\n                };\n                _context20.next = 4;\n                return this.get('lists/:id/followers', options, {\n                  fullResponse: true,\n                  params: params\n                });\n\n              case 4:\n                initialRq = _context20.sent;\n                return _context20.abrupt(\"return\", new user_paginator_v2_1.UserListFollowersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function listFollowers(_x18) {\n        return _listFollowers.apply(this, arguments);\n      }\n\n      return listFollowers;\n    }()\n    /* Spaces */\n\n    /**\n     * Get a single space by ID.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n\n  }, {\n    key: \"space\",\n    value: function space(spaceId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('spaces/:id', options, {\n        params: {\n          id: spaceId\n        }\n      });\n    }\n    /**\n     * Get spaces using their IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n\n  }, {\n    key: \"spaces\",\n    value: function spaces(spaceIds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('spaces', _objectSpread({\n        ids: spaceIds\n      }, options));\n    }\n    /**\n     * Get spaces using their creator user ID(s). (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n\n  }, {\n    key: \"spacesByCreators\",\n    value: function spacesByCreators(creatorIds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('spaces/by/creator_ids', _objectSpread({\n        user_ids: creatorIds\n      }, options));\n    }\n    /**\n     * Search through spaces using multiple params. (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n     */\n\n  }, {\n    key: \"searchSpaces\",\n    value: function searchSpaces(options) {\n      return this.get('spaces/search', options);\n    }\n    /**\n    * Returns a list of user who purchased a ticket to the requested Space.\n    * You must authenticate the request using the Access Token of the creator of the requested Space.\n    *\n    * **OAuth 2.0 Access Token required**\n    *\n    * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers\n    *\n    * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n    */\n\n  }, {\n    key: \"spaceBuyers\",\n    value: function spaceBuyers(spaceId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('spaces/:id/buyers', options, {\n        params: {\n          id: spaceId\n        }\n      });\n    }\n  }, {\n    key: \"searchStream\",\n    value: function searchStream() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          autoConnect = _ref.autoConnect,\n          options = _objectWithoutProperties(_ref, [\"autoConnect\"]);\n\n      return this.getStream('tweets/search/stream', options, {\n        payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n        autoConnect: autoConnect\n      });\n    }\n    /**\n     * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n     */\n\n  }, {\n    key: \"streamRules\",\n    value: function streamRules() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.get('tweets/search/stream/rules', options);\n    }\n  }, {\n    key: \"updateStreamRules\",\n    value: function updateStreamRules(options) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.post('tweets/search/stream/rules', options, {\n        query: query\n      });\n    }\n  }, {\n    key: \"sampleStream\",\n    value: function sampleStream() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          autoConnect = _ref2.autoConnect,\n          options = _objectWithoutProperties(_ref2, [\"autoConnect\"]);\n\n      return this.getStream('tweets/sample/stream', options, {\n        payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n        autoConnect: autoConnect\n      });\n    }\n    /* Batch compliance */\n\n    /**\n     * Returns a list of recent compliance jobs.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n     */\n\n  }, {\n    key: \"complianceJobs\",\n    value: function complianceJobs(options) {\n      return this.get('compliance/jobs', options);\n    }\n    /**\n     * Get a single compliance job with the specified ID.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n     */\n\n  }, {\n    key: \"complianceJob\",\n    value: function complianceJob(jobId) {\n      return this.get('compliance/jobs/:id', undefined, {\n        params: {\n          id: jobId\n        }\n      });\n    }\n    /**\n     * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n     * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n     *\n     * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n\n  }, {\n    key: \"sendComplianceJob\",\n    value: function () {\n      var _sendComplianceJob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(jobParams) {\n        var job, rawIdsBody;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.post('compliance/jobs', {\n                  type: jobParams.type,\n                  name: jobParams.name\n                });\n\n              case 2:\n                job = _context21.sent;\n                // Send the IDs\n                rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n')); // Upload the IDs\n\n                _context21.next = 6;\n                return this.put(job.data.upload_url, rawIdsBody, {\n                  forceBodyMode: 'raw',\n                  enableAuth: false,\n                  headers: {\n                    'Content-Type': 'text/plain'\n                  },\n                  prefix: ''\n                });\n\n              case 6:\n                return _context21.abrupt(\"return\", job);\n\n              case 7:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function sendComplianceJob(_x19) {\n        return _sendComplianceJob.apply(this, arguments);\n      }\n\n      return sendComplianceJob;\n    }()\n    /**\n     * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n     * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n\n  }, {\n    key: \"complianceJobResult\",\n    value: function () {\n      var _complianceJobResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(job) {\n        var runningJob, result;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                runningJob = job;\n\n              case 1:\n                if (!(runningJob.status !== 'complete')) {\n                  _context22.next = 11;\n                  break;\n                }\n\n                if (!(runningJob.status === 'expired' || runningJob.status === 'failed')) {\n                  _context22.next = 4;\n                  break;\n                }\n\n                throw new Error('Job failed to be completed.');\n\n              case 4:\n                _context22.next = 6;\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, 3500);\n                });\n\n              case 6:\n                _context22.next = 8;\n                return this.complianceJob(job.id);\n\n              case 8:\n                runningJob = _context22.sent.data;\n                _context22.next = 1;\n                break;\n\n              case 11:\n                _context22.next = 13;\n                return this.get(job.download_url, undefined, {\n                  enableAuth: false,\n                  prefix: ''\n                });\n\n              case 13:\n                result = _context22.sent;\n                return _context22.abrupt(\"return\", result.trim().split('\\n').filter(function (line) {\n                  return line;\n                }).map(function (line) {\n                  return JSON.parse(line);\n                }));\n\n              case 15:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function complianceJobResult(_x20) {\n        return _complianceJobResult.apply(this, arguments);\n      }\n\n      return complianceJobResult;\n    }()\n  }, {\n    key: \"labs\",\n    get: function get() {\n      if (this._labs) return this._labs;\n      return this._labs = new client_v2_labs_read_1.default(this);\n    }\n  }]);\n\n  return TwitterApiv2ReadOnly;\n}(client_subclient_1.default);\n\nexports.default = TwitterApiv2ReadOnly;","map":null,"metadata":{},"sourceType":"script"}