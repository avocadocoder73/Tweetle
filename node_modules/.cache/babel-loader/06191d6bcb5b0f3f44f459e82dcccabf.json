{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar QueueItem = function QueueItem(onLoad, onError, dependentItem) {\n  _classCallCheck(this, QueueItem);\n\n  this.onLoad = onLoad;\n  this.onError = onError;\n  this.data = null;\n  this.error = null;\n  this.dependentItem = dependentItem;\n};\n/**\n * AsyncResourceQueue is the queue in charge of run the async scripts\n * and notify when they finish.\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  function AsyncResourceQueue() {\n    _classCallCheck(this, AsyncResourceQueue);\n\n    this.items = new Set();\n    this.dependentItems = new Set();\n  }\n\n  _createClass(AsyncResourceQueue, [{\n    key: \"count\",\n    value: function count() {\n      return this.items.size + this.dependentItems.size;\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify() {\n      if (this._listener) {\n        this._listener();\n      }\n    }\n  }, {\n    key: \"_check\",\n    value: function _check(item) {\n      var _this = this;\n\n      var promise;\n\n      if (item.onError && item.error) {\n        promise = item.onError(item.error);\n      } else if (item.onLoad && item.data) {\n        promise = item.onLoad(item.data);\n      }\n\n      promise.then(function () {\n        _this.items.delete(item);\n\n        _this.dependentItems.delete(item);\n\n        if (_this.count() === 0) {\n          _this._notify();\n        }\n      });\n    }\n  }, {\n    key: \"setListener\",\n    value: function setListener(listener) {\n      this._listener = listener;\n    }\n  }, {\n    key: \"push\",\n    value: function push(request, onLoad, onError, dependentItem) {\n      var q = this;\n      var item = new QueueItem(onLoad, onError, dependentItem);\n      q.items.add(item);\n      return request.then(function (data) {\n        item.data = data;\n\n        if (dependentItem && !dependentItem.finished) {\n          q.dependentItems.add(item);\n          return q.items.delete(item);\n        }\n\n        if (onLoad) {\n          return q._check(item);\n        }\n\n        q.items.delete(item);\n\n        if (q.count() === 0) {\n          q._notify();\n        }\n\n        return null;\n      }).catch(function (err) {\n        item.error = err;\n\n        if (dependentItem && !dependentItem.finished) {\n          q.dependentItems.add(item);\n          return q.items.delete(item);\n        }\n\n        if (onError) {\n          return q._check(item);\n        }\n\n        q.items.delete(item);\n\n        if (q.count() === 0) {\n          q._notify();\n        }\n\n        return null;\n      });\n    }\n  }, {\n    key: \"notifyItem\",\n    value: function notifyItem(syncItem) {\n      var _iterator = _createForOfIteratorHelper(this.dependentItems),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          if (item.dependentItem === syncItem) {\n            this._check(item);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return AsyncResourceQueue;\n}();","map":null,"metadata":{},"sourceType":"script"}