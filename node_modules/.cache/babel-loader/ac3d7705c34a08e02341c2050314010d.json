{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _1 = __importDefault(require(\".\"));\n\nvar client_base_1 = __importDefault(require(\"../client.base\"));\n\nvar client_v1_read_1 = __importDefault(require(\"../v1/client.v1.read\"));\n\nvar client_v2_read_1 = __importDefault(require(\"../v2/client.v2.read\"));\n\nvar oauth2_helper_1 = require(\"../client-mixins/oauth2.helper\");\n\nvar request_param_helper_1 = __importDefault(require(\"../client-mixins/request-param.helper\"));\n/**\n * Twitter v1.1 and v2 API client.\n */\n\n\nvar TwitterApiReadOnly = /*#__PURE__*/function (_client_base_1$defaul) {\n  _inherits(TwitterApiReadOnly, _client_base_1$defaul);\n\n  function TwitterApiReadOnly() {\n    _classCallCheck(this, TwitterApiReadOnly);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TwitterApiReadOnly).apply(this, arguments));\n  }\n\n  _createClass(TwitterApiReadOnly, [{\n    key: \"currentUser\",\n\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a user authentication.\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     */\n    value: function () {\n      var _currentUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var forceFetch,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                forceFetch = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n                _context.next = 3;\n                return this.getCurrentUserObject(forceFetch);\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function currentUser() {\n        return _currentUser.apply(this, arguments);\n      }\n\n      return currentUser;\n    }()\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a or OAuth2 user authentication.\n     *\n     * This can only be the slimest available `UserV2` object, with only id, name and username properties defined.\n     * To get a customized `UserV2Result`, use `.v2.me()`\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n\n  }, {\n    key: \"currentUserV2\",\n    value: function () {\n      var _currentUserV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var forceFetch,\n            _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                forceFetch = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : false;\n                _context2.next = 3;\n                return this.getCurrentUserV2Object(forceFetch);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function currentUserV2() {\n        return _currentUserV.apply(this, arguments);\n      }\n\n      return currentUserV2;\n    }()\n    /* Shortcuts to endpoints */\n\n  }, {\n    key: \"search\",\n    value: function search(what, options) {\n      return this.v2.search(what, options);\n    }\n    /* Authentication */\n\n    /**\n     * Generate the OAuth request token link for user-based OAuth 1.0 auth.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with consumer keys\n     * const client = new TwitterApi({ appKey: 'consumer_key', appSecret: 'consumer_secret' });\n     *\n     * const tokenRequest = await client.generateAuthLink('oob-or-your-callback-url');\n     * // redirect end-user to tokenRequest.url\n     *\n     * // Save tokenRequest.oauth_token_secret somewhere, it will be needed for next auth step.\n     * ```\n     */\n\n  }, {\n    key: \"generateAuthLink\",\n    value: function () {\n      var _generateAuthLink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var oauth_callback,\n            _ref,\n            authAccessType,\n            _ref$linkMode,\n            linkMode,\n            forceLogin,\n            screenName,\n            oauthResult,\n            url,\n            _args3 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                oauth_callback = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 'oob';\n                _ref = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {}, authAccessType = _ref.authAccessType, _ref$linkMode = _ref.linkMode, linkMode = _ref$linkMode === void 0 ? 'authenticate' : _ref$linkMode, forceLogin = _ref.forceLogin, screenName = _ref.screenName;\n                _context3.next = 4;\n                return this.post('https://api.twitter.com/oauth/request_token', {\n                  oauth_callback: oauth_callback,\n                  x_auth_access_type: authAccessType\n                });\n\n              case 4:\n                oauthResult = _context3.sent;\n                url = \"https://api.twitter.com/oauth/\".concat(linkMode, \"?oauth_token=\").concat(encodeURIComponent(oauthResult.oauth_token));\n\n                if (forceLogin !== undefined) {\n                  url += \"&force_login=\".concat(encodeURIComponent(forceLogin));\n                }\n\n                if (screenName !== undefined) {\n                  url += \"&screen_name=\".concat(encodeURIComponent(screenName));\n                }\n\n                if (this._requestMaker.hasPlugins()) {\n                  this._requestMaker.applyPluginMethod('onOAuth1RequestToken', {\n                    client: this._requestMaker,\n                    url: url,\n                    oauthResult: oauthResult\n                  });\n                }\n\n                return _context3.abrupt(\"return\", _objectSpread({\n                  url: url\n                }, oauthResult));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function generateAuthLink() {\n        return _generateAuthLink.apply(this, arguments);\n      }\n\n      return generateAuthLink;\n    }()\n    /**\n     * Obtain access to user-based OAuth 1.0 auth.\n     *\n     * After user is redirect from your callback, use obtained oauth_token and oauth_verifier to\n     * instanciate the new TwitterApi instance.\n     *\n     * ```ts\n     * // Use the saved oauth_token_secret associated to oauth_token returned by callback\n     * const requestClient = new TwitterApi({\n     *  appKey: 'consumer_key',\n     *  appSecret: 'consumer_secret',\n     *  accessToken: 'oauth_token',\n     *  accessSecret: 'oauth_token_secret'\n     * });\n     *\n     * // Use oauth_verifier obtained from callback request\n     * const { client: userClient } = await requestClient.login('oauth_verifier');\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(oauth_verifier) {\n        var tokens, oauth_result, client;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                tokens = this.getActiveTokens();\n\n                if (!(tokens.type !== 'oauth-1.0a')) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw new Error('You must setup TwitterApi instance with consumer keys to accept OAuth 1.0 login');\n\n              case 3:\n                _context4.next = 5;\n                return this.post('https://api.twitter.com/oauth/access_token', {\n                  oauth_token: tokens.accessToken,\n                  oauth_verifier: oauth_verifier\n                });\n\n              case 5:\n                oauth_result = _context4.sent;\n                client = new _1.default({\n                  appKey: tokens.appKey,\n                  appSecret: tokens.appSecret,\n                  accessToken: oauth_result.oauth_token,\n                  accessSecret: oauth_result.oauth_token_secret\n                }, this._requestMaker.clientSettings);\n                return _context4.abrupt(\"return\", {\n                  accessToken: oauth_result.oauth_token,\n                  accessSecret: oauth_result.oauth_token_secret,\n                  userId: oauth_result.user_id,\n                  screenName: oauth_result.screen_name,\n                  client: client\n                });\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Enable application-only authentication.\n     *\n     * To make the request, instanciate TwitterApi with consumer and secret.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ appKey: 'consumer', appSecret: 'secret' });\n     * const appClient = await requestClient.appLogin();\n     *\n     * // Use {appClient} to make requests\n     * ```\n     */\n\n  }, {\n    key: \"appLogin\",\n    value: function () {\n      var _appLogin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var tokens, basicClient, res;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                tokens = this.getActiveTokens();\n\n                if (!(tokens.type !== 'oauth-1.0a')) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw new Error('You must setup TwitterApi instance with consumer keys to accept app-only login');\n\n              case 3:\n                // Create a client with Basic authentication\n                basicClient = new _1.default({\n                  username: tokens.appKey,\n                  password: tokens.appSecret\n                });\n                _context5.next = 6;\n                return basicClient.post('https://api.twitter.com/oauth2/token', {\n                  grant_type: 'client_credentials'\n                });\n\n              case 6:\n                res = _context5.sent;\n                return _context5.abrupt(\"return\", new _1.default(res.access_token, this._requestMaker.clientSettings));\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function appLogin() {\n        return _appLogin.apply(this, arguments);\n      }\n\n      return appLogin;\n    }()\n    /* OAuth 2 user authentication */\n\n    /**\n     * Generate the OAuth request token link for user-based OAuth 2.0 auth.\n     *\n     * - **You can only use v2 API endpoints with this authentication method.**\n     * - **You need to specify which scope you want to have when you create your auth link. Make sure it matches your needs.**\n     *\n     * See https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token for details.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with client ID\n     * const client = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * // Generate a link to callback URL that will gives a token with tweet+user read access\n     * const link = client.generateOAuth2AuthLink('your-callback-url', { scope: ['tweet.read', 'users.read'] });\n     *\n     * // Extract props from generate link\n     * const { url, state, codeVerifier } = link;\n     *\n     * // redirect end-user to url\n     * // Save `state` and `codeVerifier` somewhere, it will be needed for next auth step.\n     * ```\n     */\n\n  }, {\n    key: \"generateOAuth2AuthLink\",\n    value: function generateOAuth2AuthLink(redirectUri) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _a, _b;\n\n      if (!this._requestMaker.clientId) {\n        throw new Error('Twitter API instance is not initialized with client ID. You can find your client ID in Twitter Developer Portal. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n      }\n\n      var state = (_a = options.state) !== null && _a !== void 0 ? _a : oauth2_helper_1.OAuth2Helper.generateRandomString(32);\n      var codeVerifier = oauth2_helper_1.OAuth2Helper.getCodeVerifier();\n      var codeChallenge = oauth2_helper_1.OAuth2Helper.getCodeChallengeFromVerifier(codeVerifier);\n      var rawScope = (_b = options.scope) !== null && _b !== void 0 ? _b : '';\n      var scope = Array.isArray(rawScope) ? rawScope.join(' ') : rawScope;\n      var url = new URL('https://twitter.com/i/oauth2/authorize');\n      var query = {\n        response_type: 'code',\n        client_id: this._requestMaker.clientId,\n        redirect_uri: redirectUri,\n        state: state,\n        code_challenge: codeChallenge,\n        code_challenge_method: 's256',\n        scope: scope\n      };\n      request_param_helper_1.default.addQueryParamsToUrl(url, query);\n      var result = {\n        url: url.toString(),\n        state: state,\n        codeVerifier: codeVerifier,\n        codeChallenge: codeChallenge\n      };\n\n      if (this._requestMaker.hasPlugins()) {\n        this._requestMaker.applyPluginMethod('onOAuth2RequestToken', {\n          client: this._requestMaker,\n          result: result,\n          redirectUri: redirectUri\n        });\n      }\n\n      return result;\n    }\n    /**\n     * Obtain access to user-based OAuth 2.0 auth.\n     *\n     * After user is redirect from your callback, use obtained code to\n     * instanciate the new TwitterApi instance.\n     *\n     * You need to obtain `codeVerifier` from a call to `.generateOAuth2AuthLink`.\n     *\n     * ```ts\n     * // Use the saved codeVerifier associated to state (present in query string of callback)\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient, refreshToken } = await requestClient.loginWithOAuth2({\n     *  code: 'codeFromQueryString',\n     *  // the same URL given to generateOAuth2AuthLink\n     *  redirectUri,\n     *  // the verifier returned by generateOAuth2AuthLink\n     *  codeVerifier,\n     * });\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * // {refreshToken} is defined if 'offline.access' is in scope.\n     * ```\n     */\n\n  }, {\n    key: \"loginWithOAuth2\",\n    value: function () {\n      var _loginWithOAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref2) {\n        var code, codeVerifier, redirectUri, accessTokenResult;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                code = _ref2.code, codeVerifier = _ref2.codeVerifier, redirectUri = _ref2.redirectUri;\n\n                if (this._requestMaker.clientId) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n\n              case 3:\n                _context6.next = 5;\n                return this.post('https://api.twitter.com/2/oauth2/token', {\n                  code: code,\n                  code_verifier: codeVerifier,\n                  redirect_uri: redirectUri,\n                  grant_type: 'authorization_code',\n                  client_id: this._requestMaker.clientId,\n                  client_secret: this._requestMaker.clientSecret\n                });\n\n              case 5:\n                accessTokenResult = _context6.sent;\n                return _context6.abrupt(\"return\", this.parseOAuth2AccessTokenResult(accessTokenResult));\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function loginWithOAuth2(_x2) {\n        return _loginWithOAuth.apply(this, arguments);\n      }\n\n      return loginWithOAuth2;\n    }()\n    /**\n     * Obtain a new access token to user-based OAuth 2.0 auth from a refresh token.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient } = await requestClient.refreshOAuth2Token('refreshToken');\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n\n  }, {\n    key: \"refreshOAuth2Token\",\n    value: function () {\n      var _refreshOAuth2Token = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(refreshToken) {\n        var accessTokenResult;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this._requestMaker.clientId) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n\n              case 2:\n                _context7.next = 4;\n                return this.post('https://api.twitter.com/2/oauth2/token', {\n                  refresh_token: refreshToken,\n                  grant_type: 'refresh_token',\n                  client_id: this._requestMaker.clientId,\n                  client_secret: this._requestMaker.clientSecret\n                });\n\n              case 4:\n                accessTokenResult = _context7.sent;\n                return _context7.abrupt(\"return\", this.parseOAuth2AccessTokenResult(accessTokenResult));\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function refreshOAuth2Token(_x3) {\n        return _refreshOAuth2Token.apply(this, arguments);\n      }\n\n      return refreshOAuth2Token;\n    }()\n    /**\n     * Revoke a single user-based OAuth 2.0 token.\n     *\n     * You must specify its source, access token (directly after login)\n     * or refresh token (if you've called `.refreshOAuth2Token` before).\n     */\n\n  }, {\n    key: \"revokeOAuth2Token\",\n    value: function () {\n      var _revokeOAuth2Token = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(token) {\n        var tokenType,\n            _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                tokenType = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : 'access_token';\n\n                if (this._requestMaker.clientId) {\n                  _context8.next = 3;\n                  break;\n                }\n\n                throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n\n              case 3:\n                _context8.next = 5;\n                return this.post('https://api.twitter.com/2/oauth2/revoke', {\n                  client_id: this._requestMaker.clientId,\n                  client_secret: this._requestMaker.clientSecret,\n                  token: token,\n                  token_type_hint: tokenType\n                });\n\n              case 5:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function revokeOAuth2Token(_x4) {\n        return _revokeOAuth2Token.apply(this, arguments);\n      }\n\n      return revokeOAuth2Token;\n    }()\n  }, {\n    key: \"parseOAuth2AccessTokenResult\",\n    value: function parseOAuth2AccessTokenResult(result) {\n      var client = new _1.default(result.access_token, this._requestMaker.clientSettings);\n      var scope = result.scope.split(' ').filter(function (e) {\n        return e;\n      });\n      return {\n        client: client,\n        expiresIn: result.expires_in,\n        accessToken: result.access_token,\n        scope: scope,\n        refreshToken: result.refresh_token\n      };\n    }\n  }, {\n    key: \"v1\",\n\n    /* Direct access to subclients */\n    get: function get() {\n      if (this._v1) return this._v1;\n      return this._v1 = new client_v1_read_1.default(this);\n    }\n  }, {\n    key: \"v2\",\n    get: function get() {\n      if (this._v2) return this._v2;\n      return this._v2 = new client_v2_read_1.default(this);\n    }\n  }]);\n\n  return TwitterApiReadOnly;\n}(client_base_1.default);\n\nexports.default = TwitterApiReadOnly;","map":null,"metadata":{},"sourceType":"script"}