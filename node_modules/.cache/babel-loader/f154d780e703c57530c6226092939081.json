{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar _require = require(\"whatwg-url\"),\n    serializeURL = _require.serializeURL;\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/events\"),\n    fireAnEvent = _require3.fireAnEvent;\n\nvar _require4 = require(\"../helpers/form-controls\"),\n    formOwner = _require4.formOwner,\n    isListed = _require4.isListed,\n    isSubmittable = _require4.isSubmittable,\n    isSubmitButton = _require4.isSubmitButton;\n\nvar HTMLFormControlsCollection = require(\"../generated/HTMLFormControlsCollection\");\n\nvar notImplemented = require(\"../../browser/not-implemented\");\n\nvar _require5 = require(\"../helpers/document-base-url\"),\n    parseURLToResultingURLRecord = _require5.parseURLToResultingURLRecord;\n\nvar encTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nvar methods = new Set([\"get\", \"post\", \"dialog\"]);\nvar constraintValidationPositiveResult = Symbol(\"positive\");\nvar constraintValidationNegativeResult = Symbol(\"negative\");\n\nvar HTMLFormElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLFormElementImpl, _HTMLElementImpl);\n\n  function HTMLFormElementImpl() {\n    _classCallCheck(this, HTMLFormElementImpl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLFormElementImpl).apply(this, arguments));\n  }\n\n  _createClass(HTMLFormElementImpl, [{\n    key: \"_descendantAdded\",\n    value: function _descendantAdded(parent, child) {\n      var form = this;\n\n      var _iterator = _createForOfIteratorHelper(domSymbolTree.treeIterator(child)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var el = _step.value;\n\n          if (typeof el._changedFormOwner === \"function\") {\n            el._changedFormOwner(form);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      _get(_getPrototypeOf(HTMLFormElementImpl.prototype), \"_descendantAdded\", this).call(this, parent, child);\n    }\n  }, {\n    key: \"_descendantRemoved\",\n    value: function _descendantRemoved(parent, child) {\n      var _iterator2 = _createForOfIteratorHelper(domSymbolTree.treeIterator(child)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var el = _step2.value;\n\n          if (typeof el._changedFormOwner === \"function\") {\n            el._changedFormOwner(null);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      _get(_getPrototypeOf(HTMLFormElementImpl.prototype), \"_descendantRemoved\", this).call(this, parent, child);\n    }\n  }, {\n    key: \"_getElementNodes\",\n    value: function _getElementNodes() {\n      var _this = this;\n\n      return domSymbolTree.treeToArray(this.getRootNode({}), {\n        filter: function filter(node) {\n          if (!isListed(node) || node._localName === \"input\" && node.type === \"image\") {\n            return false;\n          }\n\n          return formOwner(node) === _this;\n        }\n      });\n    } // https://html.spec.whatwg.org/multipage/forms.html#dom-form-elements\n\n  }, {\n    key: \"_doRequestSubmit\",\n    value: function _doRequestSubmit(submitter) {\n      if (!this.isConnected) {\n        return;\n      }\n\n      this.requestSubmit(submitter);\n    }\n  }, {\n    key: \"submit\",\n    value: function submit() {\n      if (!fireAnEvent(\"submit\", this, undefined, {\n        bubbles: true,\n        cancelable: true\n      })) {\n        return;\n      }\n\n      notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n    }\n  }, {\n    key: \"requestSubmit\",\n    value: function requestSubmit() {\n      var submitter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n      if (submitter !== undefined) {\n        if (!isSubmitButton(submitter)) {\n          throw new TypeError(\"The specified element is not a submit button\");\n        }\n\n        if (submitter.form !== this) {\n          throw DOMException.create(this._globalObject, [\"The specified element is not owned by this form element\", \"NotFoundError\"]);\n        }\n      } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-submission-algorithm\n      // Step 6.3: if form doesn't have the 'novalidate' attribute, validate it and abort submission if form is invalid\n\n\n      if (!this.hasAttributeNS(null, \"novalidate\") && !this.reportValidity()) {\n        return;\n      }\n\n      if (!fireAnEvent(\"submit\", this, undefined, {\n        bubbles: true,\n        cancelable: true\n      })) {\n        return;\n      }\n\n      notImplemented(\"HTMLFormElement.prototype.requestSubmit\", this._ownerDocument._defaultView);\n    }\n  }, {\n    key: \"_doReset\",\n    value: function _doReset() {\n      if (!this.isConnected) {\n        return;\n      }\n\n      this.reset();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (!fireAnEvent(\"reset\", this, undefined, {\n        bubbles: true,\n        cancelable: true\n      })) {\n        return;\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.elements),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var el = _step3.value;\n\n          if (typeof el._formReset === \"function\") {\n            el._formReset();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"checkValidity\",\n    // If the checkValidity() method is invoked, the user agent must statically validate the\n    // constraints of the form element, and return true if the constraint validation returned\n    // a positive result, and false if it returned a negative result.\n    value: function checkValidity() {\n      return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n    } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n\n  }, {\n    key: \"reportValidity\",\n    value: function reportValidity() {\n      return this.checkValidity();\n    } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n\n  }, {\n    key: \"_staticallyValidateConstraints\",\n    value: function _staticallyValidateConstraints() {\n      var controls = [];\n\n      var _iterator4 = _createForOfIteratorHelper(this.elements),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var el = _step4.value;\n\n          if (el.form === this && isSubmittable(el)) {\n            controls.push(el);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var invalidControls = [];\n\n      for (var _i = 0, _controls = controls; _i < _controls.length; _i++) {\n        var control = _controls[_i];\n\n        if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n          invalidControls.push(control);\n        }\n      }\n\n      if (invalidControls.length === 0) {\n        return {\n          result: constraintValidationPositiveResult\n        };\n      }\n\n      var unhandledInvalidControls = [];\n\n      for (var _i2 = 0, _invalidControls = invalidControls; _i2 < _invalidControls.length; _i2++) {\n        var invalidControl = _invalidControls[_i2];\n        var notCancelled = fireAnEvent(\"invalid\", invalidControl, undefined, {\n          cancelable: true\n        });\n\n        if (notCancelled) {\n          unhandledInvalidControls.push(invalidControl);\n        }\n      }\n\n      return {\n        result: constraintValidationNegativeResult,\n        unhandledInvalidControls: unhandledInvalidControls\n      };\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      var _this2 = this;\n\n      return HTMLFormControlsCollection.createImpl(this._globalObject, [], {\n        element: this.getRootNode({}),\n        query: function query() {\n          return _this2._getElementNodes();\n        }\n      });\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.elements.length;\n    }\n  }, {\n    key: \"method\",\n    get: function get() {\n      var method = this.getAttributeNS(null, \"method\");\n\n      if (method) {\n        method = method.toLowerCase();\n      }\n\n      if (methods.has(method)) {\n        return method;\n      }\n\n      return \"get\";\n    },\n    set: function set(V) {\n      this.setAttributeNS(null, \"method\", V);\n    }\n  }, {\n    key: \"enctype\",\n    get: function get() {\n      var type = this.getAttributeNS(null, \"enctype\");\n\n      if (type) {\n        type = type.toLowerCase();\n      }\n\n      if (encTypes.has(type)) {\n        return type;\n      }\n\n      return \"application/x-www-form-urlencoded\";\n    },\n    set: function set(V) {\n      this.setAttributeNS(null, \"enctype\", V);\n    }\n  }, {\n    key: \"action\",\n    get: function get() {\n      var attributeValue = this.getAttributeNS(null, \"action\");\n\n      if (attributeValue === null || attributeValue === \"\") {\n        return this._ownerDocument.URL;\n      }\n\n      var urlRecord = parseURLToResultingURLRecord(attributeValue, this._ownerDocument);\n\n      if (urlRecord === null) {\n        return attributeValue;\n      }\n\n      return serializeURL(urlRecord);\n    },\n    set: function set(V) {\n      this.setAttributeNS(null, \"action\", V);\n    }\n  }]);\n\n  return HTMLFormElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}