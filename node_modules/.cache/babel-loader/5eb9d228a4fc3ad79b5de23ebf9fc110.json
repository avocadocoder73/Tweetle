{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar HTMLFormElement = require(\"./HTMLFormElement.js\");\n\nvar Blob = require(\"./Blob.js\");\n\nvar Function = require(\"./Function.js\");\n\nvar newObjectInRealm = utils.newObjectInRealm;\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\nvar interfaceName = \"FormData\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (globalObject, value) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new globalObject.TypeError(\"\".concat(context, \" is not of type 'FormData'.\"));\n};\n\nexports.createDefaultIterator = function (globalObject, target, kind) {\n  var ctorRegistry = globalObject[ctorRegistrySymbol];\n  var iteratorPrototype = ctorRegistry[\"FormData Iterator\"];\n  var iterator = Object.create(iteratorPrototype);\n  Object.defineProperty(iterator, utils.iterInternalSymbol, {\n    value: {\n      target: target,\n      kind: kind,\n      index: 0\n    },\n    configurable: true\n  });\n  return iterator;\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  var proto;\n\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"FormData\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject, newTarget) {\n  var wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = function (globalObject, globalNames) {\n  var _Object$definePropert;\n\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var ctorRegistry = utils.initCtorRegistry(globalObject);\n\n  var FormData = /*#__PURE__*/function () {\n    function FormData() {\n      _classCallCheck(this, FormData);\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          curArg = HTMLFormElement.convert(globalObject, curArg, {\n            context: \"Failed to construct 'FormData': parameter 1\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return exports.setup(Object.create((this instanceof FormData ? this.constructor : void 0).prototype), globalObject, args);\n    }\n\n    _createClass(FormData, [{\n      key: \"append\",\n      value: function append(name, value) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'append' called on an object that is not a valid instance of FormData.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new globalObject.TypeError(\"Failed to execute 'append' on 'FormData': 2 arguments required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n\n        switch (arguments.length) {\n          case 2:\n            {\n              var curArg = arguments[0];\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'append' on 'FormData': parameter 1\",\n                globals: globalObject\n              });\n              args.push(curArg);\n            }\n            {\n              var _curArg = arguments[1];\n\n              if (Blob.is(_curArg)) {\n                {\n                  var _curArg2 = arguments[1];\n                  _curArg2 = Blob.convert(globalObject, _curArg2, {\n                    context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n                  });\n                  args.push(_curArg2);\n                }\n              } else {\n                {\n                  var _curArg3 = arguments[1];\n                  _curArg3 = conversions[\"USVString\"](_curArg3, {\n                    context: \"Failed to execute 'append' on 'FormData': parameter 2\",\n                    globals: globalObject\n                  });\n                  args.push(_curArg3);\n                }\n              }\n            }\n            break;\n\n          default:\n            {\n              var _curArg4 = arguments[0];\n              _curArg4 = conversions[\"USVString\"](_curArg4, {\n                context: \"Failed to execute 'append' on 'FormData': parameter 1\",\n                globals: globalObject\n              });\n              args.push(_curArg4);\n            }\n            {\n              var _curArg5 = arguments[1];\n              _curArg5 = Blob.convert(globalObject, _curArg5, {\n                context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n              });\n              args.push(_curArg5);\n            }\n            {\n              var _curArg6 = arguments[2];\n\n              if (_curArg6 !== undefined) {\n                _curArg6 = conversions[\"USVString\"](_curArg6, {\n                  context: \"Failed to execute 'append' on 'FormData': parameter 3\",\n                  globals: globalObject\n                });\n              }\n\n              args.push(_curArg6);\n            }\n        }\n\n        return (_esValue$implSymbol = esValue[implSymbol]).append.apply(_esValue$implSymbol, args);\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(name) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'delete' called on an object that is not a valid instance of FormData.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'delete' on 'FormData': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'delete' on 'FormData': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol2 = esValue[implSymbol]).delete.apply(_esValue$implSymbol2, args);\n      }\n    }, {\n      key: \"get\",\n      value: function get(name) {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of FormData.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'get' on 'FormData': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'get' on 'FormData': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol3 = esValue[implSymbol]).get.apply(_esValue$implSymbol3, args));\n      }\n    }, {\n      key: \"getAll\",\n      value: function getAll(name) {\n        var _esValue$implSymbol4;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'getAll' called on an object that is not a valid instance of FormData.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'getAll' on 'FormData': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'getAll' on 'FormData': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol4 = esValue[implSymbol]).getAll.apply(_esValue$implSymbol4, args));\n      }\n    }, {\n      key: \"has\",\n      value: function has(name) {\n        var _esValue$implSymbol5;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of FormData.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'has' on 'FormData': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'has' on 'FormData': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol5 = esValue[implSymbol]).has.apply(_esValue$implSymbol5, args);\n      }\n    }, {\n      key: \"set\",\n      value: function set(name, value) {\n        var _esValue$implSymbol6;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of FormData.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new globalObject.TypeError(\"Failed to execute 'set' on 'FormData': 2 arguments required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n\n        switch (arguments.length) {\n          case 2:\n            {\n              var curArg = arguments[0];\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'set' on 'FormData': parameter 1\",\n                globals: globalObject\n              });\n              args.push(curArg);\n            }\n            {\n              var _curArg7 = arguments[1];\n\n              if (Blob.is(_curArg7)) {\n                {\n                  var _curArg8 = arguments[1];\n                  _curArg8 = Blob.convert(globalObject, _curArg8, {\n                    context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n                  });\n                  args.push(_curArg8);\n                }\n              } else {\n                {\n                  var _curArg9 = arguments[1];\n                  _curArg9 = conversions[\"USVString\"](_curArg9, {\n                    context: \"Failed to execute 'set' on 'FormData': parameter 2\",\n                    globals: globalObject\n                  });\n                  args.push(_curArg9);\n                }\n              }\n            }\n            break;\n\n          default:\n            {\n              var _curArg10 = arguments[0];\n              _curArg10 = conversions[\"USVString\"](_curArg10, {\n                context: \"Failed to execute 'set' on 'FormData': parameter 1\",\n                globals: globalObject\n              });\n              args.push(_curArg10);\n            }\n            {\n              var _curArg11 = arguments[1];\n              _curArg11 = Blob.convert(globalObject, _curArg11, {\n                context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n              });\n              args.push(_curArg11);\n            }\n            {\n              var _curArg12 = arguments[2];\n\n              if (_curArg12 !== undefined) {\n                _curArg12 = conversions[\"USVString\"](_curArg12, {\n                  context: \"Failed to execute 'set' on 'FormData': parameter 3\",\n                  globals: globalObject\n                });\n              }\n\n              args.push(_curArg12);\n            }\n        }\n\n        return (_esValue$implSymbol6 = esValue[implSymbol]).set.apply(_esValue$implSymbol6, args);\n      }\n    }, {\n      key: \"keys\",\n      value: function keys() {\n        if (!exports.is(this)) {\n          throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of FormData.\");\n        }\n\n        return exports.createDefaultIterator(globalObject, this, \"key\");\n      }\n    }, {\n      key: \"values\",\n      value: function values() {\n        if (!exports.is(this)) {\n          throw new globalObject.TypeError(\"'values' called on an object that is not a valid instance of FormData.\");\n        }\n\n        return exports.createDefaultIterator(globalObject, this, \"value\");\n      }\n    }, {\n      key: \"entries\",\n      value: function entries() {\n        if (!exports.is(this)) {\n          throw new globalObject.TypeError(\"'entries' called on an object that is not a valid instance of FormData.\");\n        }\n\n        return exports.createDefaultIterator(globalObject, this, \"key+value\");\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        if (!exports.is(this)) {\n          throw new globalObject.TypeError(\"'forEach' called on an object that is not a valid instance of FormData.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\");\n        }\n\n        callback = Function.convert(globalObject, callback, {\n          context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n        });\n        var thisArg = arguments[1];\n        var pairs = Array.from(this[implSymbol]);\n        var i = 0;\n\n        while (i < pairs.length) {\n          var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),\n              _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),\n              key = _pairs$i$map2[0],\n              value = _pairs$i$map2[1];\n\n          callback.call(thisArg, value, key, this);\n          pairs = Array.from(this[implSymbol]);\n          i++;\n        }\n      }\n    }]);\n\n    return FormData;\n  }();\n\n  Object.defineProperties(FormData.prototype, (_Object$definePropert = {\n    append: {\n      enumerable: true\n    },\n    delete: {\n      enumerable: true\n    },\n    get: {\n      enumerable: true\n    },\n    getAll: {\n      enumerable: true\n    },\n    has: {\n      enumerable: true\n    },\n    set: {\n      enumerable: true\n    },\n    keys: {\n      enumerable: true\n    },\n    values: {\n      enumerable: true\n    },\n    entries: {\n      enumerable: true\n    },\n    forEach: {\n      enumerable: true\n    }\n  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n    value: \"FormData\",\n    configurable: true\n  }), _defineProperty(_Object$definePropert, Symbol.iterator, {\n    value: FormData.prototype.entries,\n    configurable: true,\n    writable: true\n  }), _Object$definePropert));\n  ctorRegistry[interfaceName] = FormData;\n  ctorRegistry[\"FormData Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], _defineProperty({}, Symbol.toStringTag, {\n    configurable: true,\n    value: \"FormData Iterator\"\n  }));\n  utils.define(ctorRegistry[\"FormData Iterator\"], {\n    next: function next() {\n      var internal = this && this[utils.iterInternalSymbol];\n\n      if (!internal) {\n        throw new globalObject.TypeError(\"next() called on a value that is not a FormData iterator object\");\n      }\n\n      var target = internal.target,\n          kind = internal.kind,\n          index = internal.index;\n      var values = Array.from(target[implSymbol]);\n      var len = values.length;\n\n      if (index >= len) {\n        return newObjectInRealm(globalObject, {\n          value: undefined,\n          done: true\n        });\n      }\n\n      var pair = values[index];\n      internal.index = index + 1;\n      return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n    }\n  });\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: FormData\n  });\n};\n\nvar Impl = require(\"../xhr/FormData-impl.js\");","map":null,"metadata":{},"sourceType":"script"}