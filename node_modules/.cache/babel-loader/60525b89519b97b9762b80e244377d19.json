{"ast":null,"code":"\"use strict\";\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncGeneratorDelegate = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncGeneratorDelegate\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PreviousableTwitterPaginator = exports.TwitterPaginator = void 0;\n/** TwitterPaginator: able to get consume data from initial request, then fetch next data sequentially. */\n\nvar TwitterPaginator = /*#__PURE__*/function () {\n  // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\n  function TwitterPaginator(_ref) {\n    var realData = _ref.realData,\n        rateLimit = _ref.rateLimit,\n        instance = _ref.instance,\n        queryParams = _ref.queryParams,\n        sharedParams = _ref.sharedParams;\n\n    _classCallCheck(this, TwitterPaginator);\n\n    this._maxResultsWhenFetchLast = 100;\n    this._realData = realData;\n    this._rateLimit = rateLimit;\n    this._instance = instance;\n    this._queryParams = queryParams;\n    this._sharedParams = sharedParams;\n  }\n\n  _createClass(TwitterPaginator, [{\n    key: \"makeRequest\",\n    value: function makeRequest(queryParams) {\n      return this._instance.get(this.getEndpoint(), queryParams, {\n        fullResponse: true,\n        params: this._sharedParams\n      });\n    }\n  }, {\n    key: \"makeNewInstanceFromResult\",\n    value: function makeNewInstanceFromResult(result, queryParams) {\n      // Construct a subclass\n      return new this.constructor({\n        realData: result.data,\n        rateLimit: result.rateLimit,\n        instance: this._instance,\n        queryParams: queryParams,\n        sharedParams: this._sharedParams\n      });\n    }\n  }, {\n    key: \"getEndpoint\",\n    value: function getEndpoint() {\n      return this._endpoint;\n    }\n  }, {\n    key: \"injectQueryParams\",\n    value: function injectQueryParams(maxResults) {\n      return _objectSpread({}, maxResults ? {\n        max_results: maxResults\n      } : {}, this._queryParams);\n    }\n    /* ---------------------- */\n\n    /* Real paginator methods */\n\n    /* ---------------------- */\n\n    /**\n     * Next page.\n     */\n\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(maxResults) {\n        var queryParams, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                queryParams = this.getNextQueryParams(maxResults);\n                _context.next = 3;\n                return this.makeRequest(queryParams);\n\n              case 3:\n                result = _context.sent;\n                return _context.abrupt(\"return\", this.makeNewInstanceFromResult(result, queryParams));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function next(_x) {\n        return _next.apply(this, arguments);\n      }\n\n      return next;\n    }()\n    /**\n     * Next page, but store it in current instance.\n     */\n\n  }, {\n    key: \"fetchNext\",\n    value: function () {\n      var _fetchNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(maxResults) {\n        var queryParams, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                queryParams = this.getNextQueryParams(maxResults);\n                _context2.next = 3;\n                return this.makeRequest(queryParams);\n\n              case 3:\n                result = _context2.sent;\n                _context2.next = 6;\n                return this.refreshInstanceFromResult(result, true);\n\n              case 6:\n                return _context2.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetchNext(_x2) {\n        return _fetchNext.apply(this, arguments);\n      }\n\n      return fetchNext;\n    }()\n    /**\n     * Fetch up to {count} items after current page,\n     * as long as rate limit is not hit and Twitter has some results\n     */\n\n  }, {\n    key: \"fetchLast\",\n    value: function () {\n      var _fetchLast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var count,\n            queryParams,\n            resultCount,\n            response,\n            _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                count = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : Infinity;\n                queryParams = this.getNextQueryParams(this._maxResultsWhenFetchLast);\n                resultCount = 0; // Break at rate limit limit\n\n              case 3:\n                if (!(resultCount < count && this._isRateLimitOk)) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.makeRequest(queryParams);\n\n              case 6:\n                response = _context3.sent;\n                _context3.next = 9;\n                return this.refreshInstanceFromResult(response, true);\n\n              case 9:\n                resultCount += this.getPageLengthFromRequest(response);\n\n                if (!this.isFetchLastOver(response)) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                return _context3.abrupt(\"break\", 15);\n\n              case 12:\n                queryParams = this.getNextQueryParams(this._maxResultsWhenFetchLast);\n                _context3.next = 3;\n                break;\n\n              case 15:\n                return _context3.abrupt(\"return\", this);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetchLast() {\n        return _fetchLast.apply(this, arguments);\n      }\n\n      return fetchLast;\n    }()\n  }, {\n    key: Symbol.iterator,\n\n    /**\n     * Iterate over currently fetched items.\n     */\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.delegateYield(this.getItemArray(), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, value, this);\n    })\n    /**\n     * Iterate over items \"undefinitely\" (until rate limit is hit / they're no more items available)\n     * This will **mutate the current instance** and fill data, metas, etc. inside this instance.\n     *\n     * If you need to handle concurrent requests, or you need to rely on immutability, please use `.fetchAndIterate()` instead.\n     */\n\n  }, {\n    key: Symbol.asyncIterator,\n    value: function value() {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var paginator, canFetchNextPage, next, items;\n        return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this.getItemArray()), _awaitAsyncGenerator), \"t0\", 1);\n\n              case 1:\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                paginator = _this;\n                canFetchNextPage = _this.canFetchNextPage(_this._realData);\n\n              case 3:\n                if (!(canFetchNextPage && _this._isRateLimitOk && paginator.getItemArray().length > 0)) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                _context5.next = 6;\n                return _awaitAsyncGenerator(paginator.next(_this._maxResultsWhenFetchLast));\n\n              case 6:\n                next = _context5.sent;\n\n                // Store data into current instance [needed to access includes and meta]\n                _this.refreshInstanceFromResult({\n                  data: next._realData,\n                  headers: {},\n                  rateLimit: next._rateLimit\n                }, true);\n\n                canFetchNextPage = _this.canFetchNextPage(next._realData);\n                items = next.getItemArray();\n                return _context5.delegateYield(_asyncGeneratorDelegate(_asyncIterator(items), _awaitAsyncGenerator), \"t1\", 11);\n\n              case 11:\n                paginator = next;\n                _context5.next = 3;\n                break;\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    }\n    /**\n     * Iterate over items \"undefinitely\" without modifying the current instance (until rate limit is hit / they're no more items available)\n     *\n     * This will **NOT** mutate the current instance, meaning that current instance will not inherit from `includes` and `meta` (v2 API only).\n     * Use `Symbol.asyncIterator` (`for-await of`) to directly access items with current instance mutation.\n     */\n\n  }, {\n    key: \"fetchAndIterate\",\n    value: function fetchAndIterate() {\n      var _this2 = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _iterator, _step, _item, paginator, canFetchNextPage, next, _iterator2, _step2, item;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(_this2.getItemArray());\n                _context6.prev = 1;\n\n                _iterator.s();\n\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                _item = _step.value;\n                _context6.next = 7;\n                return [_item, _this2];\n\n              case 7:\n                _context6.next = 3;\n                break;\n\n              case 9:\n                _context6.next = 14;\n                break;\n\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](1);\n\n                _iterator.e(_context6.t0);\n\n              case 14:\n                _context6.prev = 14;\n\n                _iterator.f();\n\n                return _context6.finish(14);\n\n              case 17:\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                paginator = _this2;\n                canFetchNextPage = _this2.canFetchNextPage(_this2._realData);\n\n              case 19:\n                if (!(canFetchNextPage && _this2._isRateLimitOk && paginator.getItemArray().length > 0)) {\n                  _context6.next = 46;\n                  break;\n                }\n\n                _context6.next = 22;\n                return _awaitAsyncGenerator(paginator.next(_this2._maxResultsWhenFetchLast));\n\n              case 22:\n                next = _context6.sent;\n\n                // Store data into current instance [needed to access includes and meta]\n                _this2.refreshInstanceFromResult({\n                  data: next._realData,\n                  headers: {},\n                  rateLimit: next._rateLimit\n                }, true);\n\n                canFetchNextPage = _this2.canFetchNextPage(next._realData);\n                _iterator2 = _createForOfIteratorHelper(next.getItemArray());\n                _context6.prev = 26;\n\n                _iterator2.s();\n\n              case 28:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context6.next = 34;\n                  break;\n                }\n\n                item = _step2.value;\n                _context6.next = 32;\n                return [item, next];\n\n              case 32:\n                _context6.next = 28;\n                break;\n\n              case 34:\n                _context6.next = 39;\n                break;\n\n              case 36:\n                _context6.prev = 36;\n                _context6.t1 = _context6[\"catch\"](26);\n\n                _iterator2.e(_context6.t1);\n\n              case 39:\n                _context6.prev = 39;\n\n                _iterator2.f();\n\n                return _context6.finish(39);\n\n              case 42:\n                _this2._rateLimit = next._rateLimit;\n                paginator = next;\n                _context6.next = 19;\n                break;\n\n              case 46:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee5, null, [[1, 11, 14, 17], [26, 36, 39, 42]]);\n      }))();\n    }\n  }, {\n    key: \"_isRateLimitOk\",\n    get: function get() {\n      var resetDate = this._rateLimit.reset * 1000;\n\n      if (resetDate < Date.now()) {\n        return true;\n      }\n\n      return this._rateLimit.remaining > 0;\n    }\n  }, {\n    key: \"rateLimit\",\n    get: function get() {\n      return _objectSpread({}, this._rateLimit);\n    }\n    /** Get raw data returned by Twitter API. */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._realData;\n    }\n  }, {\n    key: \"done\",\n    get: function get() {\n      return !this.canFetchNextPage(this._realData);\n    }\n  }]);\n\n  return TwitterPaginator;\n}();\n\nexports.TwitterPaginator = TwitterPaginator;\n/** PreviousableTwitterPaginator: a TwitterPaginator able to get consume data from both side, next and previous. */\n\nvar PreviousableTwitterPaginator = /*#__PURE__*/function (_TwitterPaginator) {\n  _inherits(PreviousableTwitterPaginator, _TwitterPaginator);\n\n  function PreviousableTwitterPaginator() {\n    _classCallCheck(this, PreviousableTwitterPaginator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PreviousableTwitterPaginator).apply(this, arguments));\n  }\n\n  _createClass(PreviousableTwitterPaginator, [{\n    key: \"previous\",\n\n    /**\n     * Previous page (new tweets)\n     */\n    value: function () {\n      var _previous = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(maxResults) {\n        var queryParams, result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                queryParams = this.getPreviousQueryParams(maxResults);\n                _context7.next = 3;\n                return this.makeRequest(queryParams);\n\n              case 3:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", this.makeNewInstanceFromResult(result, queryParams));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function previous(_x3) {\n        return _previous.apply(this, arguments);\n      }\n\n      return previous;\n    }()\n    /**\n     * Previous page, but in current instance.\n     */\n\n  }, {\n    key: \"fetchPrevious\",\n    value: function () {\n      var _fetchPrevious = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(maxResults) {\n        var queryParams, result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                queryParams = this.getPreviousQueryParams(maxResults);\n                _context8.next = 3;\n                return this.makeRequest(queryParams);\n\n              case 3:\n                result = _context8.sent;\n                _context8.next = 6;\n                return this.refreshInstanceFromResult(result, false);\n\n              case 6:\n                return _context8.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function fetchPrevious(_x4) {\n        return _fetchPrevious.apply(this, arguments);\n      }\n\n      return fetchPrevious;\n    }()\n  }]);\n\n  return PreviousableTwitterPaginator;\n}(TwitterPaginator);\n\nexports.PreviousableTwitterPaginator = PreviousableTwitterPaginator;\nexports.default = TwitterPaginator;","map":null,"metadata":{},"sourceType":"script"}