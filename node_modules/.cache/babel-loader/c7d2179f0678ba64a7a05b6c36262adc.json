{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar EventModifierInit = require(\"./EventModifierInit.js\");\n\nexports._convertInherit = function (globalObject, obj, ret) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  EventModifierInit._convertInherit(globalObject, obj, ret, {\n    context: context\n  });\n\n  {\n    var key = \"changedTouches\";\n    var value = obj === undefined || obj === null ? undefined : obj[key];\n\n    if (value !== undefined) {\n      if (!utils.isObject(value)) {\n        throw new globalObject.TypeError(context + \" has member 'changedTouches' that\" + \" is not an iterable object.\");\n      } else {\n        var V = [];\n        var tmp = value;\n\n        var _iterator = _createForOfIteratorHelper(tmp),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var nextItem = _step.value;\n            nextItem = utils.tryImplForWrapper(nextItem);\n            V.push(nextItem);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        value = V;\n      }\n\n      ret[key] = value;\n    } else {\n      ret[key] = [];\n    }\n  }\n  {\n    var _key = \"targetTouches\";\n\n    var _value = obj === undefined || obj === null ? undefined : obj[_key];\n\n    if (_value !== undefined) {\n      if (!utils.isObject(_value)) {\n        throw new globalObject.TypeError(context + \" has member 'targetTouches' that\" + \" is not an iterable object.\");\n      } else {\n        var _V = [];\n        var _tmp = _value;\n\n        var _iterator2 = _createForOfIteratorHelper(_tmp),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _nextItem = _step2.value;\n            _nextItem = utils.tryImplForWrapper(_nextItem);\n\n            _V.push(_nextItem);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        _value = _V;\n      }\n\n      ret[_key] = _value;\n    } else {\n      ret[_key] = [];\n    }\n  }\n  {\n    var _key2 = \"touches\";\n\n    var _value2 = obj === undefined || obj === null ? undefined : obj[_key2];\n\n    if (_value2 !== undefined) {\n      if (!utils.isObject(_value2)) {\n        throw new globalObject.TypeError(context + \" has member 'touches' that\" + \" is not an iterable object.\");\n      } else {\n        var _V2 = [];\n        var _tmp2 = _value2;\n\n        var _iterator3 = _createForOfIteratorHelper(_tmp2),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _nextItem2 = _step3.value;\n            _nextItem2 = utils.tryImplForWrapper(_nextItem2);\n\n            _V2.push(_nextItem2);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        _value2 = _V2;\n      }\n\n      ret[_key2] = _value2;\n    } else {\n      ret[_key2] = [];\n    }\n  }\n};\n\nexports.convert = function (globalObject, obj) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$context = _ref2.context,\n      context = _ref2$context === void 0 ? \"The provided value\" : _ref2$context;\n\n  if (obj !== undefined && typeof obj !== \"object\" && typeof obj !== \"function\") {\n    throw new globalObject.TypeError(\"\".concat(context, \" is not an object.\"));\n  }\n\n  var ret = Object.create(null);\n\n  exports._convertInherit(globalObject, obj, ret, {\n    context: context\n  });\n\n  return ret;\n};","map":null,"metadata":{},"sourceType":"script"}