{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientRequestMaker = void 0;\n\nvar types_1 = require(\"../types\");\n\nvar TweetStream_1 = __importDefault(require(\"../stream/TweetStream\"));\n\nvar helpers_1 = require(\"../plugins/helpers\");\n\nvar helpers_2 = require(\"../helpers\");\n\nvar oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\n\nvar request_handler_helper_1 = __importDefault(require(\"./request-handler.helper\"));\n\nvar request_param_helper_1 = __importDefault(require(\"./request-param.helper\"));\n\nvar oauth2_helper_1 = require(\"./oauth2.helper\");\n\nvar ClientRequestMaker = /*#__PURE__*/function () {\n  function ClientRequestMaker(settings) {\n    _classCallCheck(this, ClientRequestMaker);\n\n    this.rateLimits = {};\n    this.clientSettings = {};\n\n    if (settings) {\n      this.clientSettings = settings;\n    }\n  }\n  /** @deprecated - Switch to `@twitter-api-v2/plugin-rate-limit` */\n\n\n  _createClass(ClientRequestMaker, [{\n    key: \"getRateLimits\",\n    value: function getRateLimits() {\n      return this.rateLimits;\n    }\n  }, {\n    key: \"saveRateLimit\",\n    value: function saveRateLimit(originalUrl, rateLimit) {\n      this.rateLimits[originalUrl] = rateLimit;\n    }\n    /** Send a new request and returns a wrapped `Promise<TwitterResponse<T>`. */\n\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(requestParams) {\n        var _a, _b, _c, _d, _e, possibleResponse, args, options, enableRateLimitSave, request, response, responseOverride;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!((_a = this.clientSettings.plugins) === null || _a === void 0 ? void 0 : _a.length)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.applyPreRequestConfigHooks(requestParams);\n\n              case 3:\n                possibleResponse = _context.sent;\n\n                if (!possibleResponse) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", possibleResponse);\n\n              case 6:\n                args = this.getHttpRequestArgs(requestParams);\n                options = {\n                  method: args.method,\n                  headers: args.headers,\n                  timeout: requestParams.timeout,\n                  agent: this.clientSettings.httpAgent\n                };\n                enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n\n                if (args.body) {\n                  request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n                } // Pre-request hooks\n\n\n                if (!((_b = this.clientSettings.plugins) === null || _b === void 0 ? void 0 : _b.length)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 13;\n                return this.applyPreRequestHooks(requestParams, args, options);\n\n              case 13:\n                request = new request_handler_helper_1.default({\n                  url: args.url,\n                  options: options,\n                  body: args.body,\n                  rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined,\n                  requestEventDebugHandler: requestParams.requestEventDebugHandler,\n                  compression: (_d = (_c = requestParams.compression) !== null && _c !== void 0 ? _c : this.clientSettings.compression) !== null && _d !== void 0 ? _d : true,\n                  forceParseMode: requestParams.forceParseMode\n                }).makeRequest();\n\n                if ((0, helpers_1.hasRequestErrorPlugins)(this)) {\n                  request = this.applyResponseErrorHooks(requestParams, args, options, request);\n                }\n\n                _context.next = 17;\n                return request;\n\n              case 17:\n                response = _context.sent;\n\n                if (!((_e = this.clientSettings.plugins) === null || _e === void 0 ? void 0 : _e.length)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.next = 21;\n                return this.applyPostRequestHooks(requestParams, args, options, response);\n\n              case 21:\n                responseOverride = _context.sent;\n\n                if (!responseOverride) {\n                  _context.next = 24;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", responseOverride.value);\n\n              case 24:\n                return _context.abrupt(\"return\", response);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }, {\n    key: \"sendStream\",\n    value: function sendStream(requestParams) {\n      var _a, _b; // Pre-request hooks\n\n\n      if (this.clientSettings.plugins) {\n        this.applyPreStreamRequestConfigHooks(requestParams);\n      }\n\n      var args = this.getHttpRequestArgs(requestParams);\n      var options = {\n        method: args.method,\n        headers: args.headers,\n        agent: this.clientSettings.httpAgent\n      };\n      var enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n      var enableAutoConnect = requestParams.autoConnect !== false;\n\n      if (args.body) {\n        request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n      }\n\n      var requestData = {\n        url: args.url,\n        options: options,\n        body: args.body,\n        rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined,\n        payloadIsError: requestParams.payloadIsError,\n        compression: (_b = (_a = requestParams.compression) !== null && _a !== void 0 ? _a : this.clientSettings.compression) !== null && _b !== void 0 ? _b : true\n      };\n      var stream = new TweetStream_1.default(requestData);\n\n      if (!enableAutoConnect) {\n        return stream;\n      }\n\n      return stream.connect();\n    }\n    /* Token helpers */\n\n  }, {\n    key: \"initializeToken\",\n    value: function initializeToken(token) {\n      if (typeof token === 'string') {\n        this.bearerToken = token;\n      } else if (typeof token === 'object' && 'appKey' in token) {\n        this.consumerToken = token.appKey;\n        this.consumerSecret = token.appSecret;\n\n        if (token.accessToken && token.accessSecret) {\n          this.accessToken = token.accessToken;\n          this.accessSecret = token.accessSecret;\n        }\n\n        this._oauth = this.buildOAuth();\n      } else if (typeof token === 'object' && 'username' in token) {\n        var key = encodeURIComponent(token.username) + ':' + encodeURIComponent(token.password);\n        this.basicToken = Buffer.from(key).toString('base64');\n      } else if (typeof token === 'object' && 'clientId' in token) {\n        this.clientId = token.clientId;\n        this.clientSecret = token.clientSecret;\n      }\n    }\n  }, {\n    key: \"getActiveTokens\",\n    value: function getActiveTokens() {\n      if (this.bearerToken) {\n        return {\n          type: 'oauth2',\n          bearerToken: this.bearerToken\n        };\n      } else if (this.basicToken) {\n        return {\n          type: 'basic',\n          token: this.basicToken\n        };\n      } else if (this.consumerSecret && this._oauth) {\n        return {\n          type: 'oauth-1.0a',\n          appKey: this.consumerToken,\n          appSecret: this.consumerSecret,\n          accessToken: this.accessToken,\n          accessSecret: this.accessSecret\n        };\n      } else if (this.clientId) {\n        return {\n          type: 'oauth2-user',\n          clientId: this.clientId\n        };\n      }\n\n      return {\n        type: 'none'\n      };\n    }\n  }, {\n    key: \"buildOAuth\",\n    value: function buildOAuth() {\n      if (!this.consumerSecret || !this.consumerToken) throw new Error('Invalid consumer tokens');\n      return new oauth1_helper_1.default({\n        consumerKeys: {\n          key: this.consumerToken,\n          secret: this.consumerSecret\n        }\n      });\n    }\n  }, {\n    key: \"getOAuthAccessTokens\",\n    value: function getOAuthAccessTokens() {\n      if (!this.accessSecret || !this.accessToken) return;\n      return {\n        key: this.accessToken,\n        secret: this.accessSecret\n      };\n    }\n    /* Plugin helpers */\n\n  }, {\n    key: \"getPlugins\",\n    value: function getPlugins() {\n      var _a;\n\n      return (_a = this.clientSettings.plugins) !== null && _a !== void 0 ? _a : [];\n    }\n  }, {\n    key: \"hasPlugins\",\n    value: function hasPlugins() {\n      var _a;\n\n      return !!((_a = this.clientSettings.plugins) === null || _a === void 0 ? void 0 : _a.length);\n    }\n  }, {\n    key: \"applyPluginMethod\",\n    value: function () {\n      var _applyPluginMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(method, args) {\n        var _a, returnValue, _iterator, _step, plugin, value;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(this.getPlugins());\n                _context2.prev = 1;\n\n                _iterator.s();\n\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                plugin = _step.value;\n                _context2.next = 7;\n                return (_a = plugin[method]) === null || _a === void 0 ? void 0 : _a.call(plugin, args);\n\n              case 7:\n                value = _context2.sent;\n\n                if (value && value instanceof types_1.TwitterApiPluginResponseOverride) {\n                  returnValue = value;\n                }\n\n              case 9:\n                _context2.next = 3;\n                break;\n\n              case 11:\n                _context2.next = 16;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                _iterator.e(_context2.t0);\n\n              case 16:\n                _context2.prev = 16;\n\n                _iterator.f();\n\n                return _context2.finish(16);\n\n              case 19:\n                return _context2.abrupt(\"return\", returnValue);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 13, 16, 19]]);\n      }));\n\n      function applyPluginMethod(_x2, _x3) {\n        return _applyPluginMethod.apply(this, arguments);\n      }\n\n      return applyPluginMethod;\n    }()\n    /* Request helpers */\n\n  }, {\n    key: \"writeAuthHeaders\",\n    value: function writeAuthHeaders(_ref) {\n      var headers = _ref.headers,\n          bodyInSignature = _ref.bodyInSignature,\n          url = _ref.url,\n          method = _ref.method,\n          query = _ref.query,\n          body = _ref.body;\n      headers = _objectSpread({}, headers);\n\n      if (this.bearerToken) {\n        headers.Authorization = 'Bearer ' + this.bearerToken;\n      } else if (this.basicToken) {\n        // Basic auth, to request a bearer token\n        headers.Authorization = 'Basic ' + this.basicToken;\n      } else if (this.clientId && this.clientSecret) {\n        // Basic auth with clientId + clientSecret\n        headers.Authorization = 'Basic ' + oauth2_helper_1.OAuth2Helper.getAuthHeader(this.clientId, this.clientSecret);\n      } else if (this.consumerSecret && this._oauth) {\n        // Merge query and body\n        var data = bodyInSignature ? request_param_helper_1.default.mergeQueryAndBodyForOAuth(query, body) : query;\n\n        var auth = this._oauth.authorize({\n          url: url.toString(),\n          method: method,\n          data: data\n        }, this.getOAuthAccessTokens());\n\n        headers = _objectSpread({}, headers, this._oauth.toHeader(auth));\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"getUrlObjectFromUrlString\",\n    value: function getUrlObjectFromUrlString(url) {\n      // Add protocol to URL if needed\n      if (!url.startsWith('http')) {\n        url = 'https://' + url;\n      } // Convert URL to object that will receive all URL modifications\n\n\n      return new URL(url);\n    }\n  }, {\n    key: \"getHttpRequestArgs\",\n    value: function getHttpRequestArgs(_ref2) {\n      var stringUrl = _ref2.url,\n          method = _ref2.method,\n          _ref2$query = _ref2.query,\n          rawQuery = _ref2$query === void 0 ? {} : _ref2$query,\n          _ref2$body = _ref2.body,\n          rawBody = _ref2$body === void 0 ? {} : _ref2$body,\n          headers = _ref2.headers,\n          forceBodyMode = _ref2.forceBodyMode,\n          enableAuth = _ref2.enableAuth,\n          params = _ref2.params;\n      var body = undefined;\n      method = method.toUpperCase();\n      headers = headers !== null && headers !== void 0 ? headers : {}; // Add user agent header (Twitter recommends it)\n\n      if (!headers['x-user-agent']) {\n        headers['x-user-agent'] = 'Node.twitter-api-v2';\n      }\n\n      var url = this.getUrlObjectFromUrlString(stringUrl); // URL without query string to save as endpoint name\n\n      var rawUrl = url.origin + url.pathname; // Apply URL parameters\n\n      if (params) {\n        request_param_helper_1.default.applyRequestParametersToUrl(url, params);\n      } // Build a URL without anything in QS, and QSP in query\n\n\n      var query = request_param_helper_1.default.formatQueryToString(rawQuery);\n      request_param_helper_1.default.moveUrlQueryParamsIntoObject(url, query); // Delete undefined parameters\n\n      if (!(rawBody instanceof Buffer)) {\n        (0, helpers_2.trimUndefinedProperties)(rawBody);\n      } // OAuth signature should not include parameters when using multipart.\n\n\n      var bodyType = forceBodyMode !== null && forceBodyMode !== void 0 ? forceBodyMode : request_param_helper_1.default.autoDetectBodyType(url); // If undefined or true, enable auth by headers\n\n      if (enableAuth !== false) {\n        // OAuth needs body signature only if body is URL encoded.\n        var bodyInSignature = ClientRequestMaker.BODY_METHODS.has(method) && bodyType === 'url';\n        headers = this.writeAuthHeaders({\n          headers: headers,\n          bodyInSignature: bodyInSignature,\n          method: method,\n          query: query,\n          url: url,\n          body: rawBody\n        });\n      }\n\n      if (ClientRequestMaker.BODY_METHODS.has(method)) {\n        body = request_param_helper_1.default.constructBodyParams(rawBody, headers, bodyType) || undefined;\n      }\n\n      request_param_helper_1.default.addQueryParamsToUrl(url, query);\n      return {\n        rawUrl: rawUrl,\n        url: url,\n        method: method,\n        headers: headers,\n        body: body\n      };\n    }\n    /* Plugin helpers */\n\n  }, {\n    key: \"applyPreRequestConfigHooks\",\n    value: function () {\n      var _applyPreRequestConfigHooks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(requestParams) {\n        var _a, url, _iterator2, _step2, plugin, result;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                url = this.getUrlObjectFromUrlString(requestParams.url);\n                _iterator2 = _createForOfIteratorHelper(this.getPlugins());\n                _context3.prev = 2;\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                plugin = _step2.value;\n                _context3.next = 8;\n                return (_a = plugin.onBeforeRequestConfig) === null || _a === void 0 ? void 0 : _a.call(plugin, {\n                  client: this,\n                  url: url,\n                  params: requestParams\n                });\n\n              case 8:\n                result = _context3.sent;\n\n                if (!result) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", result);\n\n              case 11:\n                _context3.next = 4;\n                break;\n\n              case 13:\n                _context3.next = 18;\n                break;\n\n              case 15:\n                _context3.prev = 15;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                _iterator2.e(_context3.t0);\n\n              case 18:\n                _context3.prev = 18;\n\n                _iterator2.f();\n\n                return _context3.finish(18);\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 15, 18, 21]]);\n      }));\n\n      function applyPreRequestConfigHooks(_x4) {\n        return _applyPreRequestConfigHooks.apply(this, arguments);\n      }\n\n      return applyPreRequestConfigHooks;\n    }()\n  }, {\n    key: \"applyPreStreamRequestConfigHooks\",\n    value: function applyPreStreamRequestConfigHooks(requestParams) {\n      var _a;\n\n      var url = this.getUrlObjectFromUrlString(requestParams.url);\n\n      var _iterator3 = _createForOfIteratorHelper(this.getPlugins()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var plugin = _step3.value;\n          (_a = plugin.onBeforeStreamRequestConfig) === null || _a === void 0 ? void 0 : _a.call(plugin, {\n            client: this,\n            url: url,\n            params: requestParams\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"applyPreRequestHooks\",\n    value: function () {\n      var _applyPreRequestHooks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(requestParams, computedParams, requestOptions) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.applyPluginMethod('onBeforeRequest', {\n                  client: this,\n                  url: this.getUrlObjectFromUrlString(requestParams.url),\n                  params: requestParams,\n                  computedParams: computedParams,\n                  requestOptions: requestOptions\n                });\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function applyPreRequestHooks(_x5, _x6, _x7) {\n        return _applyPreRequestHooks.apply(this, arguments);\n      }\n\n      return applyPreRequestHooks;\n    }()\n  }, {\n    key: \"applyPostRequestHooks\",\n    value: function () {\n      var _applyPostRequestHooks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(requestParams, computedParams, requestOptions, response) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.applyPluginMethod('onAfterRequest', {\n                  client: this,\n                  url: this.getUrlObjectFromUrlString(requestParams.url),\n                  params: requestParams,\n                  computedParams: computedParams,\n                  requestOptions: requestOptions,\n                  response: response\n                });\n\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function applyPostRequestHooks(_x8, _x9, _x10, _x11) {\n        return _applyPostRequestHooks.apply(this, arguments);\n      }\n\n      return applyPostRequestHooks;\n    }()\n  }, {\n    key: \"applyResponseErrorHooks\",\n    value: function applyResponseErrorHooks(requestParams, computedParams, requestOptions, promise) {\n      return promise.catch(helpers_1.applyResponseHooks.bind(this, requestParams, computedParams, requestOptions));\n    }\n  }]);\n\n  return ClientRequestMaker;\n}();\n\nexports.ClientRequestMaker = ClientRequestMaker;\nClientRequestMaker.BODY_METHODS = new Set(['POST', 'PUT', 'PATCH']);","map":null,"metadata":{},"sourceType":"script"}