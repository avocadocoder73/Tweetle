{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar Function = require(\"./Function.js\");\n\nvar newObjectInRealm = utils.newObjectInRealm;\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\nvar interfaceName = \"Headers\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (globalObject, value) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new globalObject.TypeError(\"\".concat(context, \" is not of type 'Headers'.\"));\n};\n\nexports.createDefaultIterator = function (globalObject, target, kind) {\n  var ctorRegistry = globalObject[ctorRegistrySymbol];\n  var iteratorPrototype = ctorRegistry[\"Headers Iterator\"];\n  var iterator = Object.create(iteratorPrototype);\n  Object.defineProperty(iterator, utils.iterInternalSymbol, {\n    value: {\n      target: target,\n      kind: kind,\n      index: 0\n    },\n    configurable: true\n  });\n  return iterator;\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  var proto;\n\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"Headers\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject, newTarget) {\n  var wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = function (globalObject, globalNames) {\n  var _Object$definePropert;\n\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var ctorRegistry = utils.initCtorRegistry(globalObject);\n\n  var Headers = /*#__PURE__*/function () {\n    function Headers() {\n      _classCallCheck(this, Headers);\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          if (utils.isObject(curArg)) {\n            if (curArg[Symbol.iterator] !== undefined) {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\"Failed to construct 'Headers': parameter 1\" + \" sequence\" + \" is not an iterable object.\");\n              } else {\n                var V = [];\n                var tmp = curArg;\n\n                var _iterator = _createForOfIteratorHelper(tmp),\n                    _step;\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    var nextItem = _step.value;\n\n                    if (!utils.isObject(nextItem)) {\n                      throw new globalObject.TypeError(\"Failed to construct 'Headers': parameter 1\" + \" sequence\" + \"'s element\" + \" is not an iterable object.\");\n                    } else {\n                      var _V = [];\n                      var _tmp = nextItem;\n\n                      var _iterator2 = _createForOfIteratorHelper(_tmp),\n                          _step2;\n\n                      try {\n                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                          var _nextItem = _step2.value;\n                          _nextItem = conversions[\"ByteString\"](_nextItem, {\n                            context: \"Failed to construct 'Headers': parameter 1\" + \" sequence\" + \"'s element\" + \"'s element\",\n                            globals: globalObject\n                          });\n\n                          _V.push(_nextItem);\n                        }\n                      } catch (err) {\n                        _iterator2.e(err);\n                      } finally {\n                        _iterator2.f();\n                      }\n\n                      nextItem = _V;\n                    }\n\n                    V.push(nextItem);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                curArg = V;\n              }\n            } else {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\"Failed to construct 'Headers': parameter 1\" + \" record\" + \" is not an object.\");\n              } else {\n                var result = Object.create(null);\n\n                var _iterator3 = _createForOfIteratorHelper(Reflect.ownKeys(curArg)),\n                    _step3;\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    var key = _step3.value;\n                    var desc = Object.getOwnPropertyDescriptor(curArg, key);\n\n                    if (desc && desc.enumerable) {\n                      var typedKey = key;\n                      typedKey = conversions[\"ByteString\"](typedKey, {\n                        context: \"Failed to construct 'Headers': parameter 1\" + \" record\" + \"'s key\",\n                        globals: globalObject\n                      });\n                      var typedValue = curArg[key];\n                      typedValue = conversions[\"ByteString\"](typedValue, {\n                        context: \"Failed to construct 'Headers': parameter 1\" + \" record\" + \"'s value\",\n                        globals: globalObject\n                      });\n                      result[typedKey] = typedValue;\n                    }\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                curArg = result;\n              }\n            }\n          } else {\n            throw new globalObject.TypeError(\"Failed to construct 'Headers': parameter 1\" + \" is not of any supported type.\");\n          }\n        }\n\n        args.push(curArg);\n      }\n      return exports.setup(Object.create((this instanceof Headers ? this.constructor : void 0).prototype), globalObject, args);\n    }\n\n    _createClass(Headers, [{\n      key: \"append\",\n      value: function append(name, value) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'append' called on an object that is not a valid instance of Headers.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new globalObject.TypeError(\"Failed to execute 'append' on 'Headers': 2 arguments required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"ByteString\"](curArg, {\n            context: \"Failed to execute 'append' on 'Headers': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg = arguments[1];\n          _curArg = conversions[\"ByteString\"](_curArg, {\n            context: \"Failed to execute 'append' on 'Headers': parameter 2\",\n            globals: globalObject\n          });\n          args.push(_curArg);\n        }\n        return (_esValue$implSymbol = esValue[implSymbol]).append.apply(_esValue$implSymbol, args);\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(name) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'delete' called on an object that is not a valid instance of Headers.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'delete' on 'Headers': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"ByteString\"](curArg, {\n            context: \"Failed to execute 'delete' on 'Headers': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol2 = esValue[implSymbol]).delete.apply(_esValue$implSymbol2, args);\n      }\n    }, {\n      key: \"get\",\n      value: function get(name) {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of Headers.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'get' on 'Headers': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"ByteString\"](curArg, {\n            context: \"Failed to execute 'get' on 'Headers': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol3 = esValue[implSymbol]).get.apply(_esValue$implSymbol3, args);\n      }\n    }, {\n      key: \"has\",\n      value: function has(name) {\n        var _esValue$implSymbol4;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of Headers.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'has' on 'Headers': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"ByteString\"](curArg, {\n            context: \"Failed to execute 'has' on 'Headers': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol4 = esValue[implSymbol]).has.apply(_esValue$implSymbol4, args);\n      }\n    }, {\n      key: \"set\",\n      value: function set(name, value) {\n        var _esValue$implSymbol5;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of Headers.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new globalObject.TypeError(\"Failed to execute 'set' on 'Headers': 2 arguments required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"ByteString\"](curArg, {\n            context: \"Failed to execute 'set' on 'Headers': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg2 = arguments[1];\n          _curArg2 = conversions[\"ByteString\"](_curArg2, {\n            context: \"Failed to execute 'set' on 'Headers': parameter 2\",\n            globals: globalObject\n          });\n          args.push(_curArg2);\n        }\n        return (_esValue$implSymbol5 = esValue[implSymbol]).set.apply(_esValue$implSymbol5, args);\n      }\n    }, {\n      key: \"keys\",\n      value: function keys() {\n        if (!exports.is(this)) {\n          throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of Headers.\");\n        }\n\n        return exports.createDefaultIterator(globalObject, this, \"key\");\n      }\n    }, {\n      key: \"values\",\n      value: function values() {\n        if (!exports.is(this)) {\n          throw new globalObject.TypeError(\"'values' called on an object that is not a valid instance of Headers.\");\n        }\n\n        return exports.createDefaultIterator(globalObject, this, \"value\");\n      }\n    }, {\n      key: \"entries\",\n      value: function entries() {\n        if (!exports.is(this)) {\n          throw new globalObject.TypeError(\"'entries' called on an object that is not a valid instance of Headers.\");\n        }\n\n        return exports.createDefaultIterator(globalObject, this, \"key+value\");\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        if (!exports.is(this)) {\n          throw new globalObject.TypeError(\"'forEach' called on an object that is not a valid instance of Headers.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\");\n        }\n\n        callback = Function.convert(globalObject, callback, {\n          context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n        });\n        var thisArg = arguments[1];\n        var pairs = Array.from(this[implSymbol]);\n        var i = 0;\n\n        while (i < pairs.length) {\n          var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),\n              _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),\n              key = _pairs$i$map2[0],\n              value = _pairs$i$map2[1];\n\n          callback.call(thisArg, value, key, this);\n          pairs = Array.from(this[implSymbol]);\n          i++;\n        }\n      }\n    }]);\n\n    return Headers;\n  }();\n\n  Object.defineProperties(Headers.prototype, (_Object$definePropert = {\n    append: {\n      enumerable: true\n    },\n    delete: {\n      enumerable: true\n    },\n    get: {\n      enumerable: true\n    },\n    has: {\n      enumerable: true\n    },\n    set: {\n      enumerable: true\n    },\n    keys: {\n      enumerable: true\n    },\n    values: {\n      enumerable: true\n    },\n    entries: {\n      enumerable: true\n    },\n    forEach: {\n      enumerable: true\n    }\n  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n    value: \"Headers\",\n    configurable: true\n  }), _defineProperty(_Object$definePropert, Symbol.iterator, {\n    value: Headers.prototype.entries,\n    configurable: true,\n    writable: true\n  }), _Object$definePropert));\n  ctorRegistry[interfaceName] = Headers;\n  ctorRegistry[\"Headers Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], _defineProperty({}, Symbol.toStringTag, {\n    configurable: true,\n    value: \"Headers Iterator\"\n  }));\n  utils.define(ctorRegistry[\"Headers Iterator\"], {\n    next: function next() {\n      var internal = this && this[utils.iterInternalSymbol];\n\n      if (!internal) {\n        throw new globalObject.TypeError(\"next() called on a value that is not a Headers iterator object\");\n      }\n\n      var target = internal.target,\n          kind = internal.kind,\n          index = internal.index;\n      var values = Array.from(target[implSymbol]);\n      var len = values.length;\n\n      if (index >= len) {\n        return newObjectInRealm(globalObject, {\n          value: undefined,\n          done: true\n        });\n      }\n\n      var pair = values[index];\n      internal.index = index + 1;\n      return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n    }\n  });\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Headers\n  });\n};\n\nvar Impl = require(\"../fetch/Headers-impl.js\");","map":null,"metadata":{},"sourceType":"script"}