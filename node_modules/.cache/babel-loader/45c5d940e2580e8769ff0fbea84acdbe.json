{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EStreamParserEvent = void 0;\n\nvar events_1 = require(\"events\");\n\nvar TweetStreamParser = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(TweetStreamParser, _events_1$EventEmitte);\n\n  function TweetStreamParser() {\n    var _this;\n\n    _classCallCheck(this, TweetStreamParser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TweetStreamParser).apply(this, arguments));\n    _this.currentMessage = '';\n    return _this;\n  } // Code partially belongs to twitter-stream-api for this\n  // https://github.com/trygve-lie/twitter-stream-api/blob/master/lib/parser.js\n\n\n  _createClass(TweetStreamParser, [{\n    key: \"push\",\n    value: function push(chunk) {\n      this.currentMessage += chunk;\n      chunk = this.currentMessage;\n      var size = chunk.length;\n      var start = 0;\n      var offset = 0;\n\n      while (offset < size) {\n        // Take [offset, offset+1] inside a new string\n        if (chunk.slice(offset, offset + 2) === '\\r\\n') {\n          // If chunk contains \\r\\n after current offset,\n          // parse [start, ..., offset] as a tweet\n          var piece = chunk.slice(start, offset);\n          start = offset += 2; // If empty object\n\n          if (!piece.length) {\n            continue;\n          }\n\n          try {\n            var payload = JSON.parse(piece);\n\n            if (payload) {\n              this.emit(EStreamParserEvent.ParsedData, payload);\n              continue;\n            }\n          } catch (error) {\n            this.emit(EStreamParserEvent.ParseError, error);\n          }\n        }\n\n        offset++;\n      }\n\n      this.currentMessage = chunk.slice(start, size);\n    }\n    /** Reset the currently stored message (f.e. on connection reset) */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.currentMessage = '';\n    }\n  }]);\n\n  return TweetStreamParser;\n}(events_1.EventEmitter);\n\nexports.default = TweetStreamParser;\nvar EStreamParserEvent;\n\n(function (EStreamParserEvent) {\n  EStreamParserEvent[\"ParsedData\"] = \"parsed data\";\n  EStreamParserEvent[\"ParseError\"] = \"parse error\";\n})(EStreamParserEvent = exports.EStreamParserEvent || (exports.EStreamParserEvent = {}));","map":null,"metadata":{},"sourceType":"script"}