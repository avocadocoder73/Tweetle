{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TimelineV2Paginator = exports.TwitterV2Paginator = void 0;\n\nvar includes_v2_helper_1 = require(\"../v2/includes.v2.helper\");\n\nvar TwitterPaginator_1 = require(\"./TwitterPaginator\");\n/** A generic PreviousableTwitterPaginator with common v2 helper methods. */\n\n\nvar TwitterV2Paginator = /*#__PURE__*/function (_TwitterPaginator_1$P) {\n  _inherits(TwitterV2Paginator, _TwitterPaginator_1$P);\n\n  function TwitterV2Paginator() {\n    _classCallCheck(this, TwitterV2Paginator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TwitterV2Paginator).apply(this, arguments));\n  }\n\n  _createClass(TwitterV2Paginator, [{\n    key: \"updateIncludes\",\n    value: function updateIncludes(data) {\n      // Update errors\n      if (data.errors) {\n        if (!this._realData.errors) {\n          this._realData.errors = [];\n        }\n\n        this._realData.errors = [].concat(_toConsumableArray(this._realData.errors), _toConsumableArray(data.errors));\n      } // Update includes\n\n\n      if (!data.includes) {\n        return;\n      }\n\n      if (!this._realData.includes) {\n        this._realData.includes = {};\n      }\n\n      var includesRealData = this._realData.includes;\n\n      for (var _i = 0, _Object$entries = Object.entries(data.includes); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            includeKey = _Object$entries$_i[0],\n            includeArray = _Object$entries$_i[1];\n\n        if (!includesRealData[includeKey]) {\n          includesRealData[includeKey] = [];\n        }\n\n        includesRealData[includeKey] = [].concat(_toConsumableArray(includesRealData[includeKey]), _toConsumableArray(includeArray));\n      }\n    }\n    /** Throw if the current paginator is not usable. */\n\n  }, {\n    key: \"assertUsable\",\n    value: function assertUsable() {\n      if (this.unusable) {\n        throw new Error('Unable to use this paginator to fetch more data, as it does not contain any metadata.' + ' Check .errors property for more details.');\n      }\n    }\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this._realData.meta;\n    }\n  }, {\n    key: \"includes\",\n    get: function get() {\n      var _a;\n\n      if (!((_a = this._realData) === null || _a === void 0 ? void 0 : _a.includes)) {\n        return new includes_v2_helper_1.TwitterV2IncludesHelper(this._realData);\n      }\n\n      if (this._includesInstance) {\n        return this._includesInstance;\n      }\n\n      return this._includesInstance = new includes_v2_helper_1.TwitterV2IncludesHelper(this._realData);\n    }\n  }, {\n    key: \"errors\",\n    get: function get() {\n      var _a;\n\n      return (_a = this._realData.errors) !== null && _a !== void 0 ? _a : [];\n    }\n    /** `true` if this paginator only contains error payload and no metadata found to consume data. */\n\n  }, {\n    key: \"unusable\",\n    get: function get() {\n      return this.errors.length > 0 && !this._realData.meta && !this._realData.data;\n    }\n  }]);\n\n  return TwitterV2Paginator;\n}(TwitterPaginator_1.PreviousableTwitterPaginator);\n\nexports.TwitterV2Paginator = TwitterV2Paginator;\n/** A generic TwitterV2Paginator able to consume v2 timelines that use max_results and pagination tokens. */\n\nvar TimelineV2Paginator = /*#__PURE__*/function (_TwitterV2Paginator) {\n  _inherits(TimelineV2Paginator, _TwitterV2Paginator);\n\n  function TimelineV2Paginator() {\n    _classCallCheck(this, TimelineV2Paginator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TimelineV2Paginator).apply(this, arguments));\n  }\n\n  _createClass(TimelineV2Paginator, [{\n    key: \"refreshInstanceFromResult\",\n    value: function refreshInstanceFromResult(response, isNextPage) {\n      var _a;\n\n      var result = response.data;\n      var resultData = (_a = result.data) !== null && _a !== void 0 ? _a : [];\n      this._rateLimit = response.rateLimit;\n\n      if (!this._realData.data) {\n        this._realData.data = [];\n      }\n\n      if (isNextPage) {\n        var _this$_realData$data;\n\n        this._realData.meta.result_count += result.meta.result_count;\n        this._realData.meta.next_token = result.meta.next_token;\n\n        (_this$_realData$data = this._realData.data).push.apply(_this$_realData$data, _toConsumableArray(resultData));\n      } else {\n        var _this$_realData$data2;\n\n        this._realData.meta.result_count += result.meta.result_count;\n        this._realData.meta.previous_token = result.meta.previous_token;\n\n        (_this$_realData$data2 = this._realData.data).unshift.apply(_this$_realData$data2, _toConsumableArray(resultData));\n      }\n\n      this.updateIncludes(result);\n    }\n  }, {\n    key: \"getNextQueryParams\",\n    value: function getNextQueryParams(maxResults) {\n      this.assertUsable();\n      return _objectSpread({}, this.injectQueryParams(maxResults), {\n        pagination_token: this._realData.meta.next_token\n      });\n    }\n  }, {\n    key: \"getPreviousQueryParams\",\n    value: function getPreviousQueryParams(maxResults) {\n      this.assertUsable();\n      return _objectSpread({}, this.injectQueryParams(maxResults), {\n        pagination_token: this._realData.meta.previous_token\n      });\n    }\n  }, {\n    key: \"getPageLengthFromRequest\",\n    value: function getPageLengthFromRequest(result) {\n      var _a, _b;\n\n      return (_b = (_a = result.data.data) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n    }\n  }, {\n    key: \"isFetchLastOver\",\n    value: function isFetchLastOver(result) {\n      var _a;\n\n      return !((_a = result.data.data) === null || _a === void 0 ? void 0 : _a.length) || !this.canFetchNextPage(result.data);\n    }\n  }, {\n    key: \"canFetchNextPage\",\n    value: function canFetchNextPage(result) {\n      var _a;\n\n      return !!((_a = result.meta) === null || _a === void 0 ? void 0 : _a.next_token);\n    }\n  }]);\n\n  return TimelineV2Paginator;\n}(TwitterV2Paginator);\n\nexports.TimelineV2Paginator = TimelineV2Paginator;","map":null,"metadata":{},"sourceType":"script"}