{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestHandlerHelper = void 0;\n\nvar https_1 = require(\"https\");\n\nvar settings_1 = require(\"../settings\");\n\nvar TweetStream_1 = __importDefault(require(\"../stream/TweetStream\"));\n\nvar types_1 = require(\"../types\");\n\nvar zlib = __importStar(require(\"zlib\"));\n\nvar RequestHandlerHelper = /*#__PURE__*/function () {\n  function RequestHandlerHelper(requestData) {\n    _classCallCheck(this, RequestHandlerHelper);\n\n    this.requestData = requestData;\n    this.requestErrorHandled = false;\n    this.responseData = [];\n  }\n  /* Request helpers */\n\n\n  _createClass(RequestHandlerHelper, [{\n    key: \"isCompressionDisabled\",\n    value: function isCompressionDisabled() {\n      return !this.requestData.compression || this.requestData.compression === 'identity';\n    }\n  }, {\n    key: \"isFormEncodedEndpoint\",\n    value: function isFormEncodedEndpoint() {\n      return this.requestData.url.href.startsWith('https://api.twitter.com/oauth/');\n    }\n    /* Error helpers */\n\n  }, {\n    key: \"createRequestError\",\n    value: function createRequestError(error) {\n      if (settings_1.TwitterApiV2Settings.debug) {\n        settings_1.TwitterApiV2Settings.logger.log('Request error:', error);\n      }\n\n      return new types_1.ApiRequestError('Request failed.', {\n        request: this.req,\n        error: error\n      });\n    }\n  }, {\n    key: \"createPartialResponseError\",\n    value: function createPartialResponseError(error, abortClose) {\n      var res = this.res;\n      var message = \"Request failed with partial response with HTTP code \".concat(res.statusCode);\n\n      if (abortClose) {\n        message += ' (connection abruptly closed)';\n      } else {\n        message += ' (parse error)';\n      }\n\n      return new types_1.ApiPartialResponseError(message, {\n        request: this.req,\n        response: this.res,\n        responseError: error,\n        rawContent: Buffer.concat(this.responseData).toString()\n      });\n    }\n  }, {\n    key: \"formatV1Errors\",\n    value: function formatV1Errors(errors) {\n      return errors.map(function (_ref) {\n        var code = _ref.code,\n            message = _ref.message;\n        return \"\".concat(message, \" (Twitter code \").concat(code, \")\");\n      }).join(', ');\n    }\n  }, {\n    key: \"formatV2Error\",\n    value: function formatV2Error(error) {\n      return \"\".concat(error.title, \": \").concat(error.detail, \" (see \").concat(error.type, \")\");\n    }\n  }, {\n    key: \"createResponseError\",\n    value: function createResponseError(_ref2) {\n      var res = _ref2.res,\n          data = _ref2.data,\n          rateLimit = _ref2.rateLimit,\n          code = _ref2.code;\n\n      var _a;\n\n      if (settings_1.TwitterApiV2Settings.debug) {\n        settings_1.TwitterApiV2Settings.logger.log(\"Request failed with code \".concat(code, \", data:\"), data);\n        settings_1.TwitterApiV2Settings.logger.log('Response headers:', res.headers);\n      } // Errors formatting.\n\n\n      var errorString = \"Request failed with code \".concat(code);\n\n      if ((_a = data === null || data === void 0 ? void 0 : data.errors) === null || _a === void 0 ? void 0 : _a.length) {\n        var errors = data.errors;\n\n        if ('code' in errors[0]) {\n          errorString += ' - ' + this.formatV1Errors(errors);\n        } else {\n          errorString += ' - ' + this.formatV2Error(data);\n        }\n      }\n\n      return new types_1.ApiResponseError(errorString, {\n        code: code,\n        data: data,\n        headers: res.headers,\n        request: this.req,\n        response: res,\n        rateLimit: rateLimit\n      });\n    }\n    /* Response helpers */\n\n  }, {\n    key: \"getResponseDataStream\",\n    value: function getResponseDataStream(res) {\n      if (this.isCompressionDisabled()) {\n        return res;\n      }\n\n      var contentEncoding = (res.headers['content-encoding'] || 'identity').trim().toLowerCase();\n\n      if (contentEncoding === 'br') {\n        var brotli = zlib.createBrotliDecompress({\n          flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n          finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n        });\n        res.pipe(brotli);\n        return brotli;\n      }\n\n      if (contentEncoding === 'gzip') {\n        var gunzip = zlib.createGunzip({\n          flush: zlib.constants.Z_SYNC_FLUSH,\n          finishFlush: zlib.constants.Z_SYNC_FLUSH\n        });\n        res.pipe(gunzip);\n        return gunzip;\n      }\n\n      if (contentEncoding === 'deflate') {\n        var inflate = zlib.createInflate({\n          flush: zlib.constants.Z_SYNC_FLUSH,\n          finishFlush: zlib.constants.Z_SYNC_FLUSH\n        });\n        res.pipe(inflate);\n        return inflate;\n      }\n\n      return res;\n    }\n  }, {\n    key: \"detectResponseType\",\n    value: function detectResponseType(res) {\n      var _a, _b; // Auto parse if server responds with JSON body\n\n\n      if (((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.includes('application/json')) || ((_b = res.headers['content-type']) === null || _b === void 0 ? void 0 : _b.includes('application/problem+json'))) {\n        return 'json';\n      } // f-e oauth token endpoints\n      else if (this.isFormEncodedEndpoint()) {\n        return 'url';\n      }\n\n      return 'text';\n    }\n  }, {\n    key: \"getParsedResponse\",\n    value: function getParsedResponse(res) {\n      var data = this.responseData;\n      var mode = this.requestData.forceParseMode || this.detectResponseType(res);\n\n      if (mode === 'buffer') {\n        return Buffer.concat(data);\n      } else if (mode === 'text') {\n        return Buffer.concat(data).toString();\n      } else if (mode === 'json') {\n        var asText = Buffer.concat(data).toString();\n        return asText.length ? JSON.parse(asText) : undefined;\n      } else if (mode === 'url') {\n        var _asText = Buffer.concat(data).toString();\n\n        var formEntries = {};\n\n        var _iterator = _createForOfIteratorHelper(new URLSearchParams(_asText)),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                item = _step$value[0],\n                value = _step$value[1];\n\n            formEntries[item] = value;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return formEntries;\n      } else {\n        // mode === 'none'\n        return undefined;\n      }\n    }\n  }, {\n    key: \"getRateLimitFromResponse\",\n    value: function getRateLimitFromResponse(res) {\n      var rateLimit = undefined;\n\n      if (res.headers['x-rate-limit-limit']) {\n        rateLimit = {\n          limit: Number(res.headers['x-rate-limit-limit']),\n          remaining: Number(res.headers['x-rate-limit-remaining']),\n          reset: Number(res.headers['x-rate-limit-reset'])\n        };\n\n        if (this.requestData.rateLimitSaver) {\n          this.requestData.rateLimitSaver(rateLimit);\n        }\n      }\n\n      return rateLimit;\n    }\n    /* Request event handlers */\n\n  }, {\n    key: \"onSocketEventHandler\",\n    value: function onSocketEventHandler(reject, socket) {\n      socket.on('close', this.onSocketCloseHandler.bind(this, reject));\n    }\n  }, {\n    key: \"onSocketCloseHandler\",\n    value: function onSocketCloseHandler(reject) {\n      this.req.removeAllListeners('timeout');\n      var res = this.res;\n\n      if (res) {\n        // Response ok, res.close/res.end can handle request ending\n        return;\n      }\n\n      if (!this.requestErrorHandled) {\n        return reject(this.createRequestError(new Error('Socket closed without any information.')));\n      } // else: other situation\n\n    }\n  }, {\n    key: \"requestErrorHandler\",\n    value: function requestErrorHandler(reject, requestError) {\n      var _a, _b;\n\n      (_b = (_a = this.requestData).requestEventDebugHandler) === null || _b === void 0 ? void 0 : _b.call(_a, 'request-error', {\n        requestError: requestError\n      });\n      this.requestErrorHandled = true;\n      reject(this.createRequestError(requestError));\n    }\n  }, {\n    key: \"timeoutErrorHandler\",\n    value: function timeoutErrorHandler() {\n      this.requestErrorHandled = true;\n      this.req.destroy(new Error('Request timeout.'));\n    }\n    /* Response event handlers */\n\n  }, {\n    key: \"classicResponseHandler\",\n    value: function classicResponseHandler(resolve, reject, res) {\n      var _this = this;\n\n      this.res = res;\n      var dataStream = this.getResponseDataStream(res); // Register the response data\n\n      dataStream.on('data', function (chunk) {\n        return _this.responseData.push(chunk);\n      });\n      dataStream.on('end', this.onResponseEndHandler.bind(this, resolve, reject));\n      dataStream.on('close', this.onResponseCloseHandler.bind(this, resolve, reject)); // Debug handlers\n\n      if (this.requestData.requestEventDebugHandler) {\n        this.requestData.requestEventDebugHandler('response', {\n          res: res\n        });\n        res.on('aborted', function (error) {\n          return _this.requestData.requestEventDebugHandler('response-aborted', {\n            error: error\n          });\n        });\n        res.on('error', function (error) {\n          return _this.requestData.requestEventDebugHandler('response-error', {\n            error: error\n          });\n        });\n        res.on('close', function () {\n          return _this.requestData.requestEventDebugHandler('response-close', {\n            data: _this.responseData\n          });\n        });\n        res.on('end', function () {\n          return _this.requestData.requestEventDebugHandler('response-end');\n        });\n      }\n    }\n  }, {\n    key: \"onResponseEndHandler\",\n    value: function onResponseEndHandler(resolve, reject) {\n      var rateLimit = this.getRateLimitFromResponse(this.res);\n      var data;\n\n      try {\n        data = this.getParsedResponse(this.res);\n      } catch (e) {\n        reject(this.createPartialResponseError(e, false));\n        return;\n      } // Handle bad error codes\n\n\n      var code = this.res.statusCode;\n\n      if (code >= 400) {\n        reject(this.createResponseError({\n          data: data,\n          res: this.res,\n          rateLimit: rateLimit,\n          code: code\n        }));\n        return;\n      }\n\n      if (settings_1.TwitterApiV2Settings.debug) {\n        settings_1.TwitterApiV2Settings.logger.log(\"[\".concat(this.requestData.options.method, \" \").concat(this.hrefPathname, \"]: Request succeeds with code \").concat(this.res.statusCode));\n        settings_1.TwitterApiV2Settings.logger.log('Response body:', data);\n      }\n\n      resolve({\n        data: data,\n        headers: this.res.headers,\n        rateLimit: rateLimit\n      });\n    }\n  }, {\n    key: \"onResponseCloseHandler\",\n    value: function onResponseCloseHandler(resolve, reject) {\n      var res = this.res;\n\n      if (res.aborted) {\n        // Try to parse the request (?)\n        try {\n          this.getParsedResponse(this.res); // Ok, try to resolve normally the request\n\n          return this.onResponseEndHandler(resolve, reject);\n        } catch (e) {\n          // Parse error, just drop with content\n          return reject(this.createPartialResponseError(e, true));\n        }\n      }\n\n      if (!res.complete) {\n        return reject(this.createPartialResponseError(new Error('Response has been interrupted before response could be parsed.'), true));\n      } // else: end has been called\n\n    }\n  }, {\n    key: \"streamResponseHandler\",\n    value: function streamResponseHandler(resolve, reject, res) {\n      var code = res.statusCode;\n\n      if (code < 400) {\n        if (settings_1.TwitterApiV2Settings.debug) {\n          settings_1.TwitterApiV2Settings.logger.log(\"[\".concat(this.requestData.options.method, \" \").concat(this.hrefPathname, \"]: Request succeeds with code \").concat(res.statusCode, \" (starting stream)\"));\n        }\n\n        var dataStream = this.getResponseDataStream(res); // HTTP code ok, consume stream\n\n        resolve({\n          req: this.req,\n          res: dataStream,\n          originalResponse: res,\n          requestData: this.requestData\n        });\n      } else {\n        // Handle response normally, can only rejects\n        this.classicResponseHandler(function () {\n          return undefined;\n        }, reject, res);\n      }\n    }\n    /* Wrappers for request lifecycle */\n\n  }, {\n    key: \"debugRequest\",\n    value: function debugRequest() {\n      var url = this.requestData.url;\n      settings_1.TwitterApiV2Settings.logger.log(\"[\".concat(this.requestData.options.method, \" \").concat(this.hrefPathname, \"]\"), this.requestData.options);\n\n      if (url.search) {\n        settings_1.TwitterApiV2Settings.logger.log('Request parameters:', _toConsumableArray(url.searchParams.entries()).map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              key = _ref4[0],\n              value = _ref4[1];\n\n          return \"\".concat(key, \": \").concat(value);\n        }));\n      }\n\n      if (this.requestData.body) {\n        settings_1.TwitterApiV2Settings.logger.log('Request body:', this.requestData.body);\n      }\n    }\n  }, {\n    key: \"buildRequest\",\n    value: function buildRequest() {\n      var _a;\n\n      var url = this.requestData.url;\n      var auth = url.username ? \"\".concat(url.username, \":\").concat(url.password) : undefined;\n      var headers = (_a = this.requestData.options.headers) !== null && _a !== void 0 ? _a : {};\n\n      if (this.requestData.compression === true || this.requestData.compression === 'brotli') {\n        headers['accept-encoding'] = 'br;q=1.0, gzip;q=0.8, deflate;q=0.5, *;q=0.1';\n      } else if (this.requestData.compression === 'gzip') {\n        headers['accept-encoding'] = 'gzip;q=1, deflate;q=0.5, *;q=0.1';\n      } else if (this.requestData.compression === 'deflate') {\n        headers['accept-encoding'] = 'deflate;q=1, *;q=0.1';\n      }\n\n      if (settings_1.TwitterApiV2Settings.debug) {\n        this.debugRequest();\n      }\n\n      this.req = (0, https_1.request)(_objectSpread({}, this.requestData.options, {\n        // Define URL params manually, addresses dependencies error https://github.com/PLhery/node-twitter-api-v2/issues/94\n        host: url.hostname,\n        port: url.port || undefined,\n        path: url.pathname + url.search,\n        protocol: url.protocol,\n        auth: auth,\n        headers: headers\n      }));\n    }\n  }, {\n    key: \"registerRequestEventDebugHandlers\",\n    value: function registerRequestEventDebugHandlers(req) {\n      var _this2 = this;\n\n      req.on('close', function () {\n        return _this2.requestData.requestEventDebugHandler('close');\n      });\n      req.on('abort', function () {\n        return _this2.requestData.requestEventDebugHandler('abort');\n      });\n      req.on('socket', function (socket) {\n        _this2.requestData.requestEventDebugHandler('socket', {\n          socket: socket\n        });\n\n        socket.on('error', function (error) {\n          return _this2.requestData.requestEventDebugHandler('socket-error', {\n            socket: socket,\n            error: error\n          });\n        });\n        socket.on('connect', function () {\n          return _this2.requestData.requestEventDebugHandler('socket-connect', {\n            socket: socket\n          });\n        });\n        socket.on('close', function (withError) {\n          return _this2.requestData.requestEventDebugHandler('socket-close', {\n            socket: socket,\n            withError: withError\n          });\n        });\n        socket.on('end', function () {\n          return _this2.requestData.requestEventDebugHandler('socket-end', {\n            socket: socket\n          });\n        });\n        socket.on('lookup', function () {\n          for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {\n            data[_key] = arguments[_key];\n          }\n\n          return _this2.requestData.requestEventDebugHandler('socket-lookup', {\n            socket: socket,\n            data: data\n          });\n        });\n        socket.on('timeout', function () {\n          return _this2.requestData.requestEventDebugHandler('socket-timeout', {\n            socket: socket\n          });\n        });\n      });\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest() {\n      var _this3 = this;\n\n      this.buildRequest();\n      return new Promise(function (resolve, reject) {\n        var req = _this3.req; // Handle request errors\n\n        req.on('error', _this3.requestErrorHandler.bind(_this3, reject));\n        req.on('socket', _this3.onSocketEventHandler.bind(_this3, reject));\n        req.on('response', _this3.classicResponseHandler.bind(_this3, resolve, reject));\n\n        if (_this3.requestData.options.timeout) {\n          req.on('timeout', _this3.timeoutErrorHandler.bind(_this3));\n        } // Debug handlers\n\n\n        if (_this3.requestData.requestEventDebugHandler) {\n          _this3.registerRequestEventDebugHandlers(req);\n        }\n\n        if (_this3.requestData.body) {\n          req.write(_this3.requestData.body);\n        }\n\n        req.end();\n      });\n    }\n  }, {\n    key: \"makeRequestAsStream\",\n    value: function () {\n      var _makeRequestAsStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$this$makeReque, req, res, requestData, originalResponse;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.makeRequestAndResolveWhenReady();\n\n              case 2:\n                _yield$this$makeReque = _context.sent;\n                req = _yield$this$makeReque.req;\n                res = _yield$this$makeReque.res;\n                requestData = _yield$this$makeReque.requestData;\n                originalResponse = _yield$this$makeReque.originalResponse;\n                return _context.abrupt(\"return\", new TweetStream_1.default(requestData, {\n                  req: req,\n                  res: res,\n                  originalResponse: originalResponse\n                }));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function makeRequestAsStream() {\n        return _makeRequestAsStream.apply(this, arguments);\n      }\n\n      return makeRequestAsStream;\n    }()\n  }, {\n    key: \"makeRequestAndResolveWhenReady\",\n    value: function makeRequestAndResolveWhenReady() {\n      var _this4 = this;\n\n      this.buildRequest();\n      return new Promise(function (resolve, reject) {\n        var req = _this4.req; // Handle request errors\n\n        req.on('error', _this4.requestErrorHandler.bind(_this4, reject));\n        req.on('response', _this4.streamResponseHandler.bind(_this4, resolve, reject));\n\n        if (_this4.requestData.body) {\n          req.write(_this4.requestData.body);\n        }\n\n        req.end();\n      });\n    }\n  }, {\n    key: \"hrefPathname\",\n    get: function get() {\n      var url = this.requestData.url;\n      return url.hostname + url.pathname;\n    }\n  }]);\n\n  return RequestHandlerHelper;\n}();\n\nexports.RequestHandlerHelper = RequestHandlerHelper;\nexports.default = RequestHandlerHelper;","map":null,"metadata":{},"sourceType":"script"}