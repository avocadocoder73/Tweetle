{"ast":null,"code":"import { Parser } from './parser/index.js';\nexport { defaultTreeAdapter } from './tree-adapters/default.js';\nexport {\n/** @internal */\nParser } from './parser/index.js';\nexport { serialize, serializeOuter } from './serializer/index.js';\n/** @internal */\n\nexport * as foreignContent from './common/foreign-content.js';\n/** @internal */\n\nexport * as html from './common/html.js';\n/** @internal */\n\nexport * as Token from './common/token.js';\n/** @internal */\n\nexport { Tokenizer, TokenizerMode } from './tokenizer/index.js'; // Shorthands\n\n/**\n * Parses an HTML string.\n *\n * @param html Input HTML string.\n * @param options Parsing options.\n * @returns Document\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * console.log(document.childNodes[1].tagName); //> 'html'\n *```\n */\n\nexport function parse(html, options) {\n  return Parser.parse(html, options);\n}\nexport function parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n\n  var parser = Parser.getFragmentParser(fragmentContext, options);\n  parser.tokenizer.write(html, true);\n  return parser.getFragment();\n}","map":null,"metadata":{},"sourceType":"module"}