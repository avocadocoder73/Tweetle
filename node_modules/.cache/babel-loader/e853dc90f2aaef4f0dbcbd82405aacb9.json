{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _objectWithoutProperties = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectWithoutProperties\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar request_maker_mixin_1 = require(\"./client-mixins/request-maker.mixin\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar globals_1 = require(\"./globals\");\n/**\n * Base class for Twitter instances\n */\n\n\nvar TwitterApiBase = /*#__PURE__*/function () {\n  function TwitterApiBase(token) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TwitterApiBase);\n\n    this._currentUser = null;\n    this._currentUserV2 = null;\n\n    if (token instanceof TwitterApiBase) {\n      this._requestMaker = token._requestMaker;\n    } else {\n      this._requestMaker = new request_maker_mixin_1.ClientRequestMaker(settings);\n\n      this._requestMaker.initializeToken(token);\n    }\n  }\n  /* Prefix/Token handling */\n\n\n  _createClass(TwitterApiBase, [{\n    key: \"setPrefix\",\n    value: function setPrefix(prefix) {\n      this._prefix = prefix;\n    }\n  }, {\n    key: \"cloneWithPrefix\",\n    value: function cloneWithPrefix(prefix) {\n      var clone = this.constructor(this);\n      clone.setPrefix(prefix);\n      return clone;\n    }\n  }, {\n    key: \"getActiveTokens\",\n    value: function getActiveTokens() {\n      return this._requestMaker.getActiveTokens();\n    }\n    /* Rate limit cache / Plugins */\n\n  }, {\n    key: \"getPlugins\",\n    value: function getPlugins() {\n      return this._requestMaker.getPlugins();\n    }\n  }, {\n    key: \"getPluginOfType\",\n    value: function getPluginOfType(type) {\n      return this.getPlugins().find(function (plugin) {\n        return plugin instanceof type;\n      });\n    }\n    /**\n     * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n     *\n     * Tells if you hit the Twitter rate limit for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n\n  }, {\n    key: \"hasHitRateLimit\",\n    value: function hasHitRateLimit(endpoint) {\n      var _a;\n\n      if (this.isRateLimitStatusObsolete(endpoint)) {\n        return false;\n      }\n\n      return ((_a = this.getLastRateLimitStatus(endpoint)) === null || _a === void 0 ? void 0 : _a.remaining) === 0;\n    }\n    /**\n     * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n     *\n     * Tells if you hit the returned Twitter rate limit for {endpoint} has expired.\n     * If client has no saved rate limit data for {endpoint}, this will gives you `true`.\n     */\n\n  }, {\n    key: \"isRateLimitStatusObsolete\",\n    value: function isRateLimitStatusObsolete(endpoint) {\n      var rateLimit = this.getLastRateLimitStatus(endpoint);\n\n      if (rateLimit === undefined) {\n        return true;\n      } // Timestamps are exprimed in seconds, JS works with ms\n\n\n      return rateLimit.reset * 1000 < Date.now();\n    }\n    /**\n     * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n     *\n     * Get the last obtained Twitter rate limit information for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n\n  }, {\n    key: \"getLastRateLimitStatus\",\n    value: function getLastRateLimitStatus(endpoint) {\n      var endpointWithPrefix = endpoint.match(/^https?:\\/\\//) ? endpoint : this._prefix + endpoint;\n      return this._requestMaker.getRateLimits()[endpointWithPrefix];\n    }\n    /* Current user cache */\n\n    /** Get cached current user. */\n\n  }, {\n    key: \"getCurrentUserObject\",\n    value: function getCurrentUserObject() {\n      var _this = this;\n\n      var forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!forceFetch && this._currentUser) {\n        if (this._currentUser.value) {\n          return Promise.resolve(this._currentUser.value);\n        }\n\n        return this._currentUser.promise;\n      }\n\n      this._currentUser = (0, helpers_1.sharedPromise)(function () {\n        return _this.get('account/verify_credentials.json', {\n          tweet_mode: 'extended'\n        }, {\n          prefix: globals_1.API_V1_1_PREFIX\n        });\n      });\n      return this._currentUser.promise;\n    }\n    /**\n     * Get cached current user from v2 API.\n     * This can only be the slimest available `UserV2` object, with only `id`, `name` and `username` properties defined.\n     *\n     * To get a customized `UserV2Result`, use `.v2.me()`\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n\n  }, {\n    key: \"getCurrentUserV2Object\",\n    value: function getCurrentUserV2Object() {\n      var _this2 = this;\n\n      var forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!forceFetch && this._currentUserV2) {\n        if (this._currentUserV2.value) {\n          return Promise.resolve(this._currentUserV2.value);\n        }\n\n        return this._currentUserV2.promise;\n      }\n\n      this._currentUserV2 = (0, helpers_1.sharedPromise)(function () {\n        return _this2.get('users/me', undefined, {\n          prefix: globals_1.API_V2_PREFIX\n        });\n      });\n      return this._currentUserV2.promise;\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n        var query,\n            _ref,\n            fullResponse,\n            _ref$prefix,\n            prefix,\n            rest,\n            resp,\n            _args = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _ref = _args.length > 2 && _args[2] !== undefined ? _args[2] : {}, fullResponse = _ref.fullResponse, _ref$prefix = _ref.prefix, prefix = _ref$prefix === void 0 ? this._prefix : _ref$prefix, rest = _objectWithoutProperties(_ref, [\"fullResponse\", \"prefix\"]);\n                if (prefix) url = prefix + url;\n                _context.next = 5;\n                return this._requestMaker.send(_objectSpread({\n                  url: url,\n                  method: 'GET',\n                  query: query\n                }, rest));\n\n              case 5:\n                resp = _context.sent;\n                return _context.abrupt(\"return\", fullResponse ? resp : resp.data);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n        var query,\n            _ref2,\n            fullResponse,\n            _ref2$prefix,\n            prefix,\n            rest,\n            resp,\n            _args2 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                query = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                _ref2 = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {}, fullResponse = _ref2.fullResponse, _ref2$prefix = _ref2.prefix, prefix = _ref2$prefix === void 0 ? this._prefix : _ref2$prefix, rest = _objectWithoutProperties(_ref2, [\"fullResponse\", \"prefix\"]);\n                if (prefix) url = prefix + url;\n                _context2.next = 5;\n                return this._requestMaker.send(_objectSpread({\n                  url: url,\n                  method: 'DELETE',\n                  query: query\n                }, rest));\n\n              case 5:\n                resp = _context2.sent;\n                return _context2.abrupt(\"return\", fullResponse ? resp : resp.data);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _delete(_x2) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url, body) {\n        var _ref3,\n            fullResponse,\n            _ref3$prefix,\n            prefix,\n            rest,\n            resp,\n            _args3 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _ref3 = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {}, fullResponse = _ref3.fullResponse, _ref3$prefix = _ref3.prefix, prefix = _ref3$prefix === void 0 ? this._prefix : _ref3$prefix, rest = _objectWithoutProperties(_ref3, [\"fullResponse\", \"prefix\"]);\n                if (prefix) url = prefix + url;\n                _context3.next = 4;\n                return this._requestMaker.send(_objectSpread({\n                  url: url,\n                  method: 'POST',\n                  body: body\n                }, rest));\n\n              case 4:\n                resp = _context3.sent;\n                return _context3.abrupt(\"return\", fullResponse ? resp : resp.data);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function post(_x3, _x4) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }()\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(url, body) {\n        var _ref4,\n            fullResponse,\n            _ref4$prefix,\n            prefix,\n            rest,\n            resp,\n            _args4 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _ref4 = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {}, fullResponse = _ref4.fullResponse, _ref4$prefix = _ref4.prefix, prefix = _ref4$prefix === void 0 ? this._prefix : _ref4$prefix, rest = _objectWithoutProperties(_ref4, [\"fullResponse\", \"prefix\"]);\n                if (prefix) url = prefix + url;\n                _context4.next = 4;\n                return this._requestMaker.send(_objectSpread({\n                  url: url,\n                  method: 'PUT',\n                  body: body\n                }, rest));\n\n              case 4:\n                resp = _context4.sent;\n                return _context4.abrupt(\"return\", fullResponse ? resp : resp.data);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function put(_x5, _x6) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n  }, {\n    key: \"patch\",\n    value: function () {\n      var _patch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(url, body) {\n        var _ref5,\n            fullResponse,\n            _ref5$prefix,\n            prefix,\n            rest,\n            resp,\n            _args5 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _ref5 = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {}, fullResponse = _ref5.fullResponse, _ref5$prefix = _ref5.prefix, prefix = _ref5$prefix === void 0 ? this._prefix : _ref5$prefix, rest = _objectWithoutProperties(_ref5, [\"fullResponse\", \"prefix\"]);\n                if (prefix) url = prefix + url;\n                _context5.next = 4;\n                return this._requestMaker.send(_objectSpread({\n                  url: url,\n                  method: 'PATCH',\n                  body: body\n                }, rest));\n\n              case 4:\n                resp = _context5.sent;\n                return _context5.abrupt(\"return\", fullResponse ? resp : resp.data);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function patch(_x7, _x8) {\n        return _patch.apply(this, arguments);\n      }\n\n      return patch;\n    }()\n  }, {\n    key: \"getStream\",\n    value: function getStream(url, query) {\n      var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref6$prefix = _ref6.prefix,\n          prefix = _ref6$prefix === void 0 ? this._prefix : _ref6$prefix,\n          rest = _objectWithoutProperties(_ref6, [\"prefix\"]);\n\n      return this._requestMaker.sendStream(_objectSpread({\n        url: prefix ? prefix + url : url,\n        method: 'GET',\n        query: query\n      }, rest));\n    }\n  }, {\n    key: \"postStream\",\n    value: function postStream(url, body) {\n      var _ref7 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref7$prefix = _ref7.prefix,\n          prefix = _ref7$prefix === void 0 ? this._prefix : _ref7$prefix,\n          rest = _objectWithoutProperties(_ref7, [\"prefix\"]);\n\n      return this._requestMaker.sendStream(_objectSpread({\n        url: prefix ? prefix + url : url,\n        method: 'POST',\n        body: body\n      }, rest));\n    }\n  }]);\n\n  return TwitterApiBase;\n}();\n\nexports.default = TwitterApiBase;","map":null,"metadata":{},"sourceType":"script"}