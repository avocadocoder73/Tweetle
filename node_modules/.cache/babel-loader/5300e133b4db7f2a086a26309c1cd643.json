{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar globals_1 = require(\"../globals\");\n\nvar client_v2_read_1 = __importDefault(require(\"./client.v2.read\"));\n\nvar client_v2_labs_write_1 = __importDefault(require(\"../v2-labs/client.v2.labs.write\"));\n/**\n * Base Twitter v2 client with read/write rights.\n */\n\n\nvar TwitterApiv2ReadWrite = /*#__PURE__*/function (_client_v2_read_1$def) {\n  _inherits(TwitterApiv2ReadWrite, _client_v2_read_1$def);\n\n  function TwitterApiv2ReadWrite() {\n    var _this;\n\n    _classCallCheck(this, TwitterApiv2ReadWrite);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterApiv2ReadWrite).apply(this, arguments));\n    _this._prefix = globals_1.API_V2_PREFIX;\n    return _this;\n  }\n  /* Sub-clients */\n\n  /**\n   * Get a client with only read rights.\n   */\n\n\n  _createClass(TwitterApiv2ReadWrite, [{\n    key: \"hideReply\",\n\n    /* Tweets */\n\n    /**\n     * Hides or unhides a reply to a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden\n     */\n    value: function hideReply(tweetId, makeHidden) {\n      return this.put('tweets/:id/hidden', {\n        hidden: makeHidden\n      }, {\n        params: {\n          id: tweetId\n        }\n      });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Like the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-user_id-likes\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"like\",\n    value: function like(loggedUserId, targetTweetId) {\n      return this.post('users/:id/likes', {\n        tweet_id: targetTweetId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows a user or authenticated user ID to unlike a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"unlike\",\n    value: function unlike(loggedUserId, targetTweetId) {\n      return this.delete('users/:id/likes/:tweet_id', undefined, {\n        params: {\n          id: loggedUserId,\n          tweet_id: targetTweetId\n        }\n      });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Retweet the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"retweet\",\n    value: function retweet(loggedUserId, targetTweetId) {\n      return this.post('users/:id/retweets', {\n        tweet_id: targetTweetId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows a user or authenticated user ID to remove the Retweet of a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"unretweet\",\n    value: function unretweet(loggedUserId, targetTweetId) {\n      return this.delete('users/:id/retweets/:tweet_id', undefined, {\n        params: {\n          id: loggedUserId,\n          tweet_id: targetTweetId\n        }\n      });\n    }\n  }, {\n    key: \"tweet\",\n    value: function tweet(status) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof status === 'object') {\n        payload = status;\n      } else {\n        payload = _objectSpread({\n          text: status\n        }, payload);\n      }\n\n      return this.post('tweets', payload);\n    }\n    /**\n     * Reply to a Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n\n  }, {\n    key: \"reply\",\n    value: function reply(status, toTweetId) {\n      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _a;\n\n      var reply = _objectSpread({\n        in_reply_to_tweet_id: toTweetId\n      }, (_a = payload.reply) !== null && _a !== void 0 ? _a : {});\n\n      return this.post('tweets', _objectSpread({\n        text: status\n      }, payload, {\n        reply: reply\n      }));\n    }\n    /**\n     * Quote an existing Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n\n  }, {\n    key: \"quote\",\n    value: function quote(status, quotedTweetId) {\n      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.tweet(status, _objectSpread({}, payload, {\n        quote_tweet_id: quotedTweetId\n      }));\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n\n  }, {\n    key: \"tweetThread\",\n    value: function () {\n      var _tweetThread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tweets) {\n        var _a, _b, postedTweets, _iterator, _step, tweet, lastTweet, queryParams, inReplyToId, status;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                postedTweets = [];\n                _iterator = _createForOfIteratorHelper(tweets);\n                _context.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 25;\n                  break;\n                }\n\n                tweet = _step.value;\n                // Retrieve the last sent tweet\n                lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null; // Build the tweet query params\n\n                queryParams = _objectSpread({}, typeof tweet === 'string' ? {\n                  text: tweet\n                } : tweet); // Reply to an existing tweet if needed\n\n                inReplyToId = lastTweet ? lastTweet.data.id : (_a = queryParams.reply) === null || _a === void 0 ? void 0 : _a.in_reply_to_tweet_id;\n                status = (_b = queryParams.text) !== null && _b !== void 0 ? _b : '';\n\n                if (!inReplyToId) {\n                  _context.next = 18;\n                  break;\n                }\n\n                _context.t0 = postedTweets;\n                _context.next = 14;\n                return this.reply(status, inReplyToId, queryParams);\n\n              case 14:\n                _context.t1 = _context.sent;\n\n                _context.t0.push.call(_context.t0, _context.t1);\n\n                _context.next = 23;\n                break;\n\n              case 18:\n                _context.t2 = postedTweets;\n                _context.next = 21;\n                return this.tweet(status, queryParams);\n\n              case 21:\n                _context.t3 = _context.sent;\n\n                _context.t2.push.call(_context.t2, _context.t3);\n\n              case 23:\n                _context.next = 4;\n                break;\n\n              case 25:\n                _context.next = 30;\n                break;\n\n              case 27:\n                _context.prev = 27;\n                _context.t4 = _context[\"catch\"](2);\n\n                _iterator.e(_context.t4);\n\n              case 30:\n                _context.prev = 30;\n\n                _iterator.f();\n\n                return _context.finish(30);\n\n              case 33:\n                return _context.abrupt(\"return\", postedTweets);\n\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 27, 30, 33]]);\n      }));\n\n      function tweetThread(_x) {\n        return _tweetThread.apply(this, arguments);\n      }\n\n      return tweetThread;\n    }()\n    /**\n     * Allows a user or authenticated user ID to delete a Tweet\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id\n     */\n\n  }, {\n    key: \"deleteTweet\",\n    value: function deleteTweet(tweetId) {\n      return this.delete('tweets/:id', undefined, {\n        params: {\n          id: tweetId\n        }\n      });\n    }\n    /* Bookmarks */\n\n    /**\n     * Causes the user ID of an authenticated user identified in the path parameter to Bookmark the target Tweet provided in the request body.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/post-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n\n  }, {\n    key: \"bookmark\",\n    value: function () {\n      var _bookmark = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tweetId) {\n        var user;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getCurrentUserV2Object();\n\n              case 2:\n                user = _context2.sent;\n                return _context2.abrupt(\"return\", this.post('users/:id/bookmarks', {\n                  tweet_id: tweetId\n                }, {\n                  params: {\n                    id: user.data.id\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function bookmark(_x2) {\n        return _bookmark.apply(this, arguments);\n      }\n\n      return bookmark;\n    }()\n    /**\n     * Allows a user or authenticated user ID to remove a Bookmark of a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/delete-users-id-bookmarks-tweet_id\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n\n  }, {\n    key: \"deleteBookmark\",\n    value: function () {\n      var _deleteBookmark = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tweetId) {\n        var user;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getCurrentUserV2Object();\n\n              case 2:\n                user = _context3.sent;\n                return _context3.abrupt(\"return\", this.delete('users/:id/bookmarks/:tweet_id', undefined, {\n                  params: {\n                    id: user.data.id,\n                    tweet_id: tweetId\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function deleteBookmark(_x3) {\n        return _deleteBookmark.apply(this, arguments);\n      }\n\n      return deleteBookmark;\n    }()\n    /* Users */\n\n    /**\n     * Allows a user ID to follow another user.\n     * If the target user does not have public Tweets, this endpoint will send a follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"follow\",\n    value: function follow(loggedUserId, targetUserId) {\n      return this.post('users/:id/following', {\n        target_user_id: targetUserId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows a user ID to unfollow another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"unfollow\",\n    value: function unfollow(loggedUserId, targetUserId) {\n      return this.delete('users/:source_user_id/following/:target_user_id', undefined, {\n        params: {\n          source_user_id: loggedUserId,\n          target_user_id: targetUserId\n        }\n      });\n    }\n    /**\n     * Causes the user (in the path) to block the target user.\n     * The user (in the path) must match the user context authorizing the request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"block\",\n    value: function block(loggedUserId, targetUserId) {\n      return this.post('users/:id/blocking', {\n        target_user_id: targetUserId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows a user or authenticated user ID to unblock another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"unblock\",\n    value: function unblock(loggedUserId, targetUserId) {\n      return this.delete('users/:source_user_id/blocking/:target_user_id', undefined, {\n        params: {\n          source_user_id: loggedUserId,\n          target_user_id: targetUserId\n        }\n      });\n    }\n    /**\n     * Allows an authenticated user ID to mute the target user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"mute\",\n    value: function mute(loggedUserId, targetUserId) {\n      return this.post('users/:id/muting', {\n        target_user_id: targetUserId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows an authenticated user ID to unmute the target user.\n     * The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n\n  }, {\n    key: \"unmute\",\n    value: function unmute(loggedUserId, targetUserId) {\n      return this.delete('users/:source_user_id/muting/:target_user_id', undefined, {\n        params: {\n          source_user_id: loggedUserId,\n          target_user_id: targetUserId\n        }\n      });\n    }\n    /* Lists */\n\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists\n     */\n\n  }, {\n    key: \"createList\",\n    value: function createList(options) {\n      return this.post('lists', options);\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id\n     */\n\n  }, {\n    key: \"updateList\",\n    value: function updateList(listId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.put('lists/:id', options, {\n        params: {\n          id: listId\n        }\n      });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id\n     */\n\n  }, {\n    key: \"removeList\",\n    value: function removeList(listId) {\n      return this.delete('lists/:id', undefined, {\n        params: {\n          id: listId\n        }\n      });\n    }\n    /**\n     * Adds a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists-id-members\n     */\n\n  }, {\n    key: \"addListMember\",\n    value: function addListMember(listId, userId) {\n      return this.post('lists/:id/members', {\n        user_id: userId\n      }, {\n        params: {\n          id: listId\n        }\n      });\n    }\n    /**\n     * Remember a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id-members-user_id\n     */\n\n  }, {\n    key: \"removeListMember\",\n    value: function removeListMember(listId, userId) {\n      return this.delete('lists/:id/members/:user_id', undefined, {\n        params: {\n          id: listId,\n          user_id: userId\n        }\n      });\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-followed-lists\n     */\n\n  }, {\n    key: \"subscribeToList\",\n    value: function subscribeToList(loggedUserId, listId) {\n      return this.post('users/:id/followed_lists', {\n        list_id: listId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Unsubscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-followed-lists-list_id\n     */\n\n  }, {\n    key: \"unsubscribeOfList\",\n    value: function unsubscribeOfList(loggedUserId, listId) {\n      return this.delete('users/:id/followed_lists/:list_id', undefined, {\n        params: {\n          id: loggedUserId,\n          list_id: listId\n        }\n      });\n    }\n    /**\n     * Enables the authenticated user to pin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-pinned-lists\n     */\n\n  }, {\n    key: \"pinList\",\n    value: function pinList(loggedUserId, listId) {\n      return this.post('users/:id/pinned_lists', {\n        list_id: listId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Enables the authenticated user to unpin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-pinned-lists-list_id\n     */\n\n  }, {\n    key: \"unpinList\",\n    value: function unpinList(loggedUserId, listId) {\n      return this.delete('users/:id/pinned_lists/:list_id', undefined, {\n        params: {\n          id: loggedUserId,\n          list_id: listId\n        }\n      });\n    }\n  }, {\n    key: \"readOnly\",\n    get: function get() {\n      return this;\n    }\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n\n  }, {\n    key: \"labs\",\n    get: function get() {\n      if (this._labs) return this._labs;\n      return this._labs = new client_v2_labs_write_1.default(this);\n    }\n  }]);\n\n  return TwitterApiv2ReadWrite;\n}(client_v2_read_1.default);\n\nexports.default = TwitterApiv2ReadWrite;","map":null,"metadata":{},"sourceType":"script"}