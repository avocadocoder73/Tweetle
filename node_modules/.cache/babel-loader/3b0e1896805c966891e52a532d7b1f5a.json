{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar Attr = require(\"./Attr.js\");\n\nvar ceReactionsPreSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPreSteps;\n\nvar ceReactionsPostSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPostSteps;\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\nvar interfaceName = \"NamedNodeMap\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (globalObject, value) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new globalObject.TypeError(\"\".concat(context, \" is not of type 'NamedNodeMap'.\"));\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  var proto;\n\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"NamedNodeMap\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nfunction makeProxy(wrapper, globalObject) {\n  var proxyHandler = proxyHandlerCache.get(globalObject);\n\n  if (proxyHandler === undefined) {\n    proxyHandler = new ProxyHandler(globalObject);\n    proxyHandlerCache.set(globalObject, proxyHandler);\n  }\n\n  return new Proxy(wrapper, proxyHandler);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper = makeProxy(wrapper, globalObject);\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject, newTarget) {\n  var wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper = makeProxy(wrapper, globalObject);\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  var _Object$definePropert;\n\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var ctorRegistry = utils.initCtorRegistry(globalObject);\n\n  var NamedNodeMap = /*#__PURE__*/function () {\n    function NamedNodeMap() {\n      _classCallCheck(this, NamedNodeMap);\n\n      throw new globalObject.TypeError(\"Illegal constructor\");\n    }\n\n    _createClass(NamedNodeMap, [{\n      key: \"item\",\n      value: function item(index) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'item' called on an object that is not a valid instance of NamedNodeMap.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'item' on 'NamedNodeMap': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"unsigned long\"](curArg, {\n            context: \"Failed to execute 'item' on 'NamedNodeMap': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).item.apply(_esValue$implSymbol, args));\n      }\n    }, {\n      key: \"getNamedItem\",\n      value: function getNamedItem(qualifiedName) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'getNamedItem' called on an object that is not a valid instance of NamedNodeMap.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'getNamedItem' on 'NamedNodeMap': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'getNamedItem' on 'NamedNodeMap': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol2 = esValue[implSymbol]).getNamedItem.apply(_esValue$implSymbol2, args));\n      }\n    }, {\n      key: \"getNamedItemNS\",\n      value: function getNamedItemNS(namespace, localName) {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'getNamedItemNS' called on an object that is not a valid instance of NamedNodeMap.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new globalObject.TypeError(\"Failed to execute 'getNamedItemNS' on 'NamedNodeMap': 2 arguments required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg === null || curArg === undefined) {\n            curArg = null;\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'getNamedItemNS' on 'NamedNodeMap': parameter 1\",\n              globals: globalObject\n            });\n          }\n\n          args.push(curArg);\n        }\n        {\n          var _curArg = arguments[1];\n          _curArg = conversions[\"DOMString\"](_curArg, {\n            context: \"Failed to execute 'getNamedItemNS' on 'NamedNodeMap': parameter 2\",\n            globals: globalObject\n          });\n          args.push(_curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol3 = esValue[implSymbol]).getNamedItemNS.apply(_esValue$implSymbol3, args));\n      }\n    }, {\n      key: \"setNamedItem\",\n      value: function setNamedItem(attr) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'setNamedItem' called on an object that is not a valid instance of NamedNodeMap.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'setNamedItem' on 'NamedNodeMap': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Attr.convert(globalObject, curArg, {\n            context: \"Failed to execute 'setNamedItem' on 'NamedNodeMap': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol4;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol4 = esValue[implSymbol]).setNamedItem.apply(_esValue$implSymbol4, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"setNamedItemNS\",\n      value: function setNamedItemNS(attr) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'setNamedItemNS' called on an object that is not a valid instance of NamedNodeMap.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'setNamedItemNS' on 'NamedNodeMap': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Attr.convert(globalObject, curArg, {\n            context: \"Failed to execute 'setNamedItemNS' on 'NamedNodeMap': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol5;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol5 = esValue[implSymbol]).setNamedItemNS.apply(_esValue$implSymbol5, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"removeNamedItem\",\n      value: function removeNamedItem(qualifiedName) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'removeNamedItem' called on an object that is not a valid instance of NamedNodeMap.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'removeNamedItem' on 'NamedNodeMap': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'removeNamedItem' on 'NamedNodeMap': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol6;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol6 = esValue[implSymbol]).removeNamedItem.apply(_esValue$implSymbol6, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"removeNamedItemNS\",\n      value: function removeNamedItemNS(namespace, localName) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'removeNamedItemNS' called on an object that is not a valid instance of NamedNodeMap.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new globalObject.TypeError(\"Failed to execute 'removeNamedItemNS' on 'NamedNodeMap': 2 arguments required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg === null || curArg === undefined) {\n            curArg = null;\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'removeNamedItemNS' on 'NamedNodeMap': parameter 1\",\n              globals: globalObject\n            });\n          }\n\n          args.push(curArg);\n        }\n        {\n          var _curArg2 = arguments[1];\n          _curArg2 = conversions[\"DOMString\"](_curArg2, {\n            context: \"Failed to execute 'removeNamedItemNS' on 'NamedNodeMap': parameter 2\",\n            globals: globalObject\n          });\n          args.push(_curArg2);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol7;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol7 = esValue[implSymbol]).removeNamedItemNS.apply(_esValue$implSymbol7, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"length\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get length' called on an object that is not a valid instance of NamedNodeMap.\");\n        }\n\n        return esValue[implSymbol][\"length\"];\n      }\n    }]);\n\n    return NamedNodeMap;\n  }();\n\n  Object.defineProperties(NamedNodeMap.prototype, (_Object$definePropert = {\n    item: {\n      enumerable: true\n    },\n    getNamedItem: {\n      enumerable: true\n    },\n    getNamedItemNS: {\n      enumerable: true\n    },\n    setNamedItem: {\n      enumerable: true\n    },\n    setNamedItemNS: {\n      enumerable: true\n    },\n    removeNamedItem: {\n      enumerable: true\n    },\n    removeNamedItemNS: {\n      enumerable: true\n    },\n    length: {\n      enumerable: true\n    }\n  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n    value: \"NamedNodeMap\",\n    configurable: true\n  }), _defineProperty(_Object$definePropert, Symbol.iterator, {\n    value: globalObject.Array.prototype[Symbol.iterator],\n    configurable: true,\n    writable: true\n  }), _Object$definePropert));\n  ctorRegistry[interfaceName] = NamedNodeMap;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: NamedNodeMap\n  });\n};\n\nvar proxyHandlerCache = new WeakMap();\n\nvar ProxyHandler = /*#__PURE__*/function () {\n  function ProxyHandler(globalObject) {\n    _classCallCheck(this, ProxyHandler);\n\n    this._globalObject = globalObject;\n  }\n\n  _createClass(ProxyHandler, [{\n    key: \"get\",\n    value: function get(target, P, receiver) {\n      if (typeof P === \"symbol\") {\n        return Reflect.get(target, P, receiver);\n      }\n\n      var desc = this.getOwnPropertyDescriptor(target, P);\n\n      if (desc === undefined) {\n        var parent = Object.getPrototypeOf(target);\n\n        if (parent === null) {\n          return undefined;\n        }\n\n        return Reflect.get(target, P, receiver);\n      }\n\n      if (!desc.get && !desc.set) {\n        return desc.value;\n      }\n\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return Reflect.apply(getter, receiver, []);\n    }\n  }, {\n    key: \"has\",\n    value: function has(target, P) {\n      if (typeof P === \"symbol\") {\n        return Reflect.has(target, P);\n      }\n\n      var desc = this.getOwnPropertyDescriptor(target, P);\n\n      if (desc !== undefined) {\n        return true;\n      }\n\n      var parent = Object.getPrototypeOf(target);\n\n      if (parent !== null) {\n        return Reflect.has(parent, P);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"ownKeys\",\n    value: function ownKeys(target) {\n      var keys = new Set();\n\n      var _iterator = _createForOfIteratorHelper(target[implSymbol][utils.supportedPropertyIndices]),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n          keys.add(\"\".concat(key));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(target[implSymbol][utils.supportedPropertyNames]),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _key = _step2.value;\n\n          if (!(_key in target)) {\n            keys.add(\"\".concat(_key));\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(Reflect.ownKeys(target)),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _key2 = _step3.value;\n          keys.add(_key2);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return _toConsumableArray(keys);\n    }\n  }, {\n    key: \"getOwnPropertyDescriptor\",\n    value: function getOwnPropertyDescriptor(target, P) {\n      if (typeof P === \"symbol\") {\n        return Reflect.getOwnPropertyDescriptor(target, P);\n      }\n\n      var ignoreNamedProps = false;\n\n      if (utils.isArrayIndexPropName(P)) {\n        var index = P >>> 0;\n        var indexedValue = target[implSymbol].item(index);\n\n        if (indexedValue !== null) {\n          return {\n            writable: false,\n            enumerable: true,\n            configurable: true,\n            value: utils.tryWrapperForImpl(indexedValue)\n          };\n        }\n\n        ignoreNamedProps = true;\n      }\n\n      var namedValue = target[implSymbol].getNamedItem(P);\n\n      if (namedValue !== null && !(P in target) && !ignoreNamedProps) {\n        return {\n          writable: false,\n          enumerable: false,\n          configurable: true,\n          value: utils.tryWrapperForImpl(namedValue)\n        };\n      }\n\n      return Reflect.getOwnPropertyDescriptor(target, P);\n    }\n  }, {\n    key: \"set\",\n    value: function set(target, P, V, receiver) {\n      if (typeof P === \"symbol\") {\n        return Reflect.set(target, P, V, receiver);\n      } // The `receiver` argument refers to the Proxy exotic object or an object\n      // that inherits from it, whereas `target` refers to the Proxy target:\n\n\n      if (target[implSymbol][utils.wrapperSymbol] === receiver) {\n        var globalObject = this._globalObject;\n      }\n\n      var ownDesc;\n\n      if (utils.isArrayIndexPropName(P)) {\n        var index = P >>> 0;\n        var indexedValue = target[implSymbol].item(index);\n\n        if (indexedValue !== null) {\n          ownDesc = {\n            writable: false,\n            enumerable: true,\n            configurable: true,\n            value: utils.tryWrapperForImpl(indexedValue)\n          };\n        }\n      }\n\n      if (ownDesc === undefined) {\n        ownDesc = Reflect.getOwnPropertyDescriptor(target, P);\n      }\n\n      if (ownDesc === undefined) {\n        var parent = Reflect.getPrototypeOf(target);\n\n        if (parent !== null) {\n          return Reflect.set(parent, P, V, receiver);\n        }\n\n        ownDesc = {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: undefined\n        };\n      }\n\n      if (!ownDesc.writable) {\n        return false;\n      }\n\n      if (!utils.isObject(receiver)) {\n        return false;\n      }\n\n      var existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);\n      var valueDesc;\n\n      if (existingDesc !== undefined) {\n        if (existingDesc.get || existingDesc.set) {\n          return false;\n        }\n\n        if (!existingDesc.writable) {\n          return false;\n        }\n\n        valueDesc = {\n          value: V\n        };\n      } else {\n        valueDesc = {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: V\n        };\n      }\n\n      return Reflect.defineProperty(receiver, P, valueDesc);\n    }\n  }, {\n    key: \"defineProperty\",\n    value: function defineProperty(target, P, desc) {\n      if (typeof P === \"symbol\") {\n        return Reflect.defineProperty(target, P, desc);\n      }\n\n      var globalObject = this._globalObject;\n\n      if (utils.isArrayIndexPropName(P)) {\n        return false;\n      }\n\n      if (!utils.hasOwn(target, P)) {\n        var creating = !(target[implSymbol].getNamedItem(P) !== null);\n\n        if (!creating) {\n          return false;\n        }\n      }\n\n      return Reflect.defineProperty(target, P, desc);\n    }\n  }, {\n    key: \"deleteProperty\",\n    value: function deleteProperty(target, P) {\n      if (typeof P === \"symbol\") {\n        return Reflect.deleteProperty(target, P);\n      }\n\n      var globalObject = this._globalObject;\n\n      if (utils.isArrayIndexPropName(P)) {\n        var index = P >>> 0;\n        return !(target[implSymbol].item(index) !== null);\n      }\n\n      if (target[implSymbol].getNamedItem(P) !== null && !(P in target)) {\n        return false;\n      }\n\n      return Reflect.deleteProperty(target, P);\n    }\n  }, {\n    key: \"preventExtensions\",\n    value: function preventExtensions() {\n      return false;\n    }\n  }]);\n\n  return ProxyHandler;\n}();\n\nvar Impl = require(\"../attributes/NamedNodeMap-impl.js\");","map":null,"metadata":{},"sourceType":"script"}