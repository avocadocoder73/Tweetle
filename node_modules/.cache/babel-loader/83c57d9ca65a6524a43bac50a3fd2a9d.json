{"ast":null,"code":"\"use strict\"; // https://infra.spec.whatwg.org/#sets\n//\n// Only use this class if a Set cannot be used, e.g. when \"replace\" operation is needed, since there's no way to replace\n// an element while keep the relative order using a Set, only remove and then add something at the end.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nmodule.exports = /*#__PURE__*/function () {\n  function OrderedSet() {\n    _classCallCheck(this, OrderedSet);\n\n    this._items = [];\n  }\n\n  _createClass(OrderedSet, [{\n    key: \"append\",\n    value: function append(item) {\n      if (!this.contains(item)) {\n        this._items.push(item);\n      }\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend(item) {\n      if (!this.contains(item)) {\n        this._items.unshift(item);\n      }\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(item, replacement) {\n      var seen = false;\n\n      for (var i = 0; i < this._items.length;) {\n        var isInstance = this._items[i] === item || this._items[i] === replacement;\n\n        if (seen && isInstance) {\n          this._items.splice(i, 1);\n        } else {\n          if (isInstance) {\n            this._items[i] = replacement;\n            seen = true;\n          }\n\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n        items[_key] = arguments[_key];\n      }\n\n      this.removePredicate(function (item) {\n        return items.includes(item);\n      });\n    }\n  }, {\n    key: \"removePredicate\",\n    value: function removePredicate(predicate) {\n      for (var i = 0; i < this._items.length;) {\n        if (predicate(this._items[i])) {\n          this._items.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      this._items.length = 0;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(item) {\n      return this._items.includes(item);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._items.length === 0;\n    } // Useful for other parts of jsdom\n\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this._items[Symbol.iterator]();\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this._items.keys();\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._items[index];\n    }\n  }, {\n    key: \"some\",\n    value: function some(func) {\n      return this._items.some(func);\n    } // https://dom.spec.whatwg.org/#concept-ordered-set-parser\n\n  }, {\n    key: \"serialize\",\n    // https://dom.spec.whatwg.org/#concept-ordered-set-serializer\n    value: function serialize() {\n      return this._items.join(\" \");\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._items.length;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(input) {\n      var tokens = new OrderedSet();\n\n      var _iterator = _createForOfIteratorHelper(input.split(/[\\t\\n\\f\\r ]+/)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var token = _step.value;\n\n          if (token) {\n            tokens.append(token);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return tokens;\n    }\n  }]);\n\n  return OrderedSet;\n}();","map":null,"metadata":{},"sourceType":"script"}