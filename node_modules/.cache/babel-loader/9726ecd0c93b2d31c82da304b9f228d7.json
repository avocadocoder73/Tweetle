{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _require = require(\"../generated/utils\"),\n    wrapperForImpl = _require.wrapperForImpl; // If we were to implement the MutationObserver by spec, the MutationObservers will not be collected by the GC because\n// all the MO are kept in a mutation observer list (https://github.com/jsdom/jsdom/pull/2398/files#r238123889). The\n// mutation observer list is primarily used to invoke the mutation observer callback in the same order than the\n// mutation observer creation.\n// In order to get around this issue, we will assign an increasing id for each mutation observer, this way we would be\n// able to invoke the callback in the creation order without having to keep a list of all the mutation observers.\n\n\nvar mutationObserverId = 0; // https://dom.spec.whatwg.org/#mutationobserver\n\nvar MutationObserverImpl = /*#__PURE__*/function () {\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-mutationobserver\n  function MutationObserverImpl(globalObject, args) {\n    _classCallCheck(this, MutationObserverImpl);\n\n    var _args = _slicedToArray(args, 1),\n        callback = _args[0];\n\n    this._callback = callback;\n    this._nodeList = [];\n    this._recordQueue = [];\n    this._id = ++mutationObserverId;\n  } // https://dom.spec.whatwg.org/#dom-mutationobserver-observe\n\n\n  _createClass(MutationObserverImpl, [{\n    key: \"observe\",\n    value: function observe(target, options) {\n      var _this = this;\n\n      if ((\"attributeOldValue\" in options || \"attributeFilter\" in options) && !(\"attributes\" in options)) {\n        options.attributes = true;\n      }\n\n      if (\"characterDataOldValue\" in options & !(\"characterData\" in options)) {\n        options.characterData = true;\n      }\n\n      if (!options.childList && !options.attributes && !options.characterData) {\n        throw new TypeError(\"The options object must set at least one of 'attributes', 'characterData', or 'childList' \" + \"to true.\");\n      } else if (options.attributeOldValue && !options.attributes) {\n        throw new TypeError(\"The options object may only set 'attributeOldValue' to true when 'attributes' is true or \" + \"not present.\");\n      } else if (\"attributeFilter\" in options && !options.attributes) {\n        throw new TypeError(\"The options object may only set 'attributeFilter' when 'attributes' is true or not \" + \"present.\");\n      } else if (options.characterDataOldValue && !options.characterData) {\n        throw new TypeError(\"The options object may only set 'characterDataOldValue' to true when 'characterData' is \" + \"true or not present.\");\n      }\n\n      var existingRegisteredObserver = target._registeredObserverList.find(function (registeredObserver) {\n        return registeredObserver.observer === _this;\n      });\n\n      if (existingRegisteredObserver) {\n        var _iterator = _createForOfIteratorHelper(this._nodeList),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value;\n            node._registeredObserverList = node._registeredObserverList.filter(function (registeredObserver) {\n              return registeredObserver.source !== existingRegisteredObserver;\n            });\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        existingRegisteredObserver.options = options;\n      } else {\n        target._registeredObserverList.push({\n          observer: this,\n          options: options\n        });\n\n        this._nodeList.push(target);\n      }\n    } // https://dom.spec.whatwg.org/#dom-mutationobserver-disconnect\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _this2 = this;\n\n      var _iterator2 = _createForOfIteratorHelper(this._nodeList),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var node = _step2.value;\n          node._registeredObserverList = node._registeredObserverList.filter(function (registeredObserver) {\n            return registeredObserver.observer !== _this2;\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this._recordQueue = [];\n    } // https://dom.spec.whatwg.org/#dom-mutationobserver-takerecords\n\n  }, {\n    key: \"takeRecords\",\n    value: function takeRecords() {\n      // TODO: revisit if https://github.com/jsdom/webidl2js/pull/108 gets fixed.\n      var records = this._recordQueue.map(wrapperForImpl);\n\n      this._recordQueue = [];\n      return records;\n    }\n  }]);\n\n  return MutationObserverImpl;\n}();\n\nmodule.exports = {\n  implementation: MutationObserverImpl\n};","map":null,"metadata":{},"sourceType":"script"}