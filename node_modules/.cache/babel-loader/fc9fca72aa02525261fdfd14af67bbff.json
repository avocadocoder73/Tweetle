{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncGeneratorDelegate = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncGeneratorDelegate\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TweetStream = void 0;\n\nvar events_1 = require(\"events\");\n\nvar request_handler_helper_1 = __importDefault(require(\"../client-mixins/request-handler.helper\"));\n\nvar types_1 = require(\"../types\");\n\nvar TweetStreamEventCombiner_1 = __importDefault(require(\"./TweetStreamEventCombiner\"));\n\nvar TweetStreamParser_1 = __importStar(require(\"./TweetStreamParser\")); // In seconds\n\n\nvar basicRetriesAttempt = [5, 15, 30, 60, 90, 120, 180, 300, 600, 900]; // Default retry function\n\nvar basicReconnectRetry = function basicReconnectRetry(tryOccurence) {\n  return tryOccurence > basicRetriesAttempt.length ? 901000 : basicRetriesAttempt[tryOccurence - 1] * 1000;\n};\n\nvar TweetStream = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(TweetStream, _events_1$EventEmitte);\n\n  function TweetStream(requestData, connection) {\n    var _this2;\n\n    _classCallCheck(this, TweetStream);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TweetStream).call(this));\n    _this2.requestData = requestData;\n    _this2.autoReconnect = false;\n    _this2.autoReconnectRetries = 5; // 2 minutes without any Twitter signal\n\n    _this2.keepAliveTimeoutMs = 1000 * 120;\n    _this2.nextRetryTimeout = basicReconnectRetry;\n    _this2.parser = new TweetStreamParser_1.default();\n    _this2.connectionProcessRunning = false;\n    _this2.onKeepAliveTimeout = _this2.onKeepAliveTimeout.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n\n    _this2.initEventsFromParser();\n\n    if (connection) {\n      _this2.req = connection.req;\n      _this2.res = connection.res;\n      _this2.originalResponse = connection.originalResponse;\n\n      _this2.initEventsFromRequest();\n    }\n\n    return _this2;\n  }\n\n  _createClass(TweetStream, [{\n    key: \"on\",\n    value: function on(event, handler) {\n      return _get(_getPrototypeOf(TweetStream.prototype), \"on\", this).call(this, event, handler);\n    }\n  }, {\n    key: \"initEventsFromRequest\",\n    value: function initEventsFromRequest() {\n      var _this3 = this;\n\n      if (!this.req || !this.res) {\n        throw new Error('TweetStream error: You cannot init TweetStream without a request and response object.');\n      }\n\n      var errorHandler = function errorHandler(err) {\n        _this3.emit(types_1.ETwitterStreamEvent.ConnectionError, err);\n\n        _this3.emit(types_1.ETwitterStreamEvent.Error, {\n          type: types_1.ETwitterStreamEvent.ConnectionError,\n          error: err,\n          message: 'Connection lost or closed by Twitter.'\n        });\n\n        _this3.onConnectionError();\n      };\n\n      this.req.on('error', errorHandler);\n      this.res.on('error', errorHandler); // Usually, connection should not be closed by Twitter!\n\n      this.res.on('close', function () {\n        return errorHandler(new Error('Connection closed by Twitter.'));\n      });\n      this.res.on('data', function (chunk) {\n        _this3.resetKeepAliveTimeout();\n\n        if (chunk.toString() === '\\r\\n') {\n          return _this3.emit(types_1.ETwitterStreamEvent.DataKeepAlive);\n        }\n\n        _this3.parser.push(chunk.toString());\n      }); // Starts the keep alive timeout\n\n      this.resetKeepAliveTimeout();\n    }\n  }, {\n    key: \"initEventsFromParser\",\n    value: function initEventsFromParser() {\n      var _this4 = this;\n\n      var payloadIsError = this.requestData.payloadIsError;\n      this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParsedData, function (eventData) {\n        if (payloadIsError && payloadIsError(eventData)) {\n          _this4.emit(types_1.ETwitterStreamEvent.DataError, eventData);\n\n          _this4.emit(types_1.ETwitterStreamEvent.Error, {\n            type: types_1.ETwitterStreamEvent.DataError,\n            error: eventData,\n            message: 'Twitter sent a payload that is detected as an error payload.'\n          });\n        } else {\n          _this4.emit(types_1.ETwitterStreamEvent.Data, eventData);\n        }\n      });\n      this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParseError, function (error) {\n        _this4.emit(types_1.ETwitterStreamEvent.TweetParseError, error);\n\n        _this4.emit(types_1.ETwitterStreamEvent.Error, {\n          type: types_1.ETwitterStreamEvent.TweetParseError,\n          error: error,\n          message: 'Failed to parse stream data.'\n        });\n      });\n    }\n  }, {\n    key: \"resetKeepAliveTimeout\",\n    value: function resetKeepAliveTimeout() {\n      this.unbindKeepAliveTimeout();\n\n      if (this.keepAliveTimeoutMs !== Infinity) {\n        this.keepAliveTimeout = setTimeout(this.onKeepAliveTimeout, this.keepAliveTimeoutMs);\n      }\n    }\n  }, {\n    key: \"onKeepAliveTimeout\",\n    value: function onKeepAliveTimeout() {\n      this.emit(types_1.ETwitterStreamEvent.ConnectionLost);\n      this.onConnectionError();\n    }\n  }, {\n    key: \"unbindTimeouts\",\n    value: function unbindTimeouts() {\n      this.unbindRetryTimeout();\n      this.unbindKeepAliveTimeout();\n    }\n  }, {\n    key: \"unbindKeepAliveTimeout\",\n    value: function unbindKeepAliveTimeout() {\n      if (this.keepAliveTimeout) {\n        clearTimeout(this.keepAliveTimeout);\n        this.keepAliveTimeout = undefined;\n      }\n    }\n  }, {\n    key: \"unbindRetryTimeout\",\n    value: function unbindRetryTimeout() {\n      if (this.retryTimeout) {\n        clearTimeout(this.retryTimeout);\n        this.retryTimeout = undefined;\n      }\n    }\n  }, {\n    key: \"closeWithoutEmit\",\n    value: function closeWithoutEmit() {\n      this.unbindTimeouts();\n\n      if (this.res) {\n        this.res.removeAllListeners(); // Close response silentely\n\n        this.res.destroy();\n      }\n\n      if (this.req) {\n        this.req.removeAllListeners(); // Close connection silentely\n\n        this.req.destroy();\n      }\n    }\n    /** Terminate connection to Twitter. */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n      this.closeWithoutEmit();\n    }\n    /** Unbind all listeners, and close connection. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.removeAllListeners();\n      this.close();\n    }\n    /**\n     * Make a new request that creates a new `TweetStream` instance with\n     * the same parameters, and bind current listeners to new stream.\n     */\n\n  }, {\n    key: \"clone\",\n    value: function () {\n      var _clone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var newRequest, newStream, listenerNames, _iterator, _step, listener, callbacks, _iterator2, _step2, callback;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                newRequest = new request_handler_helper_1.default(this.requestData);\n                _context.next = 3;\n                return newRequest.makeRequestAsStream();\n\n              case 3:\n                newStream = _context.sent;\n                // Clone attached listeners\n                listenerNames = this.eventNames();\n                _iterator = _createForOfIteratorHelper(listenerNames);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    listener = _step.value;\n                    callbacks = this.listeners(listener);\n                    _iterator2 = _createForOfIteratorHelper(callbacks);\n\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        callback = _step2.value;\n                        newStream.on(listener, callback);\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context.abrupt(\"return\", newStream);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function clone() {\n        return _clone.apply(this, arguments);\n      }\n\n      return clone;\n    }()\n    /** Start initial stream connection, setup options on current instance and returns itself. */\n\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var options,\n            _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n                if (typeof options.autoReconnect !== 'undefined') {\n                  this.autoReconnect = options.autoReconnect;\n                }\n\n                if (typeof options.autoReconnectRetries !== 'undefined') {\n                  this.autoReconnectRetries = options.autoReconnectRetries === 'unlimited' ? Infinity : options.autoReconnectRetries;\n                }\n\n                if (typeof options.keepAliveTimeout !== 'undefined') {\n                  this.keepAliveTimeoutMs = options.keepAliveTimeout === 'disable' ? Infinity : options.keepAliveTimeout;\n                }\n\n                if (typeof options.nextRetryTimeout !== 'undefined') {\n                  this.nextRetryTimeout = options.nextRetryTimeout;\n                } // Make the connection\n\n\n                this.unbindTimeouts();\n                _context2.prev = 6;\n                _context2.next = 9;\n                return this.reconnect();\n\n              case 9:\n                _context2.next = 20;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](6);\n                this.emit(types_1.ETwitterStreamEvent.ConnectError, 0);\n                this.emit(types_1.ETwitterStreamEvent.Error, {\n                  type: types_1.ETwitterStreamEvent.ConnectError,\n                  error: _context2.t0,\n                  message: 'Connect error - Initial connection just failed.'\n                }); // Only make a reconnection attempt if autoReconnect is true!\n                // Otherwise, let error be propagated\n\n                if (!this.autoReconnect) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                this.makeAutoReconnectRetry(0, _context2.t0);\n                _context2.next = 20;\n                break;\n\n              case 19:\n                throw _context2.t0;\n\n              case 20:\n                return _context2.abrupt(\"return\", this);\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 11]]);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n    /** Make a new request to (re)connect to Twitter. */\n\n  }, {\n    key: \"reconnect\",\n    value: function () {\n      var _reconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var initialConnection, _yield$request_handle, req, res, originalResponse;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.connectionProcessRunning) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('Connection process is already running.');\n\n              case 2:\n                this.connectionProcessRunning = true;\n                _context3.prev = 3;\n                initialConnection = true;\n\n                if (this.req) {\n                  initialConnection = false;\n                  this.closeWithoutEmit();\n                }\n\n                _context3.next = 8;\n                return new request_handler_helper_1.default(this.requestData).makeRequestAndResolveWhenReady();\n\n              case 8:\n                _yield$request_handle = _context3.sent;\n                req = _yield$request_handle.req;\n                res = _yield$request_handle.res;\n                originalResponse = _yield$request_handle.originalResponse;\n                this.req = req;\n                this.res = res;\n                this.originalResponse = originalResponse;\n                this.emit(initialConnection ? types_1.ETwitterStreamEvent.Connected : types_1.ETwitterStreamEvent.Reconnected);\n                this.parser.reset();\n                this.initEventsFromRequest();\n\n              case 18:\n                _context3.prev = 18;\n                this.connectionProcessRunning = false;\n                return _context3.finish(18);\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3,, 18, 21]]);\n      }));\n\n      function reconnect() {\n        return _reconnect.apply(this, arguments);\n      }\n\n      return reconnect;\n    }()\n  }, {\n    key: \"onConnectionError\",\n    value: function () {\n      var _onConnectionError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var retryOccurence,\n            _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                retryOccurence = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 0;\n                this.unbindTimeouts(); // Close the request if necessary\n\n                this.closeWithoutEmit(); // Terminate stream by events if necessary (no auto-reconnect or retries exceeded)\n\n                if (this.autoReconnect) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n                return _context4.abrupt(\"return\");\n\n              case 6:\n                if (!(retryOccurence >= this.autoReconnectRetries)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                this.emit(types_1.ETwitterStreamEvent.ReconnectLimitExceeded);\n                this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n                return _context4.abrupt(\"return\");\n\n              case 10:\n                _context4.prev = 10;\n                this.emit(types_1.ETwitterStreamEvent.ReconnectAttempt, retryOccurence);\n                _context4.next = 14;\n                return this.reconnect();\n\n              case 14:\n                _context4.next = 21;\n                break;\n\n              case 16:\n                _context4.prev = 16;\n                _context4.t0 = _context4[\"catch\"](10);\n                this.emit(types_1.ETwitterStreamEvent.ReconnectError, retryOccurence);\n                this.emit(types_1.ETwitterStreamEvent.Error, {\n                  type: types_1.ETwitterStreamEvent.ReconnectError,\n                  error: _context4.t0,\n                  message: \"Reconnect error - \".concat(retryOccurence + 1, \" attempts made yet.\")\n                });\n                this.makeAutoReconnectRetry(retryOccurence, _context4.t0);\n\n              case 21:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[10, 16]]);\n      }));\n\n      function onConnectionError() {\n        return _onConnectionError.apply(this, arguments);\n      }\n\n      return onConnectionError;\n    }()\n  }, {\n    key: \"makeAutoReconnectRetry\",\n    value: function makeAutoReconnectRetry(retryOccurence, error) {\n      var _this5 = this;\n\n      var nextRetry = this.nextRetryTimeout(retryOccurence + 1, error);\n      this.retryTimeout = setTimeout(function () {\n        _this5.onConnectionError(retryOccurence + 1);\n      }, nextRetry);\n    }\n  }, {\n    key: Symbol.asyncIterator,\n    value: function value() {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var eventCombiner, _yield$_awaitAsyncGen, type, payload;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                eventCombiner = new TweetStreamEventCombiner_1.default(_this);\n                _context5.prev = 1;\n\n              case 2:\n                if (!true) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                if (!(!_this.req || _this.req.aborted)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw new Error('Connection closed');\n\n              case 5:\n                if (!eventCombiner.hasStack()) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                return _context5.delegateYield(_asyncGeneratorDelegate(_asyncIterator(eventCombiner.popStack()), _awaitAsyncGenerator), \"t0\", 7);\n\n              case 7:\n                _context5.next = 9;\n                return _awaitAsyncGenerator(eventCombiner.nextEvent());\n\n              case 9:\n                _yield$_awaitAsyncGen = _context5.sent;\n                type = _yield$_awaitAsyncGen.type;\n                payload = _yield$_awaitAsyncGen.payload;\n\n                if (!(type === 'error')) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                throw payload;\n\n              case 14:\n                _context5.next = 2;\n                break;\n\n              case 16:\n                _context5.prev = 16;\n                eventCombiner.destroy();\n                return _context5.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1,, 16, 19]]);\n      }))();\n    }\n  }]);\n\n  return TweetStream;\n}(events_1.EventEmitter);\n\nexports.TweetStream = TweetStream;\nexports.default = TweetStream;","map":null,"metadata":{},"sourceType":"script"}