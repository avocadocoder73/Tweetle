{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _require = require(\"./internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar _require2 = require(\"./namespaces\"),\n    HTML_NS = _require2.HTML_NS; // All these operate on and return impls, not wrappers!\n\n\nexports.closest = function (e, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === namespace) {\n      return e;\n    }\n\n    e = domSymbolTree.parent(e);\n  }\n\n  return null;\n};\n\nexports.childrenByLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.childrenToArray(parent, {\n    filter: function filter(node) {\n      return node._localName === localName && node._namespaceURI === namespace;\n    }\n  });\n};\n\nexports.descendantsByLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.treeToArray(parent, {\n    filter: function filter(node) {\n      return node._localName === localName && node._namespaceURI === namespace && node !== parent;\n    }\n  });\n};\n\nexports.childrenByLocalNames = function (parent, localNamesSet) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.childrenToArray(parent, {\n    filter: function filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === namespace;\n    }\n  });\n};\n\nexports.descendantsByLocalNames = function (parent, localNamesSet) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.treeToArray(parent, {\n    filter: function filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === namespace && node !== parent;\n    }\n  });\n};\n\nexports.firstChildWithLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  var iterator = domSymbolTree.childrenIterator(parent);\n\n  var _iterator = _createForOfIteratorHelper(iterator),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n\n      if (child._localName === localName && child._namespaceURI === namespace) {\n        return child;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return null;\n};\n\nexports.firstChildWithLocalNames = function (parent, localNamesSet) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  var iterator = domSymbolTree.childrenIterator(parent);\n\n  var _iterator2 = _createForOfIteratorHelper(iterator),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var child = _step2.value;\n\n      if (localNamesSet.has(child._localName) && child._namespaceURI === namespace) {\n        return child;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return null;\n};\n\nexports.firstDescendantWithLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  var iterator = domSymbolTree.treeIterator(parent);\n\n  var _iterator3 = _createForOfIteratorHelper(iterator),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var descendant = _step3.value;\n\n      if (descendant._localName === localName && descendant._namespaceURI === namespace) {\n        return descendant;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return null;\n};","map":null,"metadata":{},"sourceType":"script"}