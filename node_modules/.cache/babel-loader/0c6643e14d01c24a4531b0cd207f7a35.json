{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TweetStreamEventCombiner = void 0;\n\nvar events_1 = require(\"events\");\n\nvar types_1 = require(\"../types\");\n\nvar TweetStreamEventCombiner = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(TweetStreamEventCombiner, _events_1$EventEmitte);\n\n  function TweetStreamEventCombiner(stream) {\n    var _this;\n\n    _classCallCheck(this, TweetStreamEventCombiner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TweetStreamEventCombiner).call(this));\n    _this.stream = stream;\n    _this.stack = [];\n    _this.onStreamData = _this.onStreamData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onStreamError = _this.onStreamError.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onceNewEvent = _this.once.bind(_assertThisInitialized(_assertThisInitialized(_this)), 'event'); // Init events from stream\n\n    stream.on(types_1.ETwitterStreamEvent.Data, _this.onStreamData); // Ignore reconnect errors: Don't close event combiner until connection error/closed\n\n    stream.on(types_1.ETwitterStreamEvent.ConnectionError, _this.onStreamError);\n    stream.on(types_1.ETwitterStreamEvent.TweetParseError, _this.onStreamError);\n    stream.on(types_1.ETwitterStreamEvent.ConnectionClosed, _this.onStreamError);\n    return _this;\n  }\n  /** Returns a new `Promise` that will `resolve` on next event (`data` or any sort of error). */\n\n\n  _createClass(TweetStreamEventCombiner, [{\n    key: \"nextEvent\",\n    value: function nextEvent() {\n      return new Promise(this.onceNewEvent);\n    }\n    /** Returns `true` if there's something in the stack. */\n\n  }, {\n    key: \"hasStack\",\n    value: function hasStack() {\n      return this.stack.length > 0;\n    }\n    /** Returns stacked data events, and clean the stack. */\n\n  }, {\n    key: \"popStack\",\n    value: function popStack() {\n      var stack = this.stack;\n      this.stack = [];\n      return stack;\n    }\n    /** Cleanup all the listeners attached on stream. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.removeAllListeners();\n      this.stream.off(types_1.ETwitterStreamEvent.Data, this.onStreamData);\n      this.stream.off(types_1.ETwitterStreamEvent.ConnectionError, this.onStreamError);\n      this.stream.off(types_1.ETwitterStreamEvent.TweetParseError, this.onStreamError);\n      this.stream.off(types_1.ETwitterStreamEvent.ConnectionClosed, this.onStreamError);\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(type, payload) {\n      this.emit('event', {\n        type: type,\n        payload: payload\n      });\n    }\n  }, {\n    key: \"onStreamError\",\n    value: function onStreamError(payload) {\n      this.emitEvent('error', payload);\n    }\n  }, {\n    key: \"onStreamData\",\n    value: function onStreamData(payload) {\n      this.stack.push(payload);\n      this.emitEvent('data', payload);\n    }\n  }]);\n\n  return TweetStreamEventCombiner;\n}(events_1.EventEmitter);\n\nexports.TweetStreamEventCombiner = TweetStreamEventCombiner;\nexports.default = TweetStreamEventCombiner;","map":null,"metadata":{},"sourceType":"script"}