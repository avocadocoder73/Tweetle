{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _require = require(\"../helpers/create-event-accessor\"),\n    appendHandler = _require.appendHandler,\n    createEventAccessor = _require.createEventAccessor;\n\nvar events = new Set([\"abort\", \"autocomplete\", \"autocompleteerror\", \"blur\", \"cancel\", \"canplay\", \"canplaythrough\", \"change\", \"click\", \"close\", \"contextmenu\", \"cuechange\", \"dblclick\", \"drag\", \"dragend\", \"dragenter\", \"dragleave\", \"dragover\", \"dragstart\", \"drop\", \"durationchange\", \"emptied\", \"ended\", \"error\", \"focus\", \"input\", \"invalid\", \"keydown\", \"keypress\", \"keyup\", \"load\", \"loadeddata\", \"loadedmetadata\", \"loadstart\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"wheel\", \"pause\", \"play\", \"playing\", \"progress\", \"ratechange\", \"reset\", \"resize\", \"scroll\", \"securitypolicyviolation\", \"seeked\", \"seeking\", \"select\", \"sort\", \"stalled\", \"submit\", \"suspend\", \"timeupdate\", \"toggle\", \"volumechange\", \"waiting\"]);\n\nvar GlobalEventHandlersImpl = /*#__PURE__*/function () {\n  function GlobalEventHandlersImpl() {\n    _classCallCheck(this, GlobalEventHandlersImpl);\n  }\n\n  _createClass(GlobalEventHandlersImpl, [{\n    key: \"_initGlobalEvents\",\n    value: function _initGlobalEvents() {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n  }, {\n    key: \"_getEventHandlerTarget\",\n    value: function _getEventHandlerTarget() {\n      return this;\n    }\n  }, {\n    key: \"_getEventHandlerFor\",\n    value: function _getEventHandlerFor(event) {\n      var target = this._getEventHandlerTarget(event);\n\n      if (!target) {\n        return null;\n      }\n\n      return target._eventHandlers[event];\n    }\n  }, {\n    key: \"_setEventHandlerFor\",\n    value: function _setEventHandlerFor(event, handler) {\n      var target = this._getEventHandlerTarget(event);\n\n      if (!target) {\n        return;\n      }\n\n      if (!target._registeredHandlers.has(event) && handler !== null) {\n        target._registeredHandlers.add(event);\n\n        appendHandler(target, event);\n      }\n\n      target._eventHandlers[event] = handler;\n    }\n  }, {\n    key: \"_globalEventChanged\",\n    value: function _globalEventChanged(event) {\n      var propName = \"on\" + event;\n\n      if (!(propName in this)) {\n        return;\n      } // Only translate attribute changes into properties when runScripts: \"dangerously\" is set.\n      // Documents without a browsing context (i.e. without a _defaultView) never run scripts.\n\n\n      var runScripts = \"_runScripts\" in this ? this._runScripts : (this._ownerDocument._defaultView || {})._runScripts;\n\n      if (runScripts !== \"dangerously\") {\n        return;\n      }\n\n      var val = this.getAttributeNS(null, propName);\n      var handler = val === null ? null : {\n        body: val\n      };\n\n      this._setEventHandlerFor(event, handler);\n    }\n  }]);\n\n  return GlobalEventHandlersImpl;\n}();\n\nvar _iterator = _createForOfIteratorHelper(events),\n    _step;\n\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    var event = _step.value;\n    createEventAccessor(GlobalEventHandlersImpl.prototype, event);\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\n\nmodule.exports = {\n  implementation: GlobalEventHandlersImpl\n};","map":null,"metadata":{},"sourceType":"script"}