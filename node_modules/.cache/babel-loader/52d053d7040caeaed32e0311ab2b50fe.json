{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar globals_1 = require(\"../globals\");\n\nvar client_v1_read_1 = __importDefault(require(\"./client.v1.read\"));\n\nvar types_1 = require(\"../types\");\n\nvar fs = __importStar(require(\"fs\"));\n\nvar media_helpers_v1_1 = require(\"./media-helpers.v1\");\n\nvar helpers_1 = require(\"../helpers\");\n\nvar UPLOAD_ENDPOINT = 'media/upload.json';\n/**\n * Base Twitter v1 client with read/write rights.\n */\n\nvar TwitterApiv1ReadWrite = /*#__PURE__*/function (_client_v1_read_1$def) {\n  _inherits(TwitterApiv1ReadWrite, _client_v1_read_1$def);\n\n  function TwitterApiv1ReadWrite() {\n    var _this;\n\n    _classCallCheck(this, TwitterApiv1ReadWrite);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterApiv1ReadWrite).apply(this, arguments));\n    _this._prefix = globals_1.API_V1_1_PREFIX;\n    return _this;\n  }\n  /**\n   * Get a client with only read rights.\n   */\n\n\n  _createClass(TwitterApiv1ReadWrite, [{\n    key: \"tweet\",\n\n    /* Tweet API */\n\n    /**\n     * Post a new tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    value: function tweet(status) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var queryParams = _objectSpread({\n        status: status,\n        tweet_mode: 'extended'\n      }, payload);\n\n      return this.post('statuses/update.json', queryParams);\n    }\n    /**\n     * Quote an existing tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n\n  }, {\n    key: \"quote\",\n    value: function () {\n      var _quote = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(status, quotingStatusId) {\n        var payload,\n            url,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                payload = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                url = 'https://twitter.com/i/statuses/' + quotingStatusId;\n                return _context.abrupt(\"return\", this.tweet(status, _objectSpread({}, payload, {\n                  attachment_url: url\n                })));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function quote(_x, _x2) {\n        return _quote.apply(this, arguments);\n      }\n\n      return quote;\n    }()\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n\n  }, {\n    key: \"tweetThread\",\n    value: function () {\n      var _tweetThread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tweets) {\n        var postedTweets, _iterator, _step, tweet, lastTweet, queryParams, inReplyToId, status;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                postedTweets = [];\n                _iterator = _createForOfIteratorHelper(tweets);\n                _context2.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                tweet = _step.value;\n                // Retrieve the last sent tweet\n                lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null; // Build the tweet query params\n\n                queryParams = _objectSpread({}, typeof tweet === 'string' ? {\n                  status: tweet\n                } : tweet); // Reply to an existing tweet if needed\n\n                inReplyToId = lastTweet ? lastTweet.id_str : queryParams.in_reply_to_status_id;\n                status = queryParams.status;\n\n                if (!inReplyToId) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.t0 = postedTweets;\n                _context2.next = 14;\n                return this.reply(status, inReplyToId, queryParams);\n\n              case 14:\n                _context2.t1 = _context2.sent;\n\n                _context2.t0.push.call(_context2.t0, _context2.t1);\n\n                _context2.next = 23;\n                break;\n\n              case 18:\n                _context2.t2 = postedTweets;\n                _context2.next = 21;\n                return this.tweet(status, queryParams);\n\n              case 21:\n                _context2.t3 = _context2.sent;\n\n                _context2.t2.push.call(_context2.t2, _context2.t3);\n\n              case 23:\n                _context2.next = 4;\n                break;\n\n              case 25:\n                _context2.next = 30;\n                break;\n\n              case 27:\n                _context2.prev = 27;\n                _context2.t4 = _context2[\"catch\"](2);\n\n                _iterator.e(_context2.t4);\n\n              case 30:\n                _context2.prev = 30;\n\n                _iterator.f();\n\n                return _context2.finish(30);\n\n              case 33:\n                return _context2.abrupt(\"return\", postedTweets);\n\n              case 34:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 27, 30, 33]]);\n      }));\n\n      function tweetThread(_x3) {\n        return _tweetThread.apply(this, arguments);\n      }\n\n      return tweetThread;\n    }()\n    /**\n     * Reply to an existing tweet. Shortcut to `.tweet` with tweaked parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n\n  }, {\n    key: \"reply\",\n    value: function reply(status, in_reply_to_status_id) {\n      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.tweet(status, _objectSpread({\n        auto_populate_reply_metadata: true,\n        in_reply_to_status_id: in_reply_to_status_id\n      }, payload));\n    }\n    /**\n     * Delete an existing tweet belonging to you.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n     */\n\n  }, {\n    key: \"deleteTweet\",\n    value: function deleteTweet(tweetId) {\n      return this.post('statuses/destroy/:id.json', {\n        tweet_mode: 'extended'\n      }, {\n        params: {\n          id: tweetId\n        }\n      });\n    }\n    /* User API */\n\n    /**\n     * Report the specified user as a spam account to Twitter.\n     * Additionally, optionally performs the equivalent of POST blocks/create on behalf of the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam\n     */\n\n  }, {\n    key: \"reportUserAsSpam\",\n    value: function reportUserAsSpam(options) {\n      return this.post('users/report_spam.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Turn on/off Retweets and device notifications from the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update\n     */\n\n  }, {\n    key: \"updateFriendship\",\n    value: function updateFriendship(options) {\n      return this.post('friendships/update.json', options);\n    }\n    /* Account API */\n\n    /**\n     * Update current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n\n  }, {\n    key: \"updateAccountSettings\",\n    value: function updateAccountSettings(options) {\n      return this.post('account/settings.json', options);\n    }\n    /**\n     * Sets some values that users are able to set under the \"Account\" tab of their settings page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile\n     */\n\n  }, {\n    key: \"updateAccountProfile\",\n    value: function updateAccountProfile(options) {\n      return this.post('account/update_profile.json', options);\n    }\n    /**\n     * Uploads a profile banner on behalf of the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner\n     */\n\n  }, {\n    key: \"updateAccountProfileBanner\",\n    value: function () {\n      var _updateAccountProfileBanner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(file) {\n        var options,\n            queryParams,\n            _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                _context3.t0 = _objectSpread;\n                _context3.next = 4;\n                return (0, media_helpers_v1_1.readFileIntoBuffer)(file);\n\n              case 4:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = {\n                  banner: _context3.t1\n                };\n                _context3.t3 = options;\n                queryParams = (0, _context3.t0)(_context3.t2, _context3.t3);\n                return _context3.abrupt(\"return\", this.post('account/update_profile_banner.json', queryParams, {\n                  forceBodyMode: 'form-data'\n                }));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateAccountProfileBanner(_x4) {\n        return _updateAccountProfileBanner.apply(this, arguments);\n      }\n\n      return updateAccountProfileBanner;\n    }()\n    /**\n     * Updates the authenticating user's profile image.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image\n     */\n\n  }, {\n    key: \"updateAccountProfileImage\",\n    value: function () {\n      var _updateAccountProfileImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(file) {\n        var options,\n            queryParams,\n            _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                _context4.t0 = _objectSpread;\n                _context4.next = 4;\n                return (0, media_helpers_v1_1.readFileIntoBuffer)(file);\n\n              case 4:\n                _context4.t1 = _context4.sent;\n                _context4.t2 = {\n                  tweet_mode: 'extended',\n                  image: _context4.t1\n                };\n                _context4.t3 = options;\n                queryParams = (0, _context4.t0)(_context4.t2, _context4.t3);\n                return _context4.abrupt(\"return\", this.post('account/update_profile_image.json', queryParams, {\n                  forceBodyMode: 'form-data'\n                }));\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function updateAccountProfileImage(_x5) {\n        return _updateAccountProfileImage.apply(this, arguments);\n      }\n\n      return updateAccountProfileImage;\n    }()\n    /**\n     * Removes the uploaded profile banner for the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner\n     */\n\n  }, {\n    key: \"removeAccountProfileBanner\",\n    value: function removeAccountProfileBanner() {\n      return this.post('account/remove_profile_banner.json');\n    }\n    /* Lists */\n\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-create\n     */\n\n  }, {\n    key: \"createList\",\n    value: function createList(options) {\n      return this.post('lists/create.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-update\n     */\n\n  }, {\n    key: \"updateList\",\n    value: function updateList(options) {\n      return this.post('lists/update.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy\n     */\n\n  }, {\n    key: \"removeList\",\n    value: function removeList(options) {\n      return this.post('lists/destroy.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/create.json`, otherwise\n     * it will target `lists/members/create_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all\n     */\n\n  }, {\n    key: \"addListMembers\",\n    value: function addListMembers(options) {\n      var hasMultiple = options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id) || options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name);\n      var endpoint = hasMultiple ? 'lists/members/create_all.json' : 'lists/members/create.json';\n      return this.post(endpoint, options);\n    }\n    /**\n     * Removes multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/destroy.json`, otherwise\n     * it will target `lists/members/destroy_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all\n     */\n\n  }, {\n    key: \"removeListMembers\",\n    value: function removeListMembers(options) {\n      var hasMultiple = options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id) || options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name);\n      var endpoint = hasMultiple ? 'lists/members/destroy_all.json' : 'lists/members/destroy.json';\n      return this.post(endpoint, options);\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create\n     */\n\n  }, {\n    key: \"subscribeToList\",\n    value: function subscribeToList(options) {\n      return this.post('lists/subscribers/create.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Unsubscribes the authenticated user of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy\n     */\n\n  }, {\n    key: \"unsubscribeOfList\",\n    value: function unsubscribeOfList(options) {\n      return this.post('lists/subscribers/destroy.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /* Media upload API */\n\n    /**\n     * This endpoint can be used to provide additional information about the uploaded media_id.\n     * This feature is currently only supported for images and GIFs.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-metadata-create\n     */\n\n  }, {\n    key: \"createMediaMetadata\",\n    value: function createMediaMetadata(mediaId, metadata) {\n      return this.post('media/metadata/create.json', _objectSpread({\n        media_id: mediaId\n      }, metadata), {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n        forceBodyMode: 'json'\n      });\n    }\n    /**\n     * Use this endpoint to associate uploaded subtitles to an uploaded video. You can associate subtitles to video before or after Tweeting.\n     * **To obtain subtitle media ID, you must upload each subtitle file separately using `.uploadMedia()` method.**\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-create\n     */\n\n  }, {\n    key: \"createMediaSubtitles\",\n    value: function createMediaSubtitles(mediaId, subtitles) {\n      return this.post('media/subtitles/create.json', {\n        media_id: mediaId,\n        media_category: 'TweetVideo',\n        subtitle_info: {\n          subtitles: subtitles\n        }\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n        forceBodyMode: 'json'\n      });\n    }\n    /**\n     * Use this endpoint to dissociate subtitles from a video and delete the subtitles. You can dissociate subtitles from a video before or after Tweeting.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-delete\n     */\n\n  }, {\n    key: \"deleteMediaSubtitles\",\n    value: function deleteMediaSubtitles(mediaId) {\n      for (var _len = arguments.length, languages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        languages[_key - 1] = arguments[_key];\n      }\n\n      return this.post('media/subtitles/delete.json', {\n        media_id: mediaId,\n        media_category: 'TweetVideo',\n        subtitle_info: {\n          subtitles: languages.map(function (lang) {\n            return {\n              language_code: lang\n            };\n          })\n        }\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n        forceBodyMode: 'json'\n      });\n    }\n    /**\n     * Upload a media (JPG/PNG/GIF/MP4/WEBP) or subtitle (SRT) to Twitter and return the media_id to use in tweet/DM send.\n     *\n     * @param file If `string`, filename is supposed.\n     * A `Buffer` is a raw file.\n     * `fs.promises.FileHandle` or `number` are file pointers.\n     *\n     * @param options.type File type (Enum 'jpg' | 'longmp4' | 'mp4' | 'png' | 'gif' | 'srt' | 'webp').\n     * If filename is given, it could be guessed with file extension, otherwise this parameter is mandatory.\n     * If type is not part of the enum, it will be used as mime type.\n     *\n     * Type `longmp4` is **required** is you try to upload a video higher than 140 seconds.\n     *\n     * @param options.chunkLength Maximum chunk length sent to Twitter. Default goes to 1 MB.\n     *\n     * @param options.additionalOwners Other user IDs allowed to use the returned media_id. Default goes to none.\n     *\n     * @param options.maxConcurrentUploads Maximum uploaded chunks in the same time. Default goes to 3.\n     *\n     * @param options.target Target type `tweet` or `dm`. Defaults to `tweet`.\n     * You must specify it if you send a media to use in DMs.\n     */\n\n  }, {\n    key: \"uploadMedia\",\n    value: function () {\n      var _uploadMedia = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(file) {\n        var options,\n            _a,\n            chunkLength,\n            _yield$this$getUpload,\n            fileHandle,\n            mediaCategory,\n            fileSize,\n            mimeType,\n            mediaData,\n            fullMediaData,\n            _args5 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n                chunkLength = (_a = options.chunkLength) !== null && _a !== void 0 ? _a : 1024 * 1024;\n                _context5.next = 4;\n                return this.getUploadMediaRequirements(file, options);\n\n              case 4:\n                _yield$this$getUpload = _context5.sent;\n                fileHandle = _yield$this$getUpload.fileHandle;\n                mediaCategory = _yield$this$getUpload.mediaCategory;\n                fileSize = _yield$this$getUpload.fileSize;\n                mimeType = _yield$this$getUpload.mimeType;\n                _context5.prev = 9;\n                _context5.next = 12;\n                return this.post(UPLOAD_ENDPOINT, {\n                  command: 'INIT',\n                  total_bytes: fileSize,\n                  media_type: mimeType,\n                  media_category: mediaCategory,\n                  additional_owners: options.additionalOwners,\n                  shared: options.shared ? true : undefined\n                }, {\n                  prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n                });\n\n              case 12:\n                mediaData = _context5.sent;\n                _context5.next = 15;\n                return this.mediaChunkedUpload(fileHandle, chunkLength, mediaData.media_id_string, options.maxConcurrentUploads);\n\n              case 15:\n                _context5.next = 17;\n                return this.post(UPLOAD_ENDPOINT, {\n                  command: 'FINALIZE',\n                  media_id: mediaData.media_id_string\n                }, {\n                  prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n                });\n\n              case 17:\n                fullMediaData = _context5.sent;\n\n                if (!(fullMediaData.processing_info && fullMediaData.processing_info.state !== 'succeeded')) {\n                  _context5.next = 21;\n                  break;\n                }\n\n                _context5.next = 21;\n                return this.awaitForMediaProcessingCompletion(fullMediaData);\n\n              case 21:\n                return _context5.abrupt(\"return\", fullMediaData.media_id_string);\n\n              case 22:\n                _context5.prev = 22;\n\n                // Close file if any\n                if (typeof file === 'number') {\n                  // eslint-disable-next-line @typescript-eslint/no-empty-function\n                  fs.close(file, function () {});\n                } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                  fileHandle.close();\n                }\n\n                return _context5.finish(22);\n\n              case 25:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[9,, 22, 25]]);\n      }));\n\n      function uploadMedia(_x6) {\n        return _uploadMedia.apply(this, arguments);\n      }\n\n      return uploadMedia;\n    }()\n  }, {\n    key: \"awaitForMediaProcessingCompletion\",\n    value: function () {\n      var _awaitForMediaProcessingCompletion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(fullMediaData) {\n        var _fullMediaData, processing_info, _processing_info$erro, name, message;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!true) {\n                  _context6.next = 21;\n                  break;\n                }\n\n                _context6.next = 3;\n                return this.mediaInfo(fullMediaData.media_id_string);\n\n              case 3:\n                fullMediaData = _context6.sent;\n                _fullMediaData = fullMediaData, processing_info = _fullMediaData.processing_info;\n\n                if (!(!processing_info || processing_info.state === 'succeeded')) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 7:\n                if (!(processing_info.state === 'failed')) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                if (!processing_info.error) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                _processing_info$erro = processing_info.error, name = _processing_info$erro.name, message = _processing_info$erro.message;\n                throw new Error(\"Failed to process media: \".concat(name, \" - \").concat(message, \".\"));\n\n              case 11:\n                throw new Error('Failed to process the media.');\n\n              case 12:\n                if (!processing_info.check_after_secs) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                _context6.next = 15;\n                return (0, media_helpers_v1_1.sleepSecs)(processing_info.check_after_secs);\n\n              case 15:\n                _context6.next = 19;\n                break;\n\n              case 17:\n                _context6.next = 19;\n                return (0, media_helpers_v1_1.sleepSecs)(5);\n\n              case 19:\n                _context6.next = 0;\n                break;\n\n              case 21:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function awaitForMediaProcessingCompletion(_x7) {\n        return _awaitForMediaProcessingCompletion.apply(this, arguments);\n      }\n\n      return awaitForMediaProcessingCompletion;\n    }()\n  }, {\n    key: \"getUploadMediaRequirements\",\n    value: function () {\n      var _getUploadMediaRequirements = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(file) {\n        var _ref,\n            mimeType,\n            type,\n            target,\n            longVideo,\n            fileHandle,\n            realMimeType,\n            mediaCategory,\n            _args7 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _ref = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {}, mimeType = _ref.mimeType, type = _ref.type, target = _ref.target, longVideo = _ref.longVideo;\n                _context7.prev = 1;\n                _context7.next = 4;\n                return (0, media_helpers_v1_1.getFileHandle)(file);\n\n              case 4:\n                fileHandle = _context7.sent;\n                // Get the mimetype\n                realMimeType = (0, media_helpers_v1_1.getMimeType)(file, type, mimeType); // Get the media category\n\n                // If explicit longmp4 OR explicit MIME type and not DM target\n                if (realMimeType === types_1.EUploadMimeType.Mp4 && (!mimeType && !type && target !== 'dm' || longVideo)) {\n                  mediaCategory = 'amplify_video';\n                } else {\n                  mediaCategory = (0, media_helpers_v1_1.getMediaCategoryByMime)(realMimeType, target !== null && target !== void 0 ? target : 'tweet');\n                }\n\n                _context7.t0 = fileHandle;\n                _context7.t1 = mediaCategory;\n                _context7.next = 11;\n                return (0, media_helpers_v1_1.getFileSizeFromFileHandle)(fileHandle);\n\n              case 11:\n                _context7.t2 = _context7.sent;\n                _context7.t3 = realMimeType;\n                return _context7.abrupt(\"return\", {\n                  fileHandle: _context7.t0,\n                  mediaCategory: _context7.t1,\n                  fileSize: _context7.t2,\n                  mimeType: _context7.t3\n                });\n\n              case 16:\n                _context7.prev = 16;\n                _context7.t4 = _context7[\"catch\"](1);\n\n                // Close file if any\n                if (typeof file === 'number') {\n                  // eslint-disable-next-line @typescript-eslint/no-empty-function\n                  fs.close(file, function () {});\n                } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                  fileHandle.close();\n                }\n\n                throw _context7.t4;\n\n              case 20:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[1, 16]]);\n      }));\n\n      function getUploadMediaRequirements(_x8) {\n        return _getUploadMediaRequirements.apply(this, arguments);\n      }\n\n      return getUploadMediaRequirements;\n    }()\n  }, {\n    key: \"mediaChunkedUpload\",\n    value: function () {\n      var _mediaChunkedUpload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(fileHandle, chunkLength, mediaId) {\n        var _this2 = this;\n\n        var maxConcurrentUploads,\n            chunkIndex,\n            buffer,\n            readBuffer,\n            nread,\n            offset,\n            _yield,\n            _yield2,\n            currentUploads,\n            mediaBufferPart,\n            _yield3,\n            _yield4,\n            _args8 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                maxConcurrentUploads = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : 3;\n                // Send chunk by chunk\n                chunkIndex = 0;\n\n                if (!(maxConcurrentUploads < 1)) {\n                  _context8.next = 4;\n                  break;\n                }\n\n                throw new RangeError('Bad maxConcurrentUploads parameter.');\n\n              case 4:\n                // Creating a buffer for doing file stuff (if we don't have one)\n                buffer = fileHandle instanceof Buffer ? undefined : Buffer.alloc(chunkLength); // Sliced/filled buffer returned for each part\n\n                // Needed to use the buffer object (file handles always \"remembers\" file position)\n                offset = 0;\n                _context8.next = 8;\n                return (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n\n              case 8:\n                _yield = _context8.sent;\n                _yield2 = _slicedToArray(_yield, 2);\n                readBuffer = _yield2[0];\n                nread = _yield2[1];\n                offset += nread; // Handle max concurrent uploads\n\n                currentUploads = new Set(); // Read buffer until file is completely read\n\n              case 14:\n                if (!nread) {\n                  _context8.next = 29;\n                  break;\n                }\n\n                mediaBufferPart = readBuffer.slice(0, nread); // Sent part if part has something inside\n\n                if (mediaBufferPart.length) {\n                  (function () {\n                    var request = _this2.post(UPLOAD_ENDPOINT, {\n                      command: 'APPEND',\n                      media_id: mediaId,\n                      segment_index: chunkIndex,\n                      media: mediaBufferPart\n                    }, {\n                      prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n                    });\n\n                    currentUploads.add(request);\n                    request.then(function () {\n                      currentUploads.delete(request);\n                    });\n                    chunkIndex++;\n                  })();\n                }\n\n                if (!(currentUploads.size >= maxConcurrentUploads)) {\n                  _context8.next = 20;\n                  break;\n                }\n\n                _context8.next = 20;\n                return Promise.race(currentUploads);\n\n              case 20:\n                _context8.next = 22;\n                return (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n\n              case 22:\n                _yield3 = _context8.sent;\n                _yield4 = _slicedToArray(_yield3, 2);\n                readBuffer = _yield4[0];\n                nread = _yield4[1];\n                offset += nread;\n                _context8.next = 14;\n                break;\n\n              case 29:\n                _context8.next = 31;\n                return Promise.all(_toConsumableArray(currentUploads));\n\n              case 31:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function mediaChunkedUpload(_x9, _x10, _x11) {\n        return _mediaChunkedUpload.apply(this, arguments);\n      }\n\n      return mediaChunkedUpload;\n    }()\n  }, {\n    key: \"readOnly\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return TwitterApiv1ReadWrite;\n}(client_v1_read_1.default);\n\nexports.default = TwitterApiv1ReadWrite;","map":null,"metadata":{},"sourceType":"script"}