{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestParamHelpers = void 0;\n\nvar form_data_helper_1 = require(\"./form-data.helper\");\n\nvar oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\n/* Helpers functions that are specific to this class but do not depends on instance */\n\n\nvar RequestParamHelpers = /*#__PURE__*/function () {\n  function RequestParamHelpers() {\n    _classCallCheck(this, RequestParamHelpers);\n  }\n\n  _createClass(RequestParamHelpers, null, [{\n    key: \"formatQueryToString\",\n    value: function formatQueryToString(query) {\n      var formattedQuery = {};\n\n      for (var prop in query) {\n        if (typeof query[prop] === 'string') {\n          formattedQuery[prop] = query[prop];\n        } else if (typeof query[prop] !== 'undefined') {\n          formattedQuery[prop] = String(query[prop]);\n        }\n      }\n\n      return formattedQuery;\n    }\n  }, {\n    key: \"autoDetectBodyType\",\n    value: function autoDetectBodyType(url) {\n      if (url.pathname.startsWith('/2/') || url.pathname.startsWith('/labs/2/')) {\n        // oauth2 takes url encoded\n        if (url.password.startsWith('/2/oauth2')) {\n          return 'url';\n        } // Twitter API v2 has JSON-encoded requests for everything else\n\n\n        return 'json';\n      }\n\n      if (url.hostname === 'upload.twitter.com') {\n        if (url.pathname === '/1.1/media/upload.json') {\n          return 'form-data';\n        } // json except for media/upload command, that is form-data.\n\n\n        return 'json';\n      }\n\n      var endpoint = url.pathname.split('/1.1/', 2)[1];\n\n      if (this.JSON_1_1_ENDPOINTS.has(endpoint)) {\n        return 'json';\n      }\n\n      return 'url';\n    }\n  }, {\n    key: \"addQueryParamsToUrl\",\n    value: function addQueryParamsToUrl(url, query) {\n      var queryEntries = Object.entries(query);\n\n      if (queryEntries.length) {\n        var search = '';\n\n        var _iterator = _createForOfIteratorHelper(queryEntries),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n\n            search += (search.length ? '&' : '?') + \"\".concat(oauth1_helper_1.default.percentEncode(key), \"=\").concat(oauth1_helper_1.default.percentEncode(value));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        url.search = search;\n      }\n    }\n  }, {\n    key: \"constructBodyParams\",\n    value: function constructBodyParams(body, headers, mode) {\n      if (body instanceof Buffer) {\n        return body;\n      }\n\n      if (mode === 'json') {\n        headers['content-type'] = 'application/json;charset=UTF-8';\n        return JSON.stringify(body);\n      } else if (mode === 'url') {\n        headers['content-type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n\n        if (Object.keys(body).length) {\n          return new URLSearchParams(body).toString().replace(/\\*/g, '%2A'); // URLSearchParams doesnt encode '*', but Twitter wants it encoded.\n        }\n\n        return '';\n      } else if (mode === 'raw') {\n        throw new Error('You can only use raw body mode with Buffers. To give a string, use Buffer.from(str).');\n      } else {\n        var form = new form_data_helper_1.FormDataHelper();\n\n        for (var parameter in body) {\n          form.append(parameter, body[parameter]);\n        }\n\n        var formHeaders = form.getHeaders();\n        headers['content-type'] = formHeaders['content-type'];\n        return form.getBuffer();\n      }\n    }\n  }, {\n    key: \"setBodyLengthHeader\",\n    value: function setBodyLengthHeader(options, body) {\n      var _a;\n\n      options.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : {};\n\n      if (typeof body === 'string') {\n        options.headers['content-length'] = Buffer.byteLength(body);\n      } else {\n        options.headers['content-length'] = body.length;\n      }\n    }\n  }, {\n    key: \"isOAuthSerializable\",\n    value: function isOAuthSerializable(item) {\n      return !(item instanceof Buffer);\n    }\n  }, {\n    key: \"mergeQueryAndBodyForOAuth\",\n    value: function mergeQueryAndBodyForOAuth(query, body) {\n      var parameters = {};\n\n      for (var prop in query) {\n        parameters[prop] = query[prop];\n      }\n\n      if (this.isOAuthSerializable(body)) {\n        for (var _prop in body) {\n          var bodyProp = body[_prop];\n\n          if (this.isOAuthSerializable(bodyProp)) {\n            parameters[_prop] = typeof bodyProp === 'object' && bodyProp !== null && 'toString' in bodyProp ? bodyProp.toString() : bodyProp;\n          }\n        }\n      }\n\n      return parameters;\n    }\n  }, {\n    key: \"moveUrlQueryParamsIntoObject\",\n    value: function moveUrlQueryParamsIntoObject(url, query) {\n      var _iterator2 = _createForOfIteratorHelper(url.searchParams),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              param = _step2$value[0],\n              value = _step2$value[1];\n\n          query[param] = value;\n        } // Remove the query string\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      url.search = '';\n      return url;\n    }\n    /**\n     * Replace URL parameters available in pathname, like `:id`, with data given in `parameters`:\n     * `https://twitter.com/:id.json` + `{ id: '20' }` => `https://twitter.com/20.json`\n     */\n\n  }, {\n    key: \"applyRequestParametersToUrl\",\n    value: function applyRequestParametersToUrl(url, parameters) {\n      url.pathname = url.pathname.replace(/:([A-Z_-]+)/ig, function (fullMatch, paramName) {\n        if (parameters[paramName] !== undefined) {\n          return String(parameters[paramName]);\n        }\n\n        return fullMatch;\n      });\n      return url;\n    }\n  }]);\n\n  return RequestParamHelpers;\n}();\n\nexports.RequestParamHelpers = RequestParamHelpers;\nRequestParamHelpers.JSON_1_1_ENDPOINTS = new Set(['direct_messages/events/new.json', 'direct_messages/welcome_messages/new.json', 'direct_messages/welcome_messages/rules/new.json', 'media/metadata/create.json', 'collections/entries/curate.json']);\nexports.default = RequestParamHelpers;","map":null,"metadata":{},"sourceType":"script"}