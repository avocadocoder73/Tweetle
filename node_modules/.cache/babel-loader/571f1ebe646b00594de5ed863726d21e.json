{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar xnv = require(\"xml-name-validator\");\n\nvar _require = require(\"./constants\"),\n    NAMESPACES = _require.NAMESPACES;\n\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n  var generatedPrefix = \"ns\".concat(prefixIndex);\n  map[newNamespace] = [generatedPrefix];\n  return generatedPrefix;\n}\n\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n  var candidateList = map[ns];\n\n  if (!candidateList) {\n    return null;\n  }\n\n  if (candidateList.includes(preferredPrefix)) {\n    return preferredPrefix;\n  }\n\n  return candidateList[candidateList.length - 1];\n}\n\nfunction serializeAttributeValue(value\n/* , requireWellFormed*/\n) {\n  if (value === null) {\n    return \"\";\n  } // TODO: Check well-formedness\n\n\n  return value.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\t/g, \"&#x9;\").replace(/\\n/g, \"&#xA;\").replace(/\\r/g, \"&#xD;\");\n}\n\nfunction serializeAttributes(element, map, localPrefixes, ignoreNamespaceDefAttr, requireWellFormed, refs) {\n  var result = \"\";\n  var namespaceLocalnames = Object.create(null);\n\n  var _iterator = _createForOfIteratorHelper(element.attributes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var attr = _step.value;\n\n      if (requireWellFormed && namespaceLocalnames[attr.namespaceURI] && namespaceLocalnames[attr.namespaceURI].has(attr.localName)) {\n        throw new Error(\"Found duplicated attribute\");\n      }\n\n      if (!namespaceLocalnames[attr.namespaceURI]) {\n        namespaceLocalnames[attr.namespaceURI] = new Set();\n      }\n\n      namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n      var attributeNamespace = attr.namespaceURI;\n      var candidatePrefix = null;\n\n      if (attributeNamespace !== null) {\n        candidatePrefix = preferredPrefixString(map, attributeNamespace, attr.prefix);\n\n        if (attributeNamespace === NAMESPACES.XMLNS) {\n          if (attr.value === NAMESPACES.XML || attr.prefix === null && ignoreNamespaceDefAttr || attr.prefix !== null && localPrefixes[attr.localName] !== attr.value && map[attr.value].includes(attr.localName)) {\n            continue;\n          }\n\n          if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n            throw new Error(\"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\");\n          }\n\n          if (requireWellFormed && attr.value === \"\") {\n            throw new Error(\"Namespace prefix declarations cannot be used to undeclare a namespace\");\n          }\n\n          if (attr.prefix === \"xmlns\") {\n            candidatePrefix = \"xmlns\";\n          }\n        } else if (candidatePrefix === null) {\n          candidatePrefix = generatePrefix(map, attributeNamespace, refs.prefixIndex++);\n          result += \" xmlns:\".concat(candidatePrefix, \"=\\\"\").concat(serializeAttributeValue(attributeNamespace, requireWellFormed), \"\\\"\");\n        }\n      }\n\n      result += \" \";\n\n      if (candidatePrefix !== null) {\n        result += \"\".concat(candidatePrefix, \":\");\n      }\n\n      if (requireWellFormed && (attr.localName.includes(\":\") || !xnv.name(attr.localName) || attr.localName === \"xmlns\" && attributeNamespace === null)) {\n        throw new Error(\"Invalid attribute localName value\");\n      }\n\n      result += \"\".concat(attr.localName, \"=\\\"\").concat(serializeAttributeValue(attr.value, requireWellFormed), \"\\\"\");\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\n\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;","map":null,"metadata":{},"sourceType":"script"}