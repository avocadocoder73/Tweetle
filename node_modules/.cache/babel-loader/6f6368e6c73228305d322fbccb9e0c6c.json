{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar _require = require(\"../node-document-position\"),\n    DOCUMENT_POSITION_CONTAINS = _require.DOCUMENT_POSITION_CONTAINS,\n    DOCUMENT_POSITION_CONTAINED_BY = _require.DOCUMENT_POSITION_CONTAINED_BY;\n\nvar Element = require(\"../generated/Element\");\n\nvar Node = require(\"../generated/Node\");\n\nvar HTMLCollectionImpl = require(\"./HTMLCollection-impl\").implementation;\n\nexports.implementation = /*#__PURE__*/function (_HTMLCollectionImpl) {\n  _inherits(HTMLOptionsCollectionImpl, _HTMLCollectionImpl);\n\n  function HTMLOptionsCollectionImpl() {\n    _classCallCheck(this, HTMLOptionsCollectionImpl);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLOptionsCollectionImpl).apply(this, arguments));\n  }\n\n  _createClass(HTMLOptionsCollectionImpl, [{\n    key: idlUtils.indexedSetNew,\n    value: function value(index, _value) {\n      if (_value === null) {\n        this.remove(index);\n        return;\n      }\n\n      this._update();\n\n      var length = this._list.length;\n      var n = index - length;\n\n      if (n > 0) {\n        var doc = this._element._ownerDocument;\n        var frag = doc.createDocumentFragment(); // Spec says n - 1, but n seems to be the right number here.\n\n        for (var i = 0; i < n; i++) {\n          var el = doc.createElement(\"option\");\n          frag.appendChild(el);\n        }\n\n        this._element._append(frag);\n      }\n\n      if (n >= 0) {\n        this._element._append(_value);\n      } else {\n        this._element._replace(_value, this._list[index]);\n      }\n    }\n  }, {\n    key: idlUtils.indexedSetExisting,\n    value: function value(index, _value2) {\n      return this[idlUtils.indexedSetNew](index, _value2);\n    }\n  }, {\n    key: \"add\",\n    value: function add(element, before) {\n      if (this._element.compareDocumentPosition(element) & DOCUMENT_POSITION_CONTAINS) {\n        throw DOMException.create(this._globalObject, [\"The operation would yield an incorrect node tree.\", \"HierarchyRequestError\"]);\n      }\n\n      if (Element.isImpl(before) && !(this._element.compareDocumentPosition(before) & DOCUMENT_POSITION_CONTAINED_BY)) {\n        throw DOMException.create(this._globalObject, [\"The object can not be found here.\", \"NotFoundError\"]);\n      }\n\n      if (element === before) {\n        return;\n      }\n\n      var reference = null;\n\n      if (Node.isImpl(before)) {\n        reference = before;\n      } else if (typeof before === \"number\") {\n        this._update();\n\n        reference = this._list[before] || null;\n      }\n\n      var parent = reference !== null ? reference.parentNode : this._element;\n\n      parent._preInsert(element, reference);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      this._update();\n\n      if (this._list.length === 0) {\n        return;\n      }\n\n      if (index < 0 || index >= this._list.length) {\n        return;\n      }\n\n      var element = this._list[index];\n\n      element.parentNode._remove(element);\n    }\n  }, {\n    key: \"length\",\n    // inherits supported property indices\n    get: function get() {\n      this._update();\n\n      return this._list.length;\n    },\n    set: function set(value) {\n      this._update();\n\n      if (value > this._list.length) {\n        var doc = this._element._ownerDocument;\n\n        for (var i = this._list.length; i < value; i++) {\n          var el = doc.createElement(\"option\");\n\n          this._element.appendChild(el);\n        }\n      } else if (value < this._list.length) {\n        for (var _i = this._list.length - 1; _i >= value; _i--) {\n          var _el = this._list[_i];\n\n          this._element.removeChild(_el);\n        }\n      }\n    }\n  }, {\n    key: idlUtils.supportedPropertyNames,\n    get: function get() {\n      this._update();\n\n      var result = new Set();\n\n      var _iterator = _createForOfIteratorHelper(this._list),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var element = _step.value;\n          result.add(element.getAttributeNS(null, \"id\"));\n          result.add(element.getAttributeNS(null, \"name\"));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      return this._element.selectedIndex;\n    },\n    set: function set(value) {\n      this._element.selectedIndex = value;\n    }\n  }]);\n\n  return HTMLOptionsCollectionImpl;\n}(HTMLCollectionImpl);","map":null,"metadata":{},"sourceType":"script"}