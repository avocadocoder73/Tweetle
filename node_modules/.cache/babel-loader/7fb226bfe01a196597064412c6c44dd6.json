{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar HTMLConstructor_helpers_html_constructor = require(\"../helpers/html-constructor.js\").HTMLConstructor;\n\nvar ceReactionsPreSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPreSteps;\n\nvar ceReactionsPostSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPostSteps;\n\nvar EventHandlerNonNull = require(\"./EventHandlerNonNull.js\");\n\nvar OnBeforeUnloadEventHandlerNonNull = require(\"./OnBeforeUnloadEventHandlerNonNull.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nvar interfaceName = \"HTMLBodyElement\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (globalObject, value) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new globalObject.TypeError(\"\".concat(context, \" is not of type 'HTMLBodyElement'.\"));\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  var proto;\n\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"HTMLBodyElement\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  HTMLElement._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject, newTarget) {\n  var wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var ctorRegistry = utils.initCtorRegistry(globalObject);\n\n  var HTMLBodyElement = /*#__PURE__*/function (_globalObject$HTMLEle) {\n    _inherits(HTMLBodyElement, _globalObject$HTMLEle);\n\n    function HTMLBodyElement() {\n      var _this;\n\n      _classCallCheck(this, HTMLBodyElement);\n\n      return _possibleConstructorReturn(_this, HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, this instanceof HTMLBodyElement ? this.constructor : void 0));\n    }\n\n    _createClass(HTMLBodyElement, [{\n      key: \"text\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get text' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"text\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set text' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'text' property on 'HTMLBodyElement': The provided value\",\n          globals: globalObject,\n          treatNullAsEmptyString: true\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"text\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"link\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get link' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"link\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set link' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'link' property on 'HTMLBodyElement': The provided value\",\n          globals: globalObject,\n          treatNullAsEmptyString: true\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"link\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"vLink\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get vLink' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"vlink\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set vLink' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'vLink' property on 'HTMLBodyElement': The provided value\",\n          globals: globalObject,\n          treatNullAsEmptyString: true\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"vlink\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"aLink\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get aLink' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"alink\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set aLink' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'aLink' property on 'HTMLBodyElement': The provided value\",\n          globals: globalObject,\n          treatNullAsEmptyString: true\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"alink\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"bgColor\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get bgColor' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"bgcolor\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set bgColor' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'bgColor' property on 'HTMLBodyElement': The provided value\",\n          globals: globalObject,\n          treatNullAsEmptyString: true\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"bgcolor\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"background\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get background' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"background\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set background' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'background' property on 'HTMLBodyElement': The provided value\",\n          globals: globalObject\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"background\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"onafterprint\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onafterprint' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onafterprint\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onafterprint' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onafterprint' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onafterprint\"] = V;\n      }\n    }, {\n      key: \"onbeforeprint\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onbeforeprint' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onbeforeprint\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onbeforeprint' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onbeforeprint' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onbeforeprint\"] = V;\n      }\n    }, {\n      key: \"onbeforeunload\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onbeforeunload' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onbeforeunload\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onbeforeunload' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = OnBeforeUnloadEventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onbeforeunload' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onbeforeunload\"] = V;\n      }\n    }, {\n      key: \"onhashchange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onhashchange' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onhashchange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onhashchange' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onhashchange' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onhashchange\"] = V;\n      }\n    }, {\n      key: \"onlanguagechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onlanguagechange' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onlanguagechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onlanguagechange' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onlanguagechange' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onlanguagechange\"] = V;\n      }\n    }, {\n      key: \"onmessage\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onmessage' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmessage\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onmessage' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onmessage' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmessage\"] = V;\n      }\n    }, {\n      key: \"onmessageerror\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onmessageerror' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmessageerror\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onmessageerror' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onmessageerror' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmessageerror\"] = V;\n      }\n    }, {\n      key: \"onoffline\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onoffline' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onoffline\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onoffline' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onoffline' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onoffline\"] = V;\n      }\n    }, {\n      key: \"ononline\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get ononline' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ononline\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set ononline' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'ononline' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ononline\"] = V;\n      }\n    }, {\n      key: \"onpagehide\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onpagehide' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onpagehide\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onpagehide' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onpagehide' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onpagehide\"] = V;\n      }\n    }, {\n      key: \"onpageshow\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onpageshow' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onpageshow\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onpageshow' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onpageshow' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onpageshow\"] = V;\n      }\n    }, {\n      key: \"onpopstate\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onpopstate' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onpopstate\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onpopstate' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onpopstate' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onpopstate\"] = V;\n      }\n    }, {\n      key: \"onrejectionhandled\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onrejectionhandled' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onrejectionhandled\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onrejectionhandled' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onrejectionhandled' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onrejectionhandled\"] = V;\n      }\n    }, {\n      key: \"onstorage\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onstorage' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onstorage\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onstorage' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onstorage' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onstorage\"] = V;\n      }\n    }, {\n      key: \"onunhandledrejection\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onunhandledrejection' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onunhandledrejection\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onunhandledrejection' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onunhandledrejection' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onunhandledrejection\"] = V;\n      }\n    }, {\n      key: \"onunload\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get onunload' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onunload\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set onunload' called on an object that is not a valid instance of HTMLBodyElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(globalObject, V, {\n            context: \"Failed to set the 'onunload' property on 'HTMLBodyElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onunload\"] = V;\n      }\n    }]);\n\n    return HTMLBodyElement;\n  }(globalObject.HTMLElement);\n\n  Object.defineProperties(HTMLBodyElement.prototype, _defineProperty({\n    text: {\n      enumerable: true\n    },\n    link: {\n      enumerable: true\n    },\n    vLink: {\n      enumerable: true\n    },\n    aLink: {\n      enumerable: true\n    },\n    bgColor: {\n      enumerable: true\n    },\n    background: {\n      enumerable: true\n    },\n    onafterprint: {\n      enumerable: true\n    },\n    onbeforeprint: {\n      enumerable: true\n    },\n    onbeforeunload: {\n      enumerable: true\n    },\n    onhashchange: {\n      enumerable: true\n    },\n    onlanguagechange: {\n      enumerable: true\n    },\n    onmessage: {\n      enumerable: true\n    },\n    onmessageerror: {\n      enumerable: true\n    },\n    onoffline: {\n      enumerable: true\n    },\n    ononline: {\n      enumerable: true\n    },\n    onpagehide: {\n      enumerable: true\n    },\n    onpageshow: {\n      enumerable: true\n    },\n    onpopstate: {\n      enumerable: true\n    },\n    onrejectionhandled: {\n      enumerable: true\n    },\n    onstorage: {\n      enumerable: true\n    },\n    onunhandledrejection: {\n      enumerable: true\n    },\n    onunload: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"HTMLBodyElement\",\n    configurable: true\n  }));\n  ctorRegistry[interfaceName] = HTMLBodyElement;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: HTMLBodyElement\n  });\n};\n\nvar Impl = require(\"../nodes/HTMLBodyElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}