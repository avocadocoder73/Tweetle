{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar HTMLConstructor_helpers_html_constructor = require(\"../helpers/html-constructor.js\").HTMLConstructor;\n\nvar BlobCallback = require(\"./BlobCallback.js\");\n\nvar ceReactionsPreSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPreSteps;\n\nvar ceReactionsPostSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPostSteps;\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nvar interfaceName = \"HTMLCanvasElement\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (globalObject, value) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new globalObject.TypeError(\"\".concat(context, \" is not of type 'HTMLCanvasElement'.\"));\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  var proto;\n\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"HTMLCanvasElement\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  HTMLElement._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject, newTarget) {\n  var wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var ctorRegistry = utils.initCtorRegistry(globalObject);\n\n  var HTMLCanvasElement = /*#__PURE__*/function (_globalObject$HTMLEle) {\n    _inherits(HTMLCanvasElement, _globalObject$HTMLEle);\n\n    function HTMLCanvasElement() {\n      var _this;\n\n      _classCallCheck(this, HTMLCanvasElement);\n\n      return _possibleConstructorReturn(_this, HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, this instanceof HTMLCanvasElement ? this.constructor : void 0));\n    }\n\n    _createClass(HTMLCanvasElement, [{\n      key: \"getContext\",\n      value: function getContext(contextId) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'getContext' called on an object that is not a valid instance of HTMLCanvasElement.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'getContext' on 'HTMLCanvasElement': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'getContext' on 'HTMLCanvasElement': parameter 1\",\n            globals: globalObject\n          });\n          args.push(curArg);\n        }\n\n        for (var i = 1; i < arguments.length; i++) {\n          var _curArg = arguments[i];\n          _curArg = conversions[\"any\"](_curArg, {\n            context: \"Failed to execute 'getContext' on 'HTMLCanvasElement': parameter \" + (i + 1),\n            globals: globalObject\n          });\n          args.push(_curArg);\n        }\n\n        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).getContext.apply(_esValue$implSymbol, args));\n      }\n    }, {\n      key: \"toDataURL\",\n      value: function toDataURL() {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'toDataURL' called on an object that is not a valid instance of HTMLCanvasElement.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg !== undefined) {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'toDataURL' on 'HTMLCanvasElement': parameter 1\",\n              globals: globalObject\n            });\n          }\n\n          args.push(curArg);\n        }\n        {\n          var _curArg2 = arguments[1];\n\n          if (_curArg2 !== undefined) {\n            _curArg2 = conversions[\"any\"](_curArg2, {\n              context: \"Failed to execute 'toDataURL' on 'HTMLCanvasElement': parameter 2\",\n              globals: globalObject\n            });\n          }\n\n          args.push(_curArg2);\n        }\n        return (_esValue$implSymbol2 = esValue[implSymbol]).toDataURL.apply(_esValue$implSymbol2, args);\n      }\n    }, {\n      key: \"toBlob\",\n      value: function toBlob(callback) {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'toBlob' called on an object that is not a valid instance of HTMLCanvasElement.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new globalObject.TypeError(\"Failed to execute 'toBlob' on 'HTMLCanvasElement': 1 argument required, but only \".concat(arguments.length, \" present.\"));\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = BlobCallback.convert(globalObject, curArg, {\n            context: \"Failed to execute 'toBlob' on 'HTMLCanvasElement': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg3 = arguments[1];\n\n          if (_curArg3 !== undefined) {\n            _curArg3 = conversions[\"DOMString\"](_curArg3, {\n              context: \"Failed to execute 'toBlob' on 'HTMLCanvasElement': parameter 2\",\n              globals: globalObject\n            });\n          }\n\n          args.push(_curArg3);\n        }\n        {\n          var _curArg4 = arguments[2];\n\n          if (_curArg4 !== undefined) {\n            _curArg4 = conversions[\"any\"](_curArg4, {\n              context: \"Failed to execute 'toBlob' on 'HTMLCanvasElement': parameter 3\",\n              globals: globalObject\n            });\n          }\n\n          args.push(_curArg4);\n        }\n        return (_esValue$implSymbol3 = esValue[implSymbol]).toBlob.apply(_esValue$implSymbol3, args);\n      }\n    }, {\n      key: \"width\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get width' called on an object that is not a valid instance of HTMLCanvasElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"width\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set width' called on an object that is not a valid instance of HTMLCanvasElement.\");\n        }\n\n        V = conversions[\"unsigned long\"](V, {\n          context: \"Failed to set the 'width' property on 'HTMLCanvasElement': The provided value\",\n          globals: globalObject\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"width\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"height\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get height' called on an object that is not a valid instance of HTMLCanvasElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"height\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'set height' called on an object that is not a valid instance of HTMLCanvasElement.\");\n        }\n\n        V = conversions[\"unsigned long\"](V, {\n          context: \"Failed to set the 'height' property on 'HTMLCanvasElement': The provided value\",\n          globals: globalObject\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"height\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }]);\n\n    return HTMLCanvasElement;\n  }(globalObject.HTMLElement);\n\n  Object.defineProperties(HTMLCanvasElement.prototype, _defineProperty({\n    getContext: {\n      enumerable: true\n    },\n    toDataURL: {\n      enumerable: true\n    },\n    toBlob: {\n      enumerable: true\n    },\n    width: {\n      enumerable: true\n    },\n    height: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"HTMLCanvasElement\",\n    configurable: true\n  }));\n  ctorRegistry[interfaceName] = HTMLCanvasElement;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: HTMLCanvasElement\n  });\n};\n\nvar Impl = require(\"../nodes/HTMLCanvasElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}