{"ast":null,"code":"var crossfetch = require('cross-fetch');\n\nvar BASE_API_PATH = \"https://api.countapi.xyz\";\nvar validPattern = /^[A-Za-z0-9_\\-.]{3,64}$/;\nvar validRegex = new RegExp(validPattern);\n\nvar validatePath = module.exports.validatePath = function (namespace, key) {\n  if (typeof key === \"undefined\") {\n    if (typeof namespace === \"undefined\") {\n      return Promise.reject(\"Missing key\");\n    }\n\n    key = namespace;\n    namespace = undefined;\n  }\n\n  function validName(name) {\n    return validRegex.test(name) || name === ':HOST:' || name === ':PATHNAME:';\n  }\n\n  return new Promise(function (resolve, reject) {\n    if (!validName(key)) {\n      reject(\"Key must match \".concat(validPattern, \". Got '\").concat(namespace, \"'\"));\n      return;\n    }\n\n    if (!validName(namespace) && typeof namespace !== \"undefined\" && namespace !== null) {\n      reject(\"Namespace must match \".concat(validPattern, \" or be empty. Got '\").concat(namespace, \"'\"));\n      return;\n    }\n\n    var path = '';\n    if (typeof namespace !== \"undefined\") path += namespace + '/';\n    path += key;\n    resolve({\n      path: path\n    });\n  });\n};\n\nvar validateTuple = module.exports.validateTuple = function (namespace, key, value) {\n  if (typeof value === \"undefined\") {\n    if (typeof key === \"undefined\") {\n      return Promise.reject(\"Missing key or value\");\n    }\n\n    value = key;\n    key = undefined;\n  }\n\n  if (typeof value !== \"number\") {\n    return Promise.reject(\"Value is NaN\");\n  }\n\n  return validatePath(namespace, key).then(function (result) {\n    return Object.assign({}, {\n      value: value\n    }, result);\n  });\n};\n\nfunction finalize(res) {\n  var valid_responses = [200, 400, 403, 404];\n\n  if (valid_responses.includes(res.status)) {\n    return res.json().then(function (json) {\n      if (res.status == 400) return Promise.reject(json.error);\n      return Object.assign({}, {\n        status: res.status,\n        path: res.headers.get('X-Path')\n      }, json);\n    });\n  }\n\n  return Promise.reject(\"Response from server: \" + res.status);\n}\n\nfunction queryParams(params) {\n  return Object.keys(params || {}).map(function (k) {\n    return encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);\n  }).join('&');\n}\n\nmodule.exports.get = function (namespace, key) {\n  return validatePath(namespace, key).then(function (result) {\n    return crossfetch(\"\".concat(BASE_API_PATH, \"/get/\").concat(result.path)).then(finalize);\n  });\n};\n\nmodule.exports.set = function (namespace, key, value) {\n  return validateTuple(namespace, key, value).then(function (result) {\n    return crossfetch(\"\".concat(BASE_API_PATH, \"/set/\").concat(result.path, \"?value=\").concat(result.value)).then(finalize);\n  });\n};\n\nmodule.exports.update = function (namespace, key, amount) {\n  return validateTuple(namespace, key, amount).then(function (result) {\n    return crossfetch(\"\".concat(BASE_API_PATH, \"/update/\").concat(result.path, \"?amount=\").concat(result.value)).then(finalize);\n  });\n};\n\nmodule.exports.hit = function (namespace, key) {\n  return validatePath(namespace, key).then(function (result) {\n    return crossfetch(\"\".concat(BASE_API_PATH, \"/hit/\").concat(result.path)).then(finalize);\n  });\n};\n\nmodule.exports.info = function (namespace, key) {\n  return validatePath(namespace, key).then(function (result) {\n    return crossfetch(\"\".concat(BASE_API_PATH, \"/info/\").concat(result.path)).then(finalize);\n  });\n};\n\nmodule.exports.create = function (options) {\n  var params = queryParams(options);\n  return crossfetch(\"\".concat(BASE_API_PATH, \"/create\").concat(params.length > 0 ? '?' + params : '')).then(finalize);\n};\n\nmodule.exports.stats = function () {\n  return crossfetch(\"\".concat(BASE_API_PATH, \"/stats\")).then(finalize);\n};\n\nmodule.exports.visits = function (page) {\n  return this.hit(':HOST:', page ? page : ':PATHNAME:');\n};\n\nmodule.exports.event = function (name) {\n  return this.hit(':HOST:', name);\n};","map":null,"metadata":{},"sourceType":"script"}