{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormDataHelper = void 0;\n\nvar helpers_1 = require(\"../helpers\"); // This class is partially inspired by https://github.com/form-data/form-data/blob/master/lib/form_data.js\n// All credits to their authors.\n\n\nvar FormDataHelper = /*#__PURE__*/function () {\n  function FormDataHelper() {\n    _classCallCheck(this, FormDataHelper);\n\n    this._boundary = '';\n    this._chunks = [];\n  }\n\n  _createClass(FormDataHelper, [{\n    key: \"bodyAppend\",\n    value: function bodyAppend() {\n      var _this$_chunks;\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      var allAsBuffer = values.map(function (val) {\n        return val instanceof Buffer ? val : Buffer.from(val);\n      });\n\n      (_this$_chunks = this._chunks).push.apply(_this$_chunks, _toConsumableArray(allAsBuffer));\n    }\n  }, {\n    key: \"append\",\n    value: function append(field, value, contentType) {\n      var convertedValue = value instanceof Buffer ? value : value.toString();\n      var header = this.getMultipartHeader(field, convertedValue, contentType);\n      this.bodyAppend(header, convertedValue, FormDataHelper.LINE_BREAK);\n    }\n  }, {\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      return {\n        'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n      };\n    }\n    /** Length of form-data (including footer length). */\n\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this._chunks.reduce(function (acc, cur) {\n        return acc + cur.length;\n      }, this.getMultipartFooter().length);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer() {\n      var allChunks = [].concat(_toConsumableArray(this._chunks), [this.getMultipartFooter()]);\n      var totalBuffer = Buffer.alloc(this.getLength());\n      var i = 0;\n\n      var _iterator = _createForOfIteratorHelper(allChunks),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var chunk = _step.value;\n\n          for (var j = 0; j < chunk.length; i++, j++) {\n            totalBuffer[i] = chunk[j];\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return totalBuffer;\n    }\n  }, {\n    key: \"getBoundary\",\n    value: function getBoundary() {\n      if (!this._boundary) {\n        this.generateBoundary();\n      }\n\n      return this._boundary;\n    }\n  }, {\n    key: \"generateBoundary\",\n    value: function generateBoundary() {\n      // This generates a 50 character boundary similar to those used by Firefox.\n      var boundary = '--------------------------';\n\n      for (var i = 0; i < 24; i++) {\n        boundary += Math.floor(Math.random() * 10).toString(16);\n      }\n\n      this._boundary = boundary;\n    }\n  }, {\n    key: \"getMultipartHeader\",\n    value: function getMultipartHeader(field, value, contentType) {\n      // In this lib no need to guess more the content type, octet stream is ok of buffers\n      if (!contentType) {\n        contentType = value instanceof Buffer ? FormDataHelper.DEFAULT_CONTENT_TYPE : '';\n      }\n\n      var headers = {\n        'Content-Disposition': ['form-data', \"name=\\\"\".concat(field, \"\\\"\")],\n        'Content-Type': contentType\n      };\n      var contents = '';\n\n      for (var _i = 0, _Object$entries = Object.entries(headers); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            prop = _Object$entries$_i[0],\n            header = _Object$entries$_i[1];\n\n        // skip nullish headers.\n        if (!header.length) {\n          continue;\n        }\n\n        contents += prop + ': ' + (0, helpers_1.arrayWrap)(header).join('; ') + FormDataHelper.LINE_BREAK;\n      }\n\n      return '--' + this.getBoundary() + FormDataHelper.LINE_BREAK + contents + FormDataHelper.LINE_BREAK;\n    }\n  }, {\n    key: \"getMultipartFooter\",\n    value: function getMultipartFooter() {\n      if (this._footerChunk) {\n        return this._footerChunk;\n      }\n\n      return this._footerChunk = Buffer.from('--' + this.getBoundary() + '--' + FormDataHelper.LINE_BREAK);\n    }\n  }]);\n\n  return FormDataHelper;\n}();\n\nexports.FormDataHelper = FormDataHelper;\nFormDataHelper.LINE_BREAK = '\\r\\n';\nFormDataHelper.DEFAULT_CONTENT_TYPE = 'application/octet-stream';","map":null,"metadata":{},"sourceType":"script"}