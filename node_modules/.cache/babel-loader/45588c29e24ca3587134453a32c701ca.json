{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar nodeCrypto = require(\"crypto\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\"); // https://w3c.github.io/webcrypto/#crypto-interface\n\n\nvar CryptoImpl = /*#__PURE__*/function () {\n  function CryptoImpl(globalObject) {\n    _classCallCheck(this, CryptoImpl);\n\n    this._globalObject = globalObject;\n  } // https://w3c.github.io/webcrypto/#Crypto-method-getRandomValues\n\n\n  _createClass(CryptoImpl, [{\n    key: \"getRandomValues\",\n    value: function getRandomValues(array) {\n      // Note: this rejects Float32Array, Float64Array and DataView.\n      //\n      // We perform \"instance tests\" by comparing `array.constructor.name` so\n      // that the tests will be successful across realms.\n      var typeName = array.constructor.name;\n\n      if (!(typeName === \"Int8Array\" || typeName === \"Uint8Array\" || typeName === \"Uint8ClampedArray\" || typeName === \"Int16Array\" || typeName === \"Uint16Array\" || typeName === \"Int32Array\" || typeName === \"Uint32Array\" || typeName === \"BigInt64Array\" || typeName === \"BigUint64Array\")) {\n        throw DOMException.create(this._globalObject, [\"getRandomValues() only accepts integer typed arrays\", \"TypeMismatchError\"]);\n      }\n\n      if (array.byteLength > 65536) {\n        throw DOMException.create(this._globalObject, [\"getRandomValues() cannot generate more than 65536 bytes of random values; \" + \"\".concat(array.byteLength, \" bytes were requested\"), \"QuotaExceededError\"]);\n      }\n\n      nodeCrypto.randomFillSync(array);\n      return array;\n    }\n  }]);\n\n  return CryptoImpl;\n}();\n\nexports.implementation = CryptoImpl;","map":null,"metadata":{},"sourceType":"script"}