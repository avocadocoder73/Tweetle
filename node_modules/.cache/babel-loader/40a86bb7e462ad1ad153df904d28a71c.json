{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _objectWithoutProperties = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectWithoutProperties\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar client_subclient_1 = __importDefault(require(\"../client.subclient\"));\n\nvar globals_1 = require(\"../globals\");\n\nvar helpers_1 = require(\"../helpers\");\n\nvar client_v1_1 = __importDefault(require(\"../v1/client.v1\"));\n\nvar tweet_paginator_v1_1 = require(\"../paginators/tweet.paginator.v1\");\n\nvar mutes_paginator_v1_1 = require(\"../paginators/mutes.paginator.v1\");\n\nvar user_paginator_v1_1 = require(\"../paginators/user.paginator.v1\");\n\nvar list_paginator_v1_1 = require(\"../paginators/list.paginator.v1\");\n/**\n * Base Twitter v1 client with only read right.\n */\n\n\nvar TwitterApiv1ReadOnly = /*#__PURE__*/function (_client_subclient_1$d) {\n  _inherits(TwitterApiv1ReadOnly, _client_subclient_1$d);\n\n  function TwitterApiv1ReadOnly() {\n    var _this;\n\n    _classCallCheck(this, TwitterApiv1ReadOnly);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterApiv1ReadOnly).apply(this, arguments));\n    _this._prefix = globals_1.API_V1_1_PREFIX;\n    return _this;\n  }\n  /* Tweets */\n\n  /**\n   * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-show-id\n   */\n\n\n  _createClass(TwitterApiv1ReadOnly, [{\n    key: \"singleTweet\",\n    value: function singleTweet(tweetId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('statuses/show.json', _objectSpread({\n        tweet_mode: 'extended',\n        id: tweetId\n      }, options));\n    }\n  }, {\n    key: \"tweets\",\n    value: function tweets(ids) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.post('statuses/lookup.json', _objectSpread({\n        tweet_mode: 'extended',\n        id: ids\n      }, options));\n    }\n    /**\n     * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format.\n     * The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n     */\n\n  }, {\n    key: \"oembedTweet\",\n    value: function oembedTweet(tweetId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('oembed', _objectSpread({\n        url: \"https://twitter.com/i/statuses/\".concat(tweetId)\n      }, options), {\n        prefix: 'https://publish.twitter.com/'\n      });\n    }\n    /* Tweets timelines */\n\n    /**\n     * Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.\n     * The home timeline is central to how most users interact with the Twitter service.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline\n     */\n\n  }, {\n    key: \"homeTimeline\",\n    value: function () {\n      var _homeTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var options,\n            queryParams,\n            initialRq,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context.next = 4;\n                return this.get('statuses/home_timeline.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context.sent;\n                return _context.abrupt(\"return\", new tweet_paginator_v1_1.HomeTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function homeTimeline() {\n        return _homeTimeline.apply(this, arguments);\n      }\n\n      return homeTimeline;\n    }()\n    /**\n     * Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user.\n     * The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline\n     */\n\n  }, {\n    key: \"mentionTimeline\",\n    value: function () {\n      var _mentionTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var options,\n            queryParams,\n            initialRq,\n            _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context2.next = 4;\n                return this.get('statuses/mentions_timeline.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context2.sent;\n                return _context2.abrupt(\"return\", new tweet_paginator_v1_1.MentionTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function mentionTimeline() {\n        return _mentionTimeline.apply(this, arguments);\n      }\n\n      return mentionTimeline;\n    }()\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the user_id parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n\n  }, {\n    key: \"userTimeline\",\n    value: function () {\n      var _userTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(userId) {\n        var options,\n            queryParams,\n            initialRq,\n            _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended',\n                  user_id: userId\n                }, options);\n                _context3.next = 4;\n                return this.get('statuses/user_timeline.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context3.sent;\n                return _context3.abrupt(\"return\", new tweet_paginator_v1_1.UserTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function userTimeline(_x) {\n        return _userTimeline.apply(this, arguments);\n      }\n\n      return userTimeline;\n    }()\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the screen_name parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n\n  }, {\n    key: \"userTimelineByUsername\",\n    value: function () {\n      var _userTimelineByUsername = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(username) {\n        var options,\n            queryParams,\n            initialRq,\n            _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended',\n                  screen_name: username\n                }, options);\n                _context4.next = 4;\n                return this.get('statuses/user_timeline.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context4.sent;\n                return _context4.abrupt(\"return\", new tweet_paginator_v1_1.UserTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function userTimelineByUsername(_x2) {\n        return _userTimelineByUsername.apply(this, arguments);\n      }\n\n      return userTimelineByUsername;\n    }()\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n\n  }, {\n    key: \"favoriteTimeline\",\n    value: function () {\n      var _favoriteTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(userId) {\n        var options,\n            queryParams,\n            initialRq,\n            _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended',\n                  user_id: userId\n                }, options);\n                _context5.next = 4;\n                return this.get('favorites/list.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context5.sent;\n                return _context5.abrupt(\"return\", new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function favoriteTimeline(_x3) {\n        return _favoriteTimeline.apply(this, arguments);\n      }\n\n      return favoriteTimeline;\n    }()\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n\n  }, {\n    key: \"favoriteTimelineByUsername\",\n    value: function () {\n      var _favoriteTimelineByUsername = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(username) {\n        var options,\n            queryParams,\n            initialRq,\n            _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended',\n                  screen_name: username\n                }, options);\n                _context6.next = 4;\n                return this.get('favorites/list.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context6.sent;\n                return _context6.abrupt(\"return\", new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function favoriteTimelineByUsername(_x4) {\n        return _favoriteTimelineByUsername.apply(this, arguments);\n      }\n\n      return favoriteTimelineByUsername;\n    }()\n    /* Users */\n\n    /**\n     * Returns a variety of information about the user specified by the required user_id or screen_name parameter.\n     * The author's most recent Tweet will be returned inline when possible.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show\n     */\n\n  }, {\n    key: \"user\",\n    value: function user(_user) {\n      return this.get('users/show.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, _user));\n    }\n    /**\n     * Returns fully-hydrated user objects for up to 100 users per request,\n     * as specified by comma-separated values passed to the user_id and/or screen_name parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup\n     */\n\n  }, {\n    key: \"users\",\n    value: function users(query) {\n      return this.get('users/lookup.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, query));\n    }\n    /**\n     * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;\n     * returns a 401 status code and an error message if not.\n     * Use this method to test if supplied user credentials are valid.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials\n     */\n\n  }, {\n    key: \"verifyCredentials\",\n    value: function verifyCredentials() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.get('account/verify_credentials.json', options);\n    }\n    /**\n     * Returns an array of user objects the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list\n     */\n\n  }, {\n    key: \"listMutedUsers\",\n    value: function () {\n      var _listMutedUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var options,\n            queryParams,\n            initialRq,\n            _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context7.next = 4;\n                return this.get('mutes/users/list.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context7.sent;\n                return _context7.abrupt(\"return\", new mutes_paginator_v1_1.MuteUserListV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function listMutedUsers() {\n        return _listMutedUsers.apply(this, arguments);\n      }\n\n      return listMutedUsers;\n    }()\n    /**\n     * Returns an array of numeric user ids the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids\n     */\n\n  }, {\n    key: \"listMutedUserIds\",\n    value: function () {\n      var _listMutedUserIds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var options,\n            queryParams,\n            initialRq,\n            _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n                queryParams = _objectSpread({\n                  stringify_ids: true\n                }, options);\n                _context8.next = 4;\n                return this.get('mutes/users/ids.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context8.sent;\n                return _context8.abrupt(\"return\", new mutes_paginator_v1_1.MuteUserIdsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function listMutedUserIds() {\n        return _listMutedUserIds.apply(this, arguments);\n      }\n\n      return listMutedUserIds;\n    }()\n    /**\n     * Provides a simple, relevance-based search interface to public user accounts on Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-search\n     */\n\n  }, {\n    key: \"searchUsers\",\n    value: function () {\n      var _searchUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(query) {\n        var options,\n            queryParams,\n            initialRq,\n            _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n                queryParams = _objectSpread({\n                  q: query,\n                  tweet_mode: 'extended',\n                  page: 1\n                }, options);\n                _context9.next = 4;\n                return this.get('users/search.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context9.sent;\n                return _context9.abrupt(\"return\", new user_paginator_v1_1.UserSearchV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function searchUsers(_x5) {\n        return _searchUsers.apply(this, arguments);\n      }\n\n      return searchUsers;\n    }()\n    /* Friendship API */\n\n    /**\n     * Returns detailed information about the relationship between two arbitrary users.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show\n     */\n\n  }, {\n    key: \"friendship\",\n    value: function friendship(sources) {\n      return this.get('friendships/show.json', sources);\n    }\n    /**\n     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup\n     */\n\n  }, {\n    key: \"friendships\",\n    value: function friendships(_friendships) {\n      return this.get('friendships/lookup.json', _friendships);\n    }\n    /**\n     * Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids\n     */\n\n  }, {\n    key: \"friendshipsNoRetweets\",\n    value: function friendshipsNoRetweets() {\n      return this.get('friendships/no_retweets/ids.json', {\n        stringify_ids: true\n      });\n    }\n    /**\n     * Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming\n     */\n\n  }, {\n    key: \"friendshipsIncoming\",\n    value: function () {\n      var _friendshipsIncoming = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var options,\n            queryParams,\n            initialRq,\n            _args10 = arguments;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                options = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n                queryParams = _objectSpread({\n                  stringify_ids: true\n                }, options);\n                _context10.next = 4;\n                return this.get('friendships/incoming.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context10.sent;\n                return _context10.abrupt(\"return\", new user_paginator_v1_1.FriendshipsIncomingV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function friendshipsIncoming() {\n        return _friendshipsIncoming.apply(this, arguments);\n      }\n\n      return friendshipsIncoming;\n    }()\n    /**\n     * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing\n     */\n\n  }, {\n    key: \"friendshipsOutgoing\",\n    value: function () {\n      var _friendshipsOutgoing = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var options,\n            queryParams,\n            initialRq,\n            _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                options = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n                queryParams = _objectSpread({\n                  stringify_ids: true\n                }, options);\n                _context11.next = 4;\n                return this.get('friendships/outgoing.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context11.sent;\n                return _context11.abrupt(\"return\", new user_paginator_v1_1.FriendshipsOutgoingV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function friendshipsOutgoing() {\n        return _friendshipsOutgoing.apply(this, arguments);\n      }\n\n      return friendshipsOutgoing;\n    }()\n    /* Account/user API */\n\n    /**\n     * Get current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n\n  }, {\n    key: \"accountSettings\",\n    value: function accountSettings() {\n      return this.get('account/settings.json');\n    }\n    /**\n     * Returns a map of the available size variations of the specified user's profile banner.\n     * If the user has not uploaded a profile banner, a HTTP 404 will be served instead.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-users-profile_banner\n     */\n\n  }, {\n    key: \"userProfileBannerSizes\",\n    value: function userProfileBannerSizes(params) {\n      return this.get('users/profile_banner.json', params);\n    }\n    /* Lists */\n\n    /**\n     * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-show\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(options) {\n      return this.get('lists/show.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Returns all lists the authenticating or specified user subscribes to, including their own.\n     * If no user is given, the authenticating user is used.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list\n     */\n\n  }, {\n    key: \"lists\",\n    value: function lists() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.get('lists/list.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members\n     */\n\n  }, {\n    key: \"listMembers\",\n    value: function () {\n      var _listMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var options,\n            queryParams,\n            initialRq,\n            _args12 = arguments;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                options = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context12.next = 4;\n                return this.get('lists/members.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context12.sent;\n                return _context12.abrupt(\"return\", new list_paginator_v1_1.ListMembersV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function listMembers() {\n        return _listMembers.apply(this, arguments);\n      }\n\n      return listMembers;\n    }()\n    /**\n     * Check if the specified user is a member of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show\n     */\n\n  }, {\n    key: \"listGetMember\",\n    value: function listGetMember(options) {\n      return this.get('lists/members/show.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Returns the lists the specified user has been added to.\n     * If user_id or screen_name are not provided, the memberships for the authenticating user are returned.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships\n     */\n\n  }, {\n    key: \"listMemberships\",\n    value: function () {\n      var _listMemberships = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var options,\n            queryParams,\n            initialRq,\n            _args13 = arguments;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                options = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context13.next = 4;\n                return this.get('lists/memberships.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context13.sent;\n                return _context13.abrupt(\"return\", new list_paginator_v1_1.ListMembershipsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function listMemberships() {\n        return _listMemberships.apply(this, arguments);\n      }\n\n      return listMemberships;\n    }()\n    /**\n     * Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships\n     */\n\n  }, {\n    key: \"listOwnerships\",\n    value: function () {\n      var _listOwnerships = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var options,\n            queryParams,\n            initialRq,\n            _args14 = arguments;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context14.next = 4;\n                return this.get('lists/ownerships.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context14.sent;\n                return _context14.abrupt(\"return\", new list_paginator_v1_1.ListOwnershipsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function listOwnerships() {\n        return _listOwnerships.apply(this, arguments);\n      }\n\n      return listOwnerships;\n    }()\n    /**\n     * Returns a timeline of tweets authored by members of the specified list. Retweets are included by default.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses\n     */\n\n  }, {\n    key: \"listStatuses\",\n    value: function () {\n      var _listStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(options) {\n        var queryParams, initialRq;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context15.next = 3;\n                return this.get('lists/statuses.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 3:\n                initialRq = _context15.sent;\n                return _context15.abrupt(\"return\", new tweet_paginator_v1_1.ListTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function listStatuses(_x6) {\n        return _listStatuses.apply(this, arguments);\n      }\n\n      return listStatuses;\n    }()\n    /**\n     * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers\n     */\n\n  }, {\n    key: \"listSubscribers\",\n    value: function () {\n      var _listSubscribers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var options,\n            queryParams,\n            initialRq,\n            _args16 = arguments;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                options = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context16.next = 4;\n                return this.get('lists/subscribers.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context16.sent;\n                return _context16.abrupt(\"return\", new list_paginator_v1_1.ListSubscribersV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function listSubscribers() {\n        return _listSubscribers.apply(this, arguments);\n      }\n\n      return listSubscribers;\n    }()\n    /**\n     * Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show\n     */\n\n  }, {\n    key: \"listGetSubscriber\",\n    value: function listGetSubscriber(options) {\n      return this.get('lists/subscribers/show.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.\n     * Does not include the user's own lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions\n     */\n\n  }, {\n    key: \"listSubscriptions\",\n    value: function () {\n      var _listSubscriptions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        var options,\n            queryParams,\n            initialRq,\n            _args17 = arguments;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                options = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context17.next = 4;\n                return this.get('lists/subscriptions.json', queryParams, {\n                  fullResponse: true\n                });\n\n              case 4:\n                initialRq = _context17.sent;\n                return _context17.abrupt(\"return\", new list_paginator_v1_1.ListSubscriptionsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function listSubscriptions() {\n        return _listSubscriptions.apply(this, arguments);\n      }\n\n      return listSubscriptions;\n    }()\n    /* Media upload API */\n\n    /**\n     * The STATUS command (this method) is used to periodically poll for updates of media processing operation.\n     * After the STATUS command response returns succeeded, you can move on to the next step which is usually create Tweet with media_id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/get-media-upload-status\n     */\n\n  }, {\n    key: \"mediaInfo\",\n    value: function mediaInfo(mediaId) {\n      return this.get('media/upload.json', {\n        command: 'STATUS',\n        media_id: mediaId\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n      });\n    }\n  }, {\n    key: \"filterStream\",\n    value: function filterStream() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          autoConnect = _ref.autoConnect,\n          params = _objectWithoutProperties(_ref, [\"autoConnect\"]);\n\n      var parameters = {};\n\n      for (var _i = 0, _Object$entries = Object.entries(params); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        if (key === 'follow' || key === 'track') {\n          parameters[key] = value.toString();\n        } else if (key === 'locations') {\n          var locations = value;\n          parameters.locations = (0, helpers_1.arrayWrap)(locations).map(function (loc) {\n            return \"\".concat(loc.lng, \",\").concat(loc.lat);\n          }).join(',');\n        } else {\n          parameters[key] = value;\n        }\n      }\n\n      var streamClient = this.stream;\n      return streamClient.postStream('statuses/filter.json', parameters, {\n        autoConnect: autoConnect\n      });\n    }\n  }, {\n    key: \"sampleStream\",\n    value: function sampleStream() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          autoConnect = _ref2.autoConnect,\n          params = _objectWithoutProperties(_ref2, [\"autoConnect\"]);\n\n      var streamClient = this.stream;\n      return streamClient.getStream('statuses/sample.json', params, {\n        autoConnect: autoConnect\n      });\n    }\n    /**\n     * Create a client that is prefixed with `https//stream.twitter.com` instead of classic API URL.\n     */\n\n  }, {\n    key: \"trendsByPlace\",\n\n    /* Trends API */\n\n    /**\n     * Returns the top 50 trending topics for a specific id, if trending information is available for it.\n     * Note: The id parameter for this endpoint is the \"where on earth identifier\" or WOEID, which is a legacy identifier created by Yahoo and has been deprecated.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place\n     */\n    value: function trendsByPlace(woeId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('trends/place.json', _objectSpread({\n        id: woeId\n      }, options));\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for.\n     * The response is an array of \"locations\" that encode the location's WOEID\n     * and some other human-readable information such as a canonical name and country the location belongs in.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-available\n     */\n\n  }, {\n    key: \"trendsAvailable\",\n    value: function trendsAvailable() {\n      return this.get('trends/available.json');\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for, closest to a specified location.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-closest\n     */\n\n  }, {\n    key: \"trendsClosest\",\n    value: function trendsClosest(lat, long) {\n      return this.get('trends/closest.json', {\n        lat: lat,\n        long: long\n      });\n    }\n    /* Geo API */\n\n    /**\n     * Returns all the information about a known place.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/place-information/api-reference/get-geo-id-place_id\n     */\n\n  }, {\n    key: \"geoPlace\",\n    value: function geoPlace(placeId) {\n      return this.get('geo/id/:place_id.json', undefined, {\n        params: {\n          place_id: placeId\n        }\n      });\n    }\n    /**\n     * Search for places that can be attached to a Tweet via POST statuses/update.\n     * This request will return a list of all the valid places that can be used as the place_id when updating a status.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-search\n     */\n\n  }, {\n    key: \"geoSearch\",\n    value: function geoSearch(options) {\n      return this.get('geo/search.json', options);\n    }\n    /**\n     * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n     * This request is an informative call and will deliver generalized results about geography.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-reverse_geocode\n     */\n\n  }, {\n    key: \"geoReverseGeoCode\",\n    value: function geoReverseGeoCode(options) {\n      return this.get('geo/reverse_geocode.json', options);\n    }\n    /* Developer utilities */\n\n    /**\n     * Returns the current rate limits for methods belonging to the specified resource families.\n     * Each API resource belongs to a \"resource family\" which is indicated in its method documentation.\n     * The method's resource family can be determined from the first component of the path after the resource version.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status\n     */\n\n  }, {\n    key: \"rateLimitStatuses\",\n    value: function rateLimitStatuses() {\n      for (var _len = arguments.length, resources = new Array(_len), _key = 0; _key < _len; _key++) {\n        resources[_key] = arguments[_key];\n      }\n\n      return this.get('application/rate_limit_status.json', {\n        resources: resources\n      });\n    }\n    /**\n     * Returns the list of languages supported by Twitter along with the language code supported by Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/supported-languages/api-reference/get-help-languages\n     */\n\n  }, {\n    key: \"supportedLanguages\",\n    value: function supportedLanguages() {\n      return this.get('help/languages.json');\n    }\n  }, {\n    key: \"stream\",\n    get: function get() {\n      var copiedClient = new client_v1_1.default(this);\n      copiedClient.setPrefix(globals_1.API_V1_1_STREAM_PREFIX);\n      return copiedClient;\n    }\n  }]);\n\n  return TwitterApiv1ReadOnly;\n}(client_subclient_1.default);\n\nexports.default = TwitterApiv1ReadOnly;","map":null,"metadata":{},"sourceType":"script"}