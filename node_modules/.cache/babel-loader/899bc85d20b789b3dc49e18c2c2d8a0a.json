{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\nvar interfaceName = \"AbstractRange\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (globalObject, value) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new globalObject.TypeError(\"\".concat(context, \" is not of type 'AbstractRange'.\"));\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  var proto;\n\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"AbstractRange\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject, newTarget) {\n  var wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var ctorRegistry = utils.initCtorRegistry(globalObject);\n\n  var AbstractRange = /*#__PURE__*/function () {\n    function AbstractRange() {\n      _classCallCheck(this, AbstractRange);\n\n      throw new globalObject.TypeError(\"Illegal constructor\");\n    }\n\n    _createClass(AbstractRange, [{\n      key: \"startContainer\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get startContainer' called on an object that is not a valid instance of AbstractRange.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"startContainer\"]);\n      }\n    }, {\n      key: \"startOffset\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get startOffset' called on an object that is not a valid instance of AbstractRange.\");\n        }\n\n        return esValue[implSymbol][\"startOffset\"];\n      }\n    }, {\n      key: \"endContainer\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get endContainer' called on an object that is not a valid instance of AbstractRange.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"endContainer\"]);\n      }\n    }, {\n      key: \"endOffset\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get endOffset' called on an object that is not a valid instance of AbstractRange.\");\n        }\n\n        return esValue[implSymbol][\"endOffset\"];\n      }\n    }, {\n      key: \"collapsed\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new globalObject.TypeError(\"'get collapsed' called on an object that is not a valid instance of AbstractRange.\");\n        }\n\n        return esValue[implSymbol][\"collapsed\"];\n      }\n    }]);\n\n    return AbstractRange;\n  }();\n\n  Object.defineProperties(AbstractRange.prototype, _defineProperty({\n    startContainer: {\n      enumerable: true\n    },\n    startOffset: {\n      enumerable: true\n    },\n    endContainer: {\n      enumerable: true\n    },\n    endOffset: {\n      enumerable: true\n    },\n    collapsed: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"AbstractRange\",\n    configurable: true\n  }));\n  ctorRegistry[interfaceName] = AbstractRange;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: AbstractRange\n  });\n};\n\nvar Impl = require(\"../range/AbstractRange-impl.js\");","map":null,"metadata":{},"sourceType":"script"}