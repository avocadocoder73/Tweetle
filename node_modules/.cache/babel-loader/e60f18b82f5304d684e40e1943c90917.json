{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\youno\\\\tweetle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar _require = require(\"../helpers/namespaces\"),\n    HTML_NS = _require.HTML_NS;\n\nexports.implementation = /*#__PURE__*/function () {\n  function HTMLCollectionImpl(globalObject, args, privateData) {\n    _classCallCheck(this, HTMLCollectionImpl);\n\n    this._list = [];\n    this._version = -1;\n    this._element = privateData.element;\n    this._query = privateData.query;\n    this._globalObject = globalObject;\n\n    this._update();\n  }\n\n  _createClass(HTMLCollectionImpl, [{\n    key: \"item\",\n    value: function item(index) {\n      this._update();\n\n      return this._list[index] || null;\n    }\n  }, {\n    key: \"namedItem\",\n    value: function namedItem(key) {\n      if (key === \"\") {\n        return null;\n      }\n\n      this._update();\n\n      var _iterator = _createForOfIteratorHelper(this._list),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var element = _step.value;\n\n          if (element.getAttributeNS(null, \"id\") === key) {\n            return element;\n          }\n\n          if (element._namespaceURI === HTML_NS) {\n            var name = element.getAttributeNS(null, \"name\");\n\n            if (name === key) {\n              return element;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      if (this._version < this._element._version) {\n        var snapshot = this._query();\n\n        for (var i = 0; i < snapshot.length; i++) {\n          this._list[i] = snapshot[i];\n        }\n\n        this._list.length = snapshot.length;\n        this._version = this._element._version;\n      }\n    }\n  }, {\n    key: Symbol.iterator,\n    // Inherit some useful functions from Array.\n    value: function value() {\n      this._update();\n\n      return this._list[Symbol.iterator]();\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      this._update();\n\n      return this._list.entries();\n    }\n  }, {\n    key: \"filter\",\n    value: function filter() {\n      var _this$_list;\n\n      this._update();\n\n      return (_this$_list = this._list).filter.apply(_this$_list, arguments);\n    }\n  }, {\n    key: \"map\",\n    value: function map() {\n      var _this$_list2;\n\n      this._update();\n\n      return (_this$_list2 = this._list).map.apply(_this$_list2, arguments);\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf() {\n      var _this$_list3;\n\n      this._update();\n\n      return (_this$_list3 = this._list).indexOf.apply(_this$_list3, arguments);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      this._update();\n\n      return this._list.length;\n    }\n  }, {\n    key: idlUtils.supportedPropertyIndices,\n    get: function get() {\n      this._update();\n\n      return this._list.keys();\n    }\n  }, {\n    key: idlUtils.supportedPropertyNames,\n    get: function get() {\n      this._update();\n\n      var result = new Set();\n\n      var _iterator2 = _createForOfIteratorHelper(this._list),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var element = _step2.value;\n          var id = element.getAttributeNS(null, \"id\");\n\n          if (id) {\n            result.add(id);\n          }\n\n          if (element._namespaceURI === HTML_NS) {\n            var name = element.getAttributeNS(null, \"name\");\n\n            if (name) {\n              result.add(name);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return result;\n    }\n  }]);\n\n  return HTMLCollectionImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}